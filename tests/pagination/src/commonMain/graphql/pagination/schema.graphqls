extend schema @link(url: "https://specs.apollo.dev/kotlin_labs/v0.2", import: ["@typePolicy", "@fieldPolicy"])

type Query
@typePolicy(embeddedFields: "usersCursorBased, usersOffsetBasedWithPage" connectionFields: "usersCursorBased2, usersCursorBased3")
@fieldPolicy(forField: "usersCursorBased", paginationArgs: "first, after, last, before")
@fieldPolicy(forField: "usersOffsetBasedWithArray", paginationArgs: "offset, limit")
@fieldPolicy(forField: "usersOffsetBasedWithPage", paginationArgs: "offset, limit")
{
  usersCursorBased(first: Int = 10, after: String = null, last: Int = null, before: String = null): UserConnection!
  usersCursorBased2(first: Int = 10, after: String = null, last: Int = null, before: String = null): UserConnection2!
  usersCursorBased3(first: Int = 10, after: String = null, last: Int = null, before: String = null): UserConnection3!

  usersOffsetBasedWithArray(offset: Int = 0, limit: Int = 10): [User!]!

  usersOffsetBasedWithPage(offset: Int = 0, limit: Int = 10): UserPage!
}

type UserConnection @typePolicy(embeddedFields: "pageInfo, edges") {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

type UserConnection2 {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

type UserConnection3 {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
}

type PageInfo {
  startCursor: String!
  endCursor: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPage {
  users: [User!]!
}

type User @typePolicy(keyFields: "id") {
  id: ID!
  name: String!
  email: String!
  admin: Boolean
}
