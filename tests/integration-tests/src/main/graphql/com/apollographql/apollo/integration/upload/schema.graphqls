type Query {
  uploads: [File]
  uploadQuery(file: Upload): ID
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
}

type Mutation {
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
  nestedUpload(topFile: Upload, topFileList: [Upload], nested: NestedObject): String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input NestedObject {
  recursiveNested: [NestedObject]
  text: String
  file: Upload
  fileList: [Upload]
  textList: [String]
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

schema {
  query: Query
  mutation: Mutation
}
