type Query {
  animals: [Animal!]!
  computers: [Computer!]!
  myEnum(inputEnum: myEnum): myEnum
  findUser(findUserInput: FindUserInput!): User
}

type Mutation {
  createPerson(personInput: personInput): Boolean
}


interface Animal {
  id: ID!
  name: String!
}

type dog implements Animal {
  id: ID!
  name: String!
  barkVolume: Int!
  fieldOnDogAndCat: String!
}

type Cat implements Animal {
  id: ID!
  name: String!
  meowVolume: Int!
  fieldOnDogAndCat: String!
}

type Computer {
  id: ID!
  cpu: String!
  year: Int!
  screen: Screen!
  releaseDate: Date
}

type Screen {
  resolution: String!
  isColor: Boolean!
}

scalar Date

enum myEnum {
  VALUE_A
  VALUE_B
  VALUE_C
  VALUE_D
  VALUE_E
  VALUE_F
  VALUE_G
}

input personInput {
  firstName: String
  lastName: String
  age: Int
  address: AddressInput
}

input AddressInput {
  num: Int
  street: String
}



directive @oneOf on INPUT_OBJECT

type User {
  id: ID!
}

input FindUserInput @oneOf {
  email: String
  name: String
  identity: FindUserBySocialNetworkInput
  friends: FindUserByFriendInput
}

input FindUserBySocialNetworkInput @oneOf {
  facebookId: String
  googleId: String
}

input FindUserByFriendInput {
  socialNetworkId: ID!
  friendId: ID!
}
