type Query {
  random: Int!
  animal: Animal
  location: GeoPoint
  languageCode: LanguageCode
  long: Long
  json: Json

  "Closes the socket"
  closeWebSocket: String!
  random: Int!
  time: Int!
}

type Mutation {
  createAnimal(input: AnimalInput!): Animal
  ping: Boolean
}

type Subscription {
  animalCreated: Animal

  "Count from 0 until 'to', waiting 'delayMillis' after each response"
  count(delayMillis: Int!, to: Int!): Int!

  "Count from 0 until 'to', waiting 'delayMillis' after each response and returns each result as a String"
  countString(delayMillis: Int!, to: Int!): String!

  "Trigger an error when accessed"
  operationError: String!

  "Returns a GraphQL error after 'after' items"
  graphqlAccessError(after: Int!): Int

  time: Int!
}

interface Animal {
  species: String
  habitat: Habitat
}

type Habitat {
  kind: String
  temperature: Float
}

type Dog implements Animal {
  species: String
  habitat: Habitat
}

type Cat implements Animal {
  species: String
  habitat: Habitat
}

input AnimalInput {
  class: AnimalClass!
  name: String!
}

enum AnimalClass {
  MAMMAL
  FISH
  BIRD
  INSECT
}

scalar GeoPoint

scalar LanguageCode

scalar Long

scalar Json
