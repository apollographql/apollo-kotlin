type Query {
  nullableInt(nullableInt: Int, nonNullableInt: Int!, nonNullableIntWithDefault: Int! = 4, nullableInput: MyInput, nonNullableInput: MyInput!, nonNullableInputWithDefault: MyInput! = {nonNullableInt: 4}): Int
  nonNullableInt(nullableInt: Int, nonNullableInt: Int!, nonNullableIntWithDefault: Int! = 4, nullableInput: MyInput, nonNullableInput: MyInput!, nonNullableInputWithDefault: MyInput! = {nonNullableInt: 4}): Int!
  nullableMyType: MyType
  nonNullableMyType: MyType!
  nullableListOfNullableString: [String]
  nullableListOfNonNullableString: [String!]
  myUnion: MyUnion
  myInterface: MyInterface

  findUser(input: FindUserInput): User
}

input MyInput {
  nullableInt: Int
  nonNullableInt: Int!
  nonNullableIntWithDefault: Int! = 4
}

type MyType {
  nullableInt: Int
  nonNullableInt: Int!
}

union MyUnion = A|B

type A {
  a: String
}

type B {
  b: String
}

interface MyInterface {
  x: Int
}

type C implements MyInterface {
  x: Int
}

type D implements MyInterface {
  x: Int
}

directive @oneOf on INPUT_OBJECT

type User {
  id: ID!
}

input FindUserInput @oneOf {
  email: String
  name: String
  identity: FindUserBySocialNetworkInput
  friends: FindUserByFriendInput
}

input FindUserBySocialNetworkInput @oneOf {
  facebookId: String
  googleId: String
}

input FindUserByFriendInput {
  socialNetworkId: ID!
  friendId: ID!
}
