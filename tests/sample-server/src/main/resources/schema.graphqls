type Query {
  random: Int!
  time: Int!
}

type Mutation {
  "Force close all websockets"
  closeAllWebSockets: String!
}

type Subscription {
  "Count from 0 until 'to', waiting 'delayMillis' after each response"
  count(delayMillis: Int!, to: Int!): Int!
  "Count from 0 until 'to', waiting 'delayMillis' after each response and returns each result as a String"
  countString(delayMillis: Int!, to: Int!): String!
  "Trigger an error when accessed"
  operationError: String!
  "Returns a GraphQL error after 'after' items"
  graphqlAccessError(after: Int! = 1): Int

  "Force close the websocket this subscription is executing on"
  closeWebSocket: String!

  time: Int!
}
