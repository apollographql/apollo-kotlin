schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

type QueryRoot {
  random: Int!

  zero: Int!

  valueSharedWithSubscriptions: Int!

  secondsSinceEpoch: Float!
}

type MutationRoot {
  closeAllWebSockets: String!
}

type SubscriptionRoot {
  count(to: Int!, intervalMillis: Int!): Int!

  countString(to: Int!, intervalMillis: Int!): String!

  secondsSinceEpoch(intervalMillis: Int!): Float!

  operationError: String!

  graphqlAccessError(after: Int!): Int

  closeWebSocket: String!

  state(intervalMillis: Int!): State!

  valueSharedWithSubscriptions: Int!
}

type State {
  tag: String!

  subscriptionId: String!
}
