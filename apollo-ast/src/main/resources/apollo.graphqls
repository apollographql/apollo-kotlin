# Marks a field or variable definition as optional or required
# By default Apollo Android generates all variables of nullable types as optional, in compliance with the GraphQL specification,
# but this can be configured with this directive, because if the variable was added in the first place, it's usually to pass a value
directive @optional(if: Boolean = true) on FIELD | VARIABLE_DEFINITION

# Marks a field as non-null. The corresponding Kotlin property will be made non-nullable even if the GraphQL type is nullable.
# When used on an object definition in a schema document, `fields` must be non-empty and contain a selection set of fields that should be non-null
# When used on a field from an executable document, `fields` must always be empty
#
# Setting the directive at the schema level is usually easier as there is little reason that a field would be non-null in one place
# and null in the other
directive @nonnull(fields: String! = "") on OBJECT | FIELD

# Marks fields as key fields. Key fields are used to compute the cache key of an object
# `keyFields` should contain a selection set. Composite fields are not supported yet.
directive @typePolicy(keyFields: String!) on OBJECT

# Indicates how to compute a key from a field arguments.
directive @fieldPolicy(forField: String!, keyArgs: String!) on OBJECT
