//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.1'.
//
package com.example.generated.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.generated.ComputersQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object ComputersQuery_ResponseAdapter {
  public object Data : Adapter<ComputersQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("computers")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ComputersQuery.Data {
      var _computers: List<ComputersQuery.Computer>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _computers = Computer.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ComputersQuery.Data(
          computers = _computers!!
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: ComputersQuery.Data,
    ): Unit {
      writer.name("computers")
      Computer.obj(true).list().toJson(writer, customScalarAdapters, value.computers)
    }
  }

  public object Computer : Adapter<ComputersQuery.Computer> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "screen")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ComputersQuery.Computer {
      var __typename: String? = null
      var _id: String? = null
      var _screen: ComputersQuery.Screen? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _screen = Screen.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _onComputer = com.example.generated.adapter.ComputersQuery_ResponseAdapter.OnComputer.fromJson(reader,
          customScalarAdapters)

      reader.rewind()
      val _computerFields = com.example.generated.fragment.ComputerFieldsImpl_ResponseAdapter.ComputerFields.fromJson(reader,
          customScalarAdapters)

      return ComputersQuery.Computer(
          __typename = __typename!!,
          id = _id!!,
          screen = _screen!!,
          onComputer = _onComputer,
          computerFields = _computerFields
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: ComputersQuery.Computer,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("screen")
      Screen.obj(true).toJson(writer, customScalarAdapters, value.screen)

      com.example.generated.adapter.ComputersQuery_ResponseAdapter.OnComputer.toJson(writer,
          customScalarAdapters, value.onComputer)

      com.example.generated.fragment.ComputerFieldsImpl_ResponseAdapter.ComputerFields.toJson(writer,
          customScalarAdapters, value.computerFields)
    }
  }

  public object Screen : Adapter<ComputersQuery.Screen> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "resolution")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ComputersQuery.Screen {
      var __typename: String? = null
      var _resolution: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _resolution = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _screenFields = com.example.generated.fragment.ScreenFieldsImpl_ResponseAdapter.ScreenFields.fromJson(reader,
          customScalarAdapters)

      return ComputersQuery.Screen(
          __typename = __typename!!,
          resolution = _resolution!!,
          screenFields = _screenFields
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: ComputersQuery.Screen,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("resolution")
      StringAdapter.toJson(writer, customScalarAdapters, value.resolution)

      com.example.generated.fragment.ScreenFieldsImpl_ResponseAdapter.ScreenFields.toJson(writer,
          customScalarAdapters, value.screenFields)
    }
  }

  public object OnComputer : Adapter<ComputersQuery.OnComputer> {
    public val RESPONSE_NAMES: List<String> = listOf("cpu", "year")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ComputersQuery.OnComputer {
      var _cpu: String? = null
      var _year: Int? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cpu = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _year = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ComputersQuery.OnComputer(
          cpu = _cpu!!,
          year = _year!!
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: ComputersQuery.OnComputer,
    ): Unit {
      writer.name("cpu")
      StringAdapter.toJson(writer, customScalarAdapters, value.cpu)

      writer.name("year")
      IntAdapter.toJson(writer, customScalarAdapters, value.year)
    }
  }
}
