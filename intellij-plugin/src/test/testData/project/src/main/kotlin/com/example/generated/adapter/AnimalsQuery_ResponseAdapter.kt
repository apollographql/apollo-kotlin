//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.1'.
//
package com.example.generated.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.generated.AnimalsQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object AnimalsQuery_ResponseAdapter {
  public object Data : Adapter<AnimalsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animals")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalsQuery.Data {
      var _animals: List<AnimalsQuery.Animal>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animals = Animal.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalsQuery.Data(
          animals = _animals!!
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: AnimalsQuery.Data,
    ): Unit {
      writer.name("animals")
      Animal.obj(true).list().toJson(writer, customScalarAdapters, value.animals)
    }
  }

  public object Animal : Adapter<AnimalsQuery.Animal> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalsQuery.Animal {
      var __typename: String? = null
      var _id: String? = null
      var _name: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _onCat: AnimalsQuery.OnCat? = null
      if (possibleTypes("Cat").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onCat = com.example.generated.adapter.AnimalsQuery_ResponseAdapter.OnCat.fromJson(reader,
            customScalarAdapters)
      }

      var _onDog: AnimalsQuery.OnDog? = null
      if (possibleTypes("Dog").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _onDog = com.example.generated.adapter.AnimalsQuery_ResponseAdapter.OnDog.fromJson(reader,
            customScalarAdapters)
      }

      return AnimalsQuery.Animal(
          __typename = __typename,
          id = _id!!,
          name = _name!!,
          onCat = _onCat,
          onDog = _onDog
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: AnimalsQuery.Animal,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      if (value.onCat != null) {
        com.example.generated.adapter.AnimalsQuery_ResponseAdapter.OnCat.toJson(writer,
            customScalarAdapters, value.onCat)
      }

      if (value.onDog != null) {
        com.example.generated.adapter.AnimalsQuery_ResponseAdapter.OnDog.toJson(writer,
            customScalarAdapters, value.onDog)
      }
    }
  }

  public object OnCat : Adapter<AnimalsQuery.OnCat> {
    public val RESPONSE_NAMES: List<String> = listOf("meowVolume")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalsQuery.OnCat {
      var _meowVolume: Int? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _meowVolume = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalsQuery.OnCat(
          meowVolume = _meowVolume!!
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: AnimalsQuery.OnCat,
    ): Unit {
      writer.name("meowVolume")
      IntAdapter.toJson(writer, customScalarAdapters, value.meowVolume)
    }
  }

  public object OnDog : Adapter<AnimalsQuery.OnDog> {
    public val RESPONSE_NAMES: List<String> = listOf("barkVolume")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalsQuery.OnDog {
      var _barkVolume: Int? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _barkVolume = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalsQuery.OnDog(
          barkVolume = _barkVolume!!
      )
    }

    public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: AnimalsQuery.OnDog,
    ): Unit {
      writer.name("barkVolume")
      IntAdapter.toJson(writer, customScalarAdapters, value.barkVolume)
    }
  }
}
