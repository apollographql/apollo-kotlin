//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.1'.
//
package com.example.generated.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.generated.fragment.selections.ComputerFieldsSelections
import com.example.generated.fragment.selections.ScreenFieldsSelections
import com.example.generated.type.Computer
import com.example.generated.type.GraphQLID
import com.example.generated.type.GraphQLInt
import com.example.generated.type.GraphQLString
import com.example.generated.type.Screen
import kotlin.collections.List

public object ComputersQuerySelections {
  private val __onComputer: List<CompiledSelection> = listOf(
      CompiledField.Builder(
          name = "cpu",
          type = GraphQLString.type.notNull()
      ).build(),
      CompiledField.Builder(
          name = "year",
          type = GraphQLInt.type.notNull()
      ).build()
  )

  private val __screen: List<CompiledSelection> = listOf(
      CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
      ).build(),
      CompiledField.Builder(
          name = "resolution",
          type = GraphQLString.type.notNull()
      ).build(),
      CompiledFragment.Builder(
          typeCondition = "Screen",
          possibleTypes = listOf("Screen")
      ).selections(ScreenFieldsSelections.__root)
          .build()
  )

  private val __computers: List<CompiledSelection> = listOf(
      CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
      ).build(),
      CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
      ).build(),
      CompiledFragment.Builder(
          typeCondition = "Computer",
          possibleTypes = listOf("Computer")
      ).selections(__onComputer)
          .build(),
      CompiledField.Builder(
          name = "screen",
          type = Screen.type.notNull()
      ).selections(__screen)
          .build(),
      CompiledFragment.Builder(
          typeCondition = "Computer",
          possibleTypes = listOf("Computer")
      ).selections(ComputerFieldsSelections.__root)
          .build()
  )

  public val __root: List<CompiledSelection> = listOf(
      CompiledField.Builder(
          name = "computers",
          type = Computer.type.notNull().list().notNull()
      ).selections(__computers)
          .build()
  )
}
