<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
  <name>Apollo GraphQL</name>
  <!-- Use the id that is defined for the Organization in the Marketplace -->
  <!-- See https://plugins.jetbrains.com/docs/marketplace/organizations.html#4b3f843d -->
  <vendor url="https://apollographql.com" email="jetbrains-marketplace@apollographql.com">apollographql</vendor>

  <!-- In most cases, this should be the same list as what is listed under gradle.properties/platformPlugins -->
  <!-- See https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html#declaring-plugin-dependencies -->
  <depends>com.intellij.modules.platform</depends>
  <depends>com.intellij.modules.java</depends>
  <depends>org.jetbrains.kotlin</depends>
  <depends>com.intellij.gradle</depends>
  <depends>com.intellij.lang.jsgraphql</depends>
  <depends>org.toml.lang</depends>

  <resource-bundle>messages.ApolloBundle</resource-bundle>

  <extensions defaultExtensionNs="com.intellij">

    <!-- Application -->
    <applicationService serviceImplementation="com.apollographql.ijplugin.application.ApolloApplicationService" />

    <!-- Apollo project -->
    <projectService
        serviceInterface="com.apollographql.ijplugin.project.ApolloProjectService"
        serviceImplementation="com.apollographql.ijplugin.project.ApolloProjectServiceImpl"
    />

    <!-- Codegen -->
    <projectService serviceImplementation="com.apollographql.ijplugin.codegen.ApolloCodegenService" />

    <!-- Settings -->
    <projectService serviceImplementation="com.apollographql.ijplugin.settings.SettingsService" />
    <!-- Note: the value of `parentId` corresponds to the settings `id` of the JS GraphQL plugin -->
    <!-- See https://github.com/JetBrains/js-graphql-intellij-plugin/blob/396770c293a57f4903acdf427ba5136db6a79d0b/resources/META-INF/plugin.xml#L151 -->
    <projectConfigurable
        id="com.apollographql.ijplugin.settings.SettingsConfigurable"
        parentId="settings.jsgraphql"
        instance="com.apollographql.ijplugin.settings.SettingsConfigurable"
        displayName="Apollo Kotlin"
        nonDefaultProject="true"
    />

    <!-- Kotlin operation/fragment marker provider -->
    <codeInsight.lineMarkerProvider
        language="kotlin"
        implementationClass="com.apollographql.ijplugin.navigation.KotlinDefinitionMarkerProvider"
    />

    <!-- Kotlin operation/fragment/field/enum/input 'go to declaration' handler -->
    <gotoDeclarationHandler implementation="com.apollographql.ijplugin.navigation.KotlinGotoDeclarationHandler" />

    <!-- GraphQL operation/fragment/field/enum/input 'go to declaration' handler -->
    <gotoDeclarationHandler implementation="com.apollographql.ijplugin.navigation.GraphQLGotoDeclarationHandler" />

    <!-- Kotlin operation/fragment/field/enum/input 'go to type declaration' handler -->
    <!-- Needs order="first" so the Kotlin handler doesn't take over -->
    <typeDeclarationProvider implementation="com.apollographql.ijplugin.navigation.KotlinTypeDeclarationProvider" order="first" />

    <!-- GraphQL 'find usages' -->
    <customUsageSearcher implementation="com.apollographql.ijplugin.navigation.GraphQLCustomUsageSearcher" />

    <!-- Listen to Gradle sync -->
    <externalSystemTaskNotificationListener implementation="com.apollographql.ijplugin.gradle.GradleListener" />

    <!-- Tooling model -->
    <projectService serviceImplementation="com.apollographql.ijplugin.gradle.GradleToolingModelService" />

    <!-- Listens to availability of Tooling model, and notifies the GraphQL plugin -->
    <projectService serviceImplementation="com.apollographql.ijplugin.graphql.GraphQLConfigService" />

    <!-- Icons -->
    <!-- This may be a bit controversial, but we want to override the GraphQL plugin's icons (hence order="first") -->
    <!-- because when navigating to GraphQL files from Kotlin code, a generic GraphQL logo is nicer than a specific -->
    <!-- icon per element type -->
    <iconProvider implementation="com.apollographql.ijplugin.icons.GraphQLIconProvider" order="first" />

    <!-- Studio / Sandbox -->
    <projectService serviceImplementation="com.apollographql.ijplugin.studio.sandbox.SandboxService" />

    <!-- Fields insights inspection ("expensive field") -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection language="GraphQL"
                     implementationClass="com.apollographql.ijplugin.studio.fieldinsights.ApolloFieldInsightsInspection"
                     groupPathKey="inspection.group.graphql"
                     groupKey="inspection.group.graphql.studio"
                     key="inspection.fieldInsights.displayName"
                     enabledByDefault="true"
                     level="WEAK WARNING"
    />

    <!-- Fields insights service (fetch and cache data) -->
    <projectService serviceImplementation="com.apollographql.ijplugin.studio.fieldinsights.FieldInsightsService" />

  </extensions>

  <!-- Contribute configuration to the GraphQL plugin -->
  <extensions defaultExtensionNs="com.intellij.lang.jsgraphql">
    <configContributor implementation="com.apollographql.ijplugin.graphql.ApolloGraphQLConfigContributor" />
  </extensions>

  <applicationListeners>
    <!-- Listen to project open/close -->
    <listener
        class="com.apollographql.ijplugin.project.ApolloProjectManagerListener"
        topic="com.intellij.openapi.project.ProjectManagerListener"
    />
  </applicationListeners>

  <actions>
    <!-- Refactor / Apollo -->
    <!--suppress PluginXmlCapitalization -->
    <group
        id="ApolloRefactorActionGroup"
        popup="true"
        class="com.apollographql.ijplugin.action.ApolloRefactorActionGroup"
    >
      <add-to-group group-id="RefactoringMenu" anchor="last" />
    </group>

    <!-- Refactor / Apollo / Migrate to Apollo Kotlin 3 -->
    <action
        id="ApolloV2ToV3MigrationAction"
        class="com.apollographql.ijplugin.action.ApolloV2ToV3MigrationAction"
    >
      <add-to-group group-id="ApolloRefactorActionGroup" />
    </action>

    <!-- Refactor / Apollo / Migrate to operationBased Codegen -->
    <!--suppress PluginXmlCapitalization -->
    <action
        id="CompatToOperationBasedCodegenMigrationAction"
        class="com.apollographql.ijplugin.action.CompatToOperationBasedCodegenMigrationAction"
    >
      <add-to-group group-id="ApolloRefactorActionGroup" />
    </action>


    <!-- Tools / Apollo -->
    <!--suppress PluginXmlCapitalization -->
    <group
        id="ApolloToolsActionGroup"
        popup="true"
        icon="com.apollographql.ijplugin.icons.ApolloIcons.Action.ApolloColor"
        class="com.apollographql.ijplugin.action.ApolloToolsActionGroup"
    >
      <add-to-group group-id="ToolsMenu" anchor="last" />
    </group>

    <!-- Tools / Apollo / Open in Apollo Sandbox -->
    <action
        id="OpenInSandboxAction"
        class="com.apollographql.ijplugin.studio.sandbox.OpenInSandboxAction"
    >
      <add-to-group group-id="ApolloToolsActionGroup" />
      <add-to-group group-id="RevealGroup" />
      <override-text place="EditorTabPopup" text="Apollo Sandbox" />
      <override-text place="ProjectViewPopup" use-text-of-place="EditorTabPopup" />
      <override-text place="EditorPopup" use-text-of-place="EditorTabPopup" />
      <override-text place="FavoritesPopup" use-text-of-place="EditorTabPopup" />
    </action>

    <!-- Tools / Apollo / Fetch Field Latencies -->
    <action
        id="RefreshFieldInsightsAction"
        class="com.apollographql.ijplugin.studio.fieldinsights.RefreshFieldInsightsAction"
    >
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>
  </actions>

</idea-plugin>
