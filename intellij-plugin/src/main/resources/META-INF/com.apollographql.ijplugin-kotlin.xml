<idea-plugin>
  <!-- Add here declarations that only work in presence of the Kotlin plugin -->

  <resource-bundle>messages.ApolloBundle</resource-bundle>

  <extensions defaultExtensionNs="com.intellij">
    <!-- Kotlin operation/fragment marker provider -->
    <codeInsight.lineMarkerProvider
        language="kotlin"
        implementationClass="com.apollographql.ijplugin.navigation.KotlinDefinitionMarkerProvider"
    />

    <!-- Kotlin operation/fragment/field/enum/input 'go to declaration' handler -->
    <gotoDeclarationHandler implementation="com.apollographql.ijplugin.navigation.KotlinGotoDeclarationHandler" />

    <!-- GraphQL operation/fragment/field/enum/input 'go to declaration' handler -->
    <gotoDeclarationHandler implementation="com.apollographql.ijplugin.navigation.GraphQLGotoDeclarationHandler" />

    <!-- Kotlin operation/fragment/field/enum/input 'go to type declaration' handler -->
    <!-- Needs order="first" so the Kotlin handler doesn't take over -->
    <typeDeclarationProvider implementation="com.apollographql.ijplugin.navigation.KotlinTypeDeclarationProvider" order="first" />

    <!-- GraphQL 'find usages' -->
    <customUsageSearcher implementation="com.apollographql.ijplugin.navigation.GraphQLCustomUsageSearcher" />


    <!-- "Apollo Kotlin 4 is available" inspection -->
    <!-- Runs on Kotlin (build.gradle.kts) and Toml (*.versions.toml) files -->
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.Apollo4AvailableInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.apollo4Available.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="kotlin"
        shortName="Apollo4AvailableKotlin"
    />

    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.Apollo4AvailableInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.apollo4Available.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="TOML"
        shortName="Apollo4AvailableToml"
    />

    <!-- Unused operation inspection -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloUnusedOperationInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.unusedOperation.displayName"
        enabledByDefault="true"
        level="WARNING"
        editorAttributes="NOT_USED_ELEMENT_ATTRIBUTES"
    />

    <!-- Unused field inspection -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloUnusedFieldInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.unusedField.displayName"
        enabledByDefault="true"
        level="WARNING"
        editorAttributes="NOT_USED_ELEMENT_ATTRIBUTES"
    />

    <!-- Missing GraphQL definition import -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloMissingGraphQLDefinitionImportInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.missingGraphQLDefinitionImport.displayName"
        enabledByDefault="true"
        level="ERROR"
        editorAttributes="WRONG_REFERENCES_ATTRIBUTES"
    />

    <!-- "Missing introspection" inspection  -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="kotlin"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloEndpointNotConfiguredInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.endpointNotConfigured.displayName"
        enabledByDefault="true"
        level="INFO"
    />

    <!-- "OneOf Input creation" inspection  -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="kotlin"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloOneOfInputCreationInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.oneOfInputCreation.displayName"
        enabledByDefault="true"
        level="ERROR"
    />

    <!-- "Input class constructor issue" inspection  -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="kotlin"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloInputConstructorNamedArgsInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.inputConstructorNamedArgs.displayName"
        enabledByDefault="true"
        level="WARNING"
    />

    <!-- Fields insights inspection ("expensive field") -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.studio.fieldinsights.ApolloFieldInsightsInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.studio"
        key="inspection.fieldInsights.displayName"
        enabledByDefault="true"
        level="WEAK WARNING"
    />

    <!-- "Schema in .graphql file" inspection -->
    <!--suppress PluginXmlCapitalization -->
    <localInspection
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloSchemaInGraphqlFileInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.schemaInGraphqlFile.displayName"
        enabledByDefault="true"
        level="WARNING"
    />


    <!-- "GraphQL config file present" inspection -->
    <!-- Must be declared for each language the config file can be implemented in -->
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.graphQLConfigFilePresent.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="yaml"
        shortName="ApolloGraphQLConfigFilePresentYaml"
    />
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.graphQLConfigFilePresent.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="JSON"
        shortName="ApolloGraphQLConfigFilePresentJson"
    />
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.graphQLConfigFilePresent.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="TEXT"
        shortName="ApolloGraphQLConfigFilePresentText"
    />
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.graphQLConfigFilePresent.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="TypeScript"
        shortName="ApolloGraphQLConfigFilePresentTypeScript"
    />
    <!--suppress PluginXmlCapitalization, PluginXmlExtensionRegistration -->
    <localInspection
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentInspection"
        groupPathKey="inspection.group.graphql"
        groupKey="inspection.group.graphql.apolloKotlin"
        key="inspection.graphQLConfigFilePresent.displayName"
        enabledByDefault="true"
        level="WARNING"
        language="ECMAScript 6"
        shortName="ApolloGraphQLConfigFilePresentECMAScript6"
    />

    <!-- "GraphQL config file present" annotator -->
    <!-- Must be declared for each language the config file can be implemented in -->
    <annotator
        language="yaml"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentAnnotator" />

    <annotator
        language="JSON"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentAnnotator" />

    <annotator
        language="TEXT"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentAnnotator" />

    <annotator
        language="TypeScript"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentAnnotator" />

    <annotator
        language="ECMAScript 6"
        implementationClass="com.apollographql.ijplugin.inspection.ApolloGraphQLConfigFilePresentAnnotator" />

    <problemFileHighlightFilter implementation="com.apollographql.ijplugin.inspection.GraphQLConfigFileFilter" />

    <!-- "Change input class constructor to builder" intention -->
    <intentionAction>
      <language>kotlin</language>
      <className>com.apollographql.ijplugin.intention.ApolloInputConstructorChangeToBuilderIntention</className>
      <!--suppress PluginXmlCapitalization -->
      <category>Apollo Kotlin</category>
    </intentionAction>

    <!-- Suppression of GraphQLUnresolvedReference for certain known directives -->
    <lang.inspectionSuppressor
        language="GraphQL"
        implementationClass="com.apollographql.ijplugin.inspection.GraphQLUnresolvedReferenceInspectionSuppressor"
    />

    <!-- Normalized cache viewer -->
    <toolWindow
        id="NormalizedCacheViewer"
        factoryClass="com.apollographql.ijplugin.normalizedcache.NormalizedCacheToolWindowFactory"
        icon="com.apollographql.ijplugin.icons.ApolloIcons.ToolWindow.NormalizedCacheViewer"
        anchor="bottom"
        canCloseContents="true"
    />

    <!-- Rename GraphQL operation or fragment definition -->
    <renamePsiElementProcessor
        id="apollo.GraphQLDefinitionRenameProcessor"
        implementation="com.apollographql.ijplugin.refactoring.GraphQLDefinitionRenameProcessor"
        order="first"
    />

    <!-- Mark Apollo generated sources as generated -->
    <generatedSourcesFilter
        implementation="com.apollographql.ijplugin.generatedsources.ApolloGeneratedSourcesFilter"
    />

  </extensions>

  <actions>
    <!-- Refactor / Apollo / Migrate to Apollo Kotlin 3 (also in Tools / Apollo) -->
    <action
        id="ApolloV2ToV3MigrationAction"
        class="com.apollographql.ijplugin.action.ApolloV2ToV3MigrationAction"
    >
      <add-to-group group-id="ApolloRefactorActionGroup" />
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>

    <!-- Refactor / Apollo / Migrate to Apollo Kotlin 4 (also in Tools / Apollo) -->
    <action
        id="ApolloV3ToV4MigrationAction"
        class="com.apollographql.ijplugin.action.ApolloV3ToV4MigrationAction"
    >
      <add-to-group group-id="ApolloRefactorActionGroup" />
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>

    <!-- Refactor / Apollo / Migrate to operationBased Codegen (also in Tools / Apollo) -->
    <!--suppress PluginXmlCapitalization -->
    <action
        id="CompatToOperationBasedCodegenMigrationAction"
        class="com.apollographql.ijplugin.action.CompatToOperationBasedCodegenMigrationAction"
    >
      <add-to-group group-id="ApolloRefactorActionGroup" />
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>

    <!-- Tools / Apollo / Fetch Field Latencies -->
    <action
        id="RefreshFieldInsightsAction"
        class="com.apollographql.ijplugin.studio.fieldinsights.RefreshFieldInsightsAction"
    >
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>

    <!-- Tools / Apollo / Download schema -->
    <action
        id="DownloadSchemaAction"
        class="com.apollographql.ijplugin.gradle.DownloadSchemaAction"
    >
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>

    <!-- Tools / Apollo / Normalized Cache Viewer -->
    <action
        id="ShowNormalizedCacheToolWindowAction"
        class="com.apollographql.ijplugin.normalizedcache.ShowNormalizedCacheToolWindowAction"
    >
      <add-to-group group-id="ApolloToolsActionGroup" />
    </action>


    <!-- 'Execute' button on a GraphQL file editor's toolbar. -->
    <!-- Overrides the GraphQL plugin's action so we can strip Apollo client side directives before executing the query. -->
    <action
        id="GraphQLExecuteEditor"
        class="com.apollographql.ijplugin.action.GraphQLExecuteEditorAction"
        icon="com.intellij.icons.AllIcons.Actions.Execute"
        overrides="true"
    />
  </actions>

</idea-plugin>
