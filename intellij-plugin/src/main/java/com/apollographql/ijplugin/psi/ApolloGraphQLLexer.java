// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/grammars/ApolloGraphQLLexer.flex

/*
 *  Copyright (c) 2016-2024 Apollo Graph, Inc. (Formerly Meteor Development Group, Inc.)
 *  Copyright (c) 2015-present, Jim Kynde Meyer
 *  All rights reserved.
 *
 *  This source code is licensed under the MIT license found in the
 *  LICENSE file in the root directory of this source tree.
 */
package com.apollographql.ijplugin.psi;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.apollographql.ijplugin.psi.ApolloGraphQLElementTypes.*;


public class ApolloGraphQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED_STRING = 2;
  public static final int BLOCK_STRING = 4;
  public static final int VARIABLE_OR_TEMPLATE = 6;
  public static final int TEMPLATE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\36\u0100\1\u0400\u1001\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\0\1\10\1\0\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\1\0\1\17\11\20"+
    "\1\21\2\0\1\22\2\0\1\23\4\24\1\25\25\24"+
    "\1\26\1\27\1\30\1\0\1\24\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\24"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\24\1\55\1\56\1\24\1\57"+
    "\1\60\1\61\7\0\1\3\u01a2\0\2\3\326\0\u0100\3"+
    "\377\0\1\14";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\2\1\2\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\13\16\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\25\3\24\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\3\0\7\16\1\35\6\16\1\0"+
    "\1\36\1\0\1\24\1\0\1\37\1\40\1\41\1\0"+
    "\1\41\17\16\1\42\1\0\1\16\1\43\13\16\1\44"+
    "\5\16\1\45\2\16\1\46\4\16\1\47\1\16\1\50"+
    "\5\16\1\51\1\52\11\16\1\53\2\16\1\54\2\16"+
    "\1\55\1\16\1\56\2\16\1\57\1\60\2\16\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\372"+
    "\0\u015e\0\u0190\0\u01c2\0\372\0\372\0\372\0\372\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\372\0\372\0\372\0\u02bc\0\372"+
    "\0\372\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\372\0\372\0\372\0\u0514"+
    "\0\372\0\372\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\372"+
    "\0\u0640\0\372\0\372\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u02bc"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u0546\0\372"+
    "\0\u09f6\0\372\0\u0a28\0\372\0\372\0\u0a5a\0\u0a8c\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\372"+
    "\0\u0dac\0\u0dde\0\u02bc\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u02bc\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u02bc\0\u1130\0\u1162\0\u02bc"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u02bc\0\u125c\0\u02bc\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u02bc\0\u02bc\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u02bc"+
    "\0\u154a\0\u157c\0\u02bc\0\u15ae\0\u15e0\0\u02bc\0\u1612\0\u02bc"+
    "\0\u1644\0\u1676\0\u02bc\0\u02bc\0\u16a8\0\u16da\0\u02bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\6\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\27\1\30\1\6\1\31\3\27"+
    "\1\32\1\33\1\34\2\27\1\35\1\27\1\36\1\27"+
    "\1\37\1\27\1\40\1\41\1\42\1\43\1\44\3\27"+
    "\1\45\1\46\1\47\2\50\1\51\2\50\1\52\21\50"+
    "\1\53\32\50\1\54\2\7\2\54\1\55\21\54\1\56"+
    "\32\54\24\51\2\57\3\51\26\57\1\60\2\51\57\61"+
    "\1\62\1\61\1\63\63\0\2\7\64\0\1\64\54\0"+
    "\2\12\2\0\56\12\24\0\2\65\3\0\26\65\22\0"+
    "\1\22\1\23\57\0\1\66\61\0\1\67\6\0\1\70"+
    "\7\0\1\70\42\0\1\67\2\23\4\0\1\70\7\0"+
    "\1\70\43\0\2\27\3\0\2\27\3\0\26\27\22\0"+
    "\2\27\3\0\2\27\3\0\10\27\1\71\15\27\22\0"+
    "\2\27\3\0\2\27\3\0\13\27\1\72\10\27\1\73"+
    "\1\27\22\0\2\27\3\0\2\27\3\0\17\27\1\74"+
    "\6\27\22\0\2\27\3\0\2\27\3\0\12\27\1\75"+
    "\1\76\12\27\22\0\2\27\3\0\2\27\3\0\22\27"+
    "\1\77\3\27\22\0\2\27\3\0\2\27\3\0\13\27"+
    "\1\100\12\27\22\0\2\27\3\0\2\27\3\0\22\27"+
    "\1\101\3\27\22\0\2\27\3\0\2\27\3\0\4\27"+
    "\1\102\21\27\22\0\2\27\3\0\2\27\3\0\2\27"+
    "\1\103\17\27\1\104\3\27\22\0\2\27\3\0\2\27"+
    "\3\0\25\27\1\105\22\0\2\27\3\0\2\27\3\0"+
    "\13\27\1\106\12\27\3\0\2\50\1\0\2\50\1\0"+
    "\21\50\1\107\34\50\1\0\57\50\1\54\2\0\2\54"+
    "\1\0\21\54\1\0\32\54\5\110\1\111\54\110\1\112"+
    "\2\0\2\112\1\113\21\112\1\0\32\112\17\0\2\57"+
    "\3\0\2\57\3\0\26\57\3\0\57\61\1\0\1\61"+
    "\6\0\1\114\73\0\2\65\3\0\2\65\3\0\26\65"+
    "\21\0\1\115\62\0\2\116\54\0\1\117\1\0\1\117"+
    "\1\0\2\120\60\0\2\27\3\0\2\27\3\0\17\27"+
    "\1\121\6\27\22\0\2\27\3\0\2\27\3\0\22\27"+
    "\1\122\3\27\22\0\2\27\3\0\2\27\3\0\21\27"+
    "\1\123\4\27\22\0\2\27\3\0\2\27\3\0\1\124"+
    "\25\27\22\0\2\27\3\0\2\27\3\0\15\27\1\125"+
    "\10\27\22\0\2\27\3\0\2\27\3\0\15\27\1\126"+
    "\3\27\1\127\4\27\22\0\2\27\3\0\2\27\3\0"+
    "\21\27\1\130\4\27\22\0\2\27\3\0\2\27\3\0"+
    "\4\27\1\131\21\27\22\0\2\27\3\0\2\27\3\0"+
    "\15\27\1\132\10\27\22\0\2\27\3\0\2\27\3\0"+
    "\1\133\6\27\1\134\16\27\22\0\2\27\3\0\2\27"+
    "\3\0\1\27\1\135\24\27\22\0\2\27\3\0\2\27"+
    "\3\0\15\27\1\136\10\27\22\0\2\27\3\0\2\27"+
    "\3\0\10\27\1\137\15\27\3\0\5\110\1\140\54\110"+
    "\5\0\1\141\73\0\2\116\4\0\1\70\7\0\1\70"+
    "\43\0\2\120\60\0\2\27\3\0\2\27\3\0\4\27"+
    "\1\142\21\27\22\0\2\27\3\0\2\27\3\0\12\27"+
    "\1\143\13\27\22\0\2\27\3\0\2\27\3\0\4\27"+
    "\1\144\21\27\22\0\2\27\3\0\2\27\3\0\6\27"+
    "\1\145\17\27\22\0\2\27\3\0\2\27\3\0\11\27"+
    "\1\146\14\27\22\0\2\27\3\0\2\27\3\0\22\27"+
    "\1\147\3\27\22\0\2\27\3\0\2\27\3\0\4\27"+
    "\1\150\21\27\22\0\2\27\3\0\2\27\3\0\1\151"+
    "\25\27\22\0\2\27\3\0\2\27\3\0\17\27\1\152"+
    "\6\27\22\0\2\27\3\0\2\27\3\0\4\27\1\153"+
    "\21\27\22\0\2\27\3\0\2\27\3\0\11\27\1\154"+
    "\14\27\22\0\2\27\3\0\2\27\3\0\4\27\1\155"+
    "\21\27\22\0\2\27\3\0\2\27\3\0\20\27\1\156"+
    "\5\27\22\0\2\27\3\0\2\27\3\0\4\27\1\157"+
    "\21\27\22\0\2\27\3\0\2\27\3\0\14\27\1\160"+
    "\11\27\10\0\1\112\73\0\2\27\3\0\2\27\3\0"+
    "\2\27\1\161\23\27\22\0\2\27\3\0\2\27\3\0"+
    "\13\27\1\162\12\27\22\0\2\27\3\0\2\27\3\0"+
    "\12\27\1\163\13\27\22\0\2\27\3\0\2\27\3\0"+
    "\4\27\1\164\21\27\22\0\2\27\3\0\2\27\3\0"+
    "\21\27\1\165\4\27\22\0\2\27\3\0\2\27\3\0"+
    "\17\27\1\166\6\27\22\0\2\27\3\0\2\27\3\0"+
    "\21\27\1\167\4\27\22\0\2\27\3\0\2\27\3\0"+
    "\25\27\1\170\22\0\2\27\3\0\2\27\3\0\1\171"+
    "\25\27\22\0\2\27\3\0\2\27\3\0\1\172\25\27"+
    "\22\0\2\27\3\0\2\27\3\0\12\27\1\173\13\27"+
    "\22\0\2\27\3\0\2\27\3\0\2\27\1\174\23\27"+
    "\22\0\2\27\3\0\2\27\3\0\13\27\1\175\12\27"+
    "\22\0\2\27\3\0\2\27\3\0\21\27\1\176\4\27"+
    "\22\0\2\27\3\0\2\27\3\0\3\27\1\177\22\27"+
    "\22\0\2\27\3\0\2\27\3\0\4\27\1\200\21\27"+
    "\22\0\2\27\3\0\2\27\3\0\12\27\1\201\13\27"+
    "\22\0\2\27\3\0\2\27\3\0\5\27\1\202\20\27"+
    "\22\0\2\27\3\0\2\27\3\0\10\27\1\203\15\27"+
    "\22\0\2\27\3\0\2\27\3\0\21\27\1\204\4\27"+
    "\22\0\2\27\3\0\2\27\3\0\17\27\1\205\6\27"+
    "\22\0\2\27\3\0\2\27\3\0\1\206\25\27\22\0"+
    "\2\27\3\0\2\27\3\0\17\27\1\207\6\27\22\0"+
    "\2\27\3\0\2\27\3\0\10\27\1\210\15\27\22\0"+
    "\2\27\3\0\2\27\3\0\13\27\1\211\12\27\22\0"+
    "\2\27\3\0\2\27\3\0\4\27\1\212\21\27\22\0"+
    "\2\27\3\0\2\27\3\0\1\213\25\27\22\0\2\27"+
    "\3\0\2\27\3\0\14\27\1\214\11\27\22\0\2\27"+
    "\3\0\2\27\3\0\1\215\25\27\22\0\2\27\3\0"+
    "\2\27\3\0\10\27\1\216\15\27\22\0\2\27\3\0"+
    "\2\27\3\0\23\27\1\217\2\27\22\0\2\27\3\0"+
    "\2\27\3\0\21\27\1\220\4\27\22\0\2\27\3\0"+
    "\2\27\3\0\13\27\1\221\12\27\22\0\2\27\3\0"+
    "\2\27\3\0\2\27\1\222\23\27\22\0\2\27\3\0"+
    "\2\27\3\0\13\27\1\223\12\27\22\0\2\27\3\0"+
    "\2\27\3\0\1\27\1\224\24\27\22\0\2\27\3\0"+
    "\2\27\3\0\15\27\1\225\10\27\22\0\2\27\3\0"+
    "\2\27\3\0\4\27\1\226\21\27\22\0\2\27\3\0"+
    "\2\27\3\0\21\27\1\227\4\27\22\0\2\27\3\0"+
    "\2\27\3\0\4\27\1\230\21\27\22\0\2\27\3\0"+
    "\2\27\3\0\11\27\1\231\14\27\22\0\2\27\3\0"+
    "\2\27\3\0\21\27\1\232\4\27\22\0\2\27\3\0"+
    "\2\27\3\0\20\27\1\233\5\27\22\0\2\27\3\0"+
    "\2\27\3\0\4\27\1\234\21\27\22\0\2\27\3\0"+
    "\2\27\3\0\10\27\1\235\15\27\22\0\2\27\3\0"+
    "\2\27\3\0\14\27\1\236\11\27\22\0\2\27\3\0"+
    "\2\27\3\0\13\27\1\237\12\27\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\3\1\4\11\4\1\3\11"+
    "\1\1\2\11\13\1\3\11\1\1\2\11\5\1\1\11"+
    "\1\1\2\11\1\0\1\1\3\0\16\1\1\0\1\11"+
    "\1\0\1\11\1\0\2\11\1\1\1\0\20\1\1\11"+
    "\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    protected final Stack<State> myStateStack = new Stack<State>();
    protected int myLeftBraceCount;

    private void pushState(int state) {
        myStateStack.push(new State(yystate(), myLeftBraceCount));
        myLeftBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = myStateStack.pop();
        myLeftBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

  public ApolloGraphQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ApolloGraphQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  myLeftBraceCount = 0;
  myStateStack.clear();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 50: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 51: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 52: break;
          case 4:
            { pushState(QUOTED_STRING); return OPEN_QUOTE;
            }
          // fall through
          case 53: break;
          case 5:
            { return EOL_COMMENT;
            }
          // fall through
          case 54: break;
          case 6:
            { pushState(VARIABLE_OR_TEMPLATE); return DOLLAR;
            }
          // fall through
          case 55: break;
          case 7:
            { return AMP;
            }
          // fall through
          case 56: break;
          case 8:
            { return PAREN_L;
            }
          // fall through
          case 57: break;
          case 9:
            { return PAREN_R;
            }
          // fall through
          case 58: break;
          case 10:
            { return NUMBER;
            }
          // fall through
          case 59: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 60: break;
          case 12:
            { return EQUALS;
            }
          // fall through
          case 61: break;
          case 13:
            { return AT;
            }
          // fall through
          case 62: break;
          case 14:
            { return NAME;
            }
          // fall through
          case 63: break;
          case 15:
            { return BRACKET_L;
            }
          // fall through
          case 64: break;
          case 16:
            { return BRACKET_R;
            }
          // fall through
          case 65: break;
          case 17:
            { return BRACE_L;
            }
          // fall through
          case 66: break;
          case 18:
            { return PIPE;
            }
          // fall through
          case 67: break;
          case 19:
            { return BRACE_R;
            }
          // fall through
          case 68: break;
          case 20:
            { return REGULAR_STRING_PART;
            }
          // fall through
          case 69: break;
          case 21:
            { popState(); return BAD_CHARACTER;
            }
          // fall through
          case 70: break;
          case 22:
            { popState(); return CLOSING_QUOTE;
            }
          // fall through
          case 71: break;
          case 23:
            { popState(); return NAME;
            }
          // fall through
          case 72: break;
          case 24:
            { pushState(TEMPLATE); return BRACE_L;
            }
          // fall through
          case 73: break;
          case 25:
            { return TEMPLATE_CHAR;
            }
          // fall through
          case 74: break;
          case 26:
            { myLeftBraceCount++; return TEMPLATE_CHAR;
            }
          // fall through
          case 75: break;
          case 27:
            { if (myLeftBraceCount == 0) { popState(); popState(); return BRACE_R; } myLeftBraceCount--; return TEMPLATE_CHAR;
            }
          // fall through
          case 76: break;
          case 28:
            { return VARIABLE_NAME;
            }
          // fall through
          case 77: break;
          case 29:
            { return ON_KEYWORD;
            }
          // fall through
          case 78: break;
          case 30:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return REGULAR_STRING_PART;
            }
          // fall through
          case 79: break;
          case 31:
            { pushState(BLOCK_STRING);  return OPEN_TRIPLE_QUOTE;
            }
          // fall through
          case 80: break;
          case 32:
            { return SPREAD;
            }
          // fall through
          case 81: break;
          case 33:
            { return FLOAT;
            }
          // fall through
          case 82: break;
          case 34:
            { popState(); return CLOSING_TRIPLE_QUOTE;
            }
          // fall through
          case 83: break;
          case 35:
            { return ENUM_KEYWORD;
            }
          // fall through
          case 84: break;
          case 36:
            { return TYPE_KEYWORD;
            }
          // fall through
          case 85: break;
          case 37:
            { return INPUT_KEYWORD;
            }
          // fall through
          case 86: break;
          case 38:
            { return QUERY_KEYWORD;
            }
          // fall through
          case 87: break;
          case 39:
            { return UNION_KEYWORD;
            }
          // fall through
          case 88: break;
          case 40:
            { return EXTEND_KEYWORD;
            }
          // fall through
          case 89: break;
          case 41:
            { return SCALAR_KEYWORD;
            }
          // fall through
          case 90: break;
          case 42:
            { return SCHEMA_KEYWORD;
            }
          // fall through
          case 91: break;
          case 43:
            { return FRAGMENT_KEYWORD;
            }
          // fall through
          case 92: break;
          case 44:
            { return MUTATION_KEYWORD;
            }
          // fall through
          case 93: break;
          case 45:
            { return DIRECTIVE_KEYWORD;
            }
          // fall through
          case 94: break;
          case 46:
            { return INTERFACE_KEYWORD;
            }
          // fall through
          case 95: break;
          case 47:
            { return IMPLEMENTS_KEYWORD;
            }
          // fall through
          case 96: break;
          case 48:
            { return REPEATABLE_KEYWORD;
            }
          // fall through
          case 97: break;
          case 49:
            { return SUBSCRIPTION_KEYWORD;
            }
          // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
