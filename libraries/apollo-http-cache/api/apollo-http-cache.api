public abstract interface class com/apollographql/apollo/cache/http/ApolloHttpCache {
	public abstract fun clearAll ()V
	public abstract fun read (Ljava/lang/String;)Lcom/apollographql/apollo/api/http/HttpResponse;
	public abstract fun remove (Ljava/lang/String;)V
	public abstract fun write (Lcom/apollographql/apollo/api/http/HttpResponse;Ljava/lang/String;)Lcom/apollographql/apollo/api/http/HttpResponse;
}

public final class com/apollographql/apollo/cache/http/CachingHttpInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public static final field Companion Lcom/apollographql/apollo/cache/http/CachingHttpInterceptor$Companion;
	public fun <init> (Ljava/io/File;JLokio/FileSystem;)V
	public synthetic fun <init> (Ljava/io/File;JLokio/FileSystem;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getCache ()Lcom/apollographql/apollo/cache/http/ApolloHttpCache;
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/cache/http/CachingHttpInterceptor$Companion {
	public final fun cacheKey (Lcom/apollographql/apollo/api/http/HttpRequest;)Ljava/lang/String;
}

public final class com/apollographql/apollo/cache/http/DiskLruHttpCache : com/apollographql/apollo/cache/http/ApolloHttpCache {
	public static final field Companion Lcom/apollographql/apollo/cache/http/DiskLruHttpCache$Companion;
	public fun <init> (Lokio/FileSystem;Ljava/io/File;J)V
	public fun clearAll ()V
	public fun read (Ljava/lang/String;)Lcom/apollographql/apollo/api/http/HttpResponse;
	public fun remove (Ljava/lang/String;)V
	public fun write (Lcom/apollographql/apollo/api/http/HttpResponse;Ljava/lang/String;)Lcom/apollographql/apollo/api/http/HttpResponse;
}

public final class com/apollographql/apollo/cache/http/DiskLruHttpCache$Companion {
}

public final class com/apollographql/apollo/cache/http/HttpCache {
	public static final fun configureApolloClientBuilder (Lcom/apollographql/apollo/ApolloClient$Builder;Lcom/apollographql/apollo/cache/http/ApolloHttpCache;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static final fun configureApolloClientBuilder (Lcom/apollographql/apollo/ApolloClient$Builder;Ljava/io/File;J)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static final fun getHttpCache (Lcom/apollographql/apollo/ApolloClient;)Lcom/apollographql/apollo/cache/http/ApolloHttpCache;
	public static final fun httpDoNotStore (Lcom/apollographql/apollo/api/MutableExecutionOptions;Z)Ljava/lang/Object;
	public static final fun httpExpireAfterRead (Lcom/apollographql/apollo/api/MutableExecutionOptions;Z)Ljava/lang/Object;
	public static final fun httpExpireTimeout (Lcom/apollographql/apollo/api/MutableExecutionOptions;J)Ljava/lang/Object;
	public static final fun httpFetchPolicy (Lcom/apollographql/apollo/api/MutableExecutionOptions;Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;)Ljava/lang/Object;
	public static final fun isFromHttpCache (Lcom/apollographql/apollo/api/ApolloResponse;)Z
}

public final class com/apollographql/apollo/cache/http/HttpFetchPolicy : java/lang/Enum {
	public static final field CacheFirst Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
	public static final field CacheOnly Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
	public static final field NetworkFirst Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
	public static final field NetworkOnly Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
	public static fun values ()[Lcom/apollographql/apollo/cache/http/HttpFetchPolicy;
}

