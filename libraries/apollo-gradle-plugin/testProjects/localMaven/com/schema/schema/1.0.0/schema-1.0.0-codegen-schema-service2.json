{"schema":"{\"sdl\":\"schema {\\n  query: Query\\n}\\n\\n\\\"\\\"\\\"\\nMarks a field or variable definition as optional or required\\nBy default Apollo Kotlin generates all variables of nullable types as optional, in compliance with the GraphQL specification,\\nbut this can be configured with this directive, because if the variable was added in the first place, it's usually to pass a value\\nSince: 3.0.0\\n\\\"\\\"\\\"\\ndirective @optional (if: Boolean = true) on FIELD|VARIABLE_DEFINITION\\n\\n\\\"\\\"\\\"\\nMarks a field as non-null. The corresponding Kotlin property will be made non-nullable even if the GraphQL type is nullable.\\nWhen used on an object definition in a schema document, `fields` must be non-empty and contain a selection set of fields that should be non-null\\nWhen used on a field from an executable document, `fields` must always be empty\\n\\nSetting the directive at the schema level is usually easier as there is little reason that a field would be non-null in one place\\nand null in the other\\nSince: 3.0.0\\n\\\"\\\"\\\"\\ndirective @nonnull (fields: String! = \\\"\\\") on OBJECT|FIELD\\n\\n\\\"\\\"\\\"\\nAttach extra information to a given type\\nSince: 3.0.0\\n\\\"\\\"\\\"\\ndirective @typePolicy (\\\"a selection set containing fields used to compute the cache key of an object. Order is important.\\\" keyFields: String! = \\\"\\\", \\\"(experimental) a selection set containing fields that shouldn't create a new cache Record and should be\\\\nembedded in their parent instead. Order is unimportant.\\\" embeddedFields: String! = \\\"\\\", \\\"(experimental) a selection set containing fields that should be treated as [Relay Connection](https://relay.dev/graphql/connections.htm) fields.\\\\nOrder is unimportant.\\\\nThis works in conjunction with `ConnectionMetadataGenerator` and `ConnectionRecordMerger` which must be configured on the `ApolloStore`.\\\\nSince: 3.4.1\\\" connectionFields: String! = \\\"\\\") on OBJECT|INTERFACE\\n\\n\\\"\\\"\\\"\\nAttach extra information to a given field\\nSince: 3.3.0\\n\\\"\\\"\\\"\\ndirective @fieldPolicy (forField: String!, \\\"a list of arguments used to compute the cache key of the object this field is pointing to.\\\\nThe list is parsed as a selection set: both spaces and comas are valid separators.\\\" keyArgs: String! = \\\"\\\", \\\"(experimental) a list of arguments that vary when requesting different pages.\\\\nThese arguments are omitted when computing the cache key of this field.\\\\nThe list is parsed as a selection set: both spaces and comas are valid separators.\\\\nSince: 3.4.1\\\" paginationArgs: String! = \\\"\\\") repeatable on OBJECT\\n\\n\\\"\\\"\\\"\\nIndicates that the given field, argument, input field or enum value requires\\ngiving explicit consent before being used.\\nSince: 3.3.1\\n\\\"\\\"\\\"\\ndirective @requiresOptIn (feature: String!) repeatable on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE\\n\\n\\\"\\\"\\\"\\nUse the specified name in the generated code instead of the GraphQL name.\\nUse this for instance when the name would clash with a reserved keyword or field in the generated code.\\nThis directive is experimental.\\nSince: 3.3.1\\n\\\"\\\"\\\"\\ndirective @targetName (name: String!) on OBJECT|INTERFACE|ENUM|ENUM_VALUE|UNION|SCALAR|INPUT_OBJECT\\n\\ndirective @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT\\n\\ndirective @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT\\n\\ndirective @deprecated (reason: String! = \\\"No longer supported\\\") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE\\n\\ndirective @defer (label: String, if: Boolean! = true) on FRAGMENT_SPREAD|INLINE_FRAGMENT\\n\\ndirective @specifiedBy (url: String!) on SCALAR\\n\\ntype Query {\\n  field(fieldInput: FieldInput!): String!\\n\\n  field2(fieldInput2: FieldInput2!): String!\\n}\\n\\ninput FieldInput {\\n  field: String!\\n}\\n\\ninput FieldInput2 {\\n  field: String!\\n}\\n\\ntype __Schema {\\n  description: String\\n\\n  types: [__Type!]!\\n\\n  queryType: __Type!\\n\\n  mutationType: __Type\\n\\n  subscriptionType: __Type\\n\\n  directives: [__Directive!]!\\n}\\n\\ntype __Type {\\n  kind: __TypeKind!\\n\\n  name: String\\n\\n  description: String\\n\\n  fields(includeDeprecated: Boolean = false): [__Field!]\\n\\n  interfaces: [__Type!]\\n\\n  possibleTypes: [__Type!]\\n\\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\\n\\n  inputFields(includeDeprecated: Boolean = false): [__InputValue!]\\n\\n  ofType: __Type\\n\\n  specifiedByURL: String\\n}\\n\\nenum __TypeKind {\\n  SCALAR\\n\\n  OBJECT\\n\\n  INTERFACE\\n\\n  UNION\\n\\n  ENUM\\n\\n  INPUT_OBJECT\\n\\n  LIST\\n\\n  NON_NULL\\n}\\n\\ntype __Field {\\n  name: String!\\n\\n  description: String\\n\\n  args(includeDeprecated: Boolean = false): [__InputValue!]!\\n\\n  type: __Type!\\n\\n  isDeprecated: Boolean!\\n\\n  deprecationReason: String\\n}\\n\\ntype __InputValue {\\n  name: String!\\n\\n  description: String\\n\\n  type: __Type!\\n\\n  defaultValue: String\\n\\n  isDeprecated: Boolean!\\n\\n  deprecationReason: String\\n}\\n\\ntype __EnumValue {\\n  name: String!\\n\\n  description: String\\n\\n  isDeprecated: Boolean!\\n\\n  deprecationReason: String\\n}\\n\\ntype __Directive {\\n  name: String!\\n\\n  description: String\\n\\n  locations: [__DirectiveLocation!]!\\n\\n  args(includeDeprecated: Boolean = false): [__InputValue!]!\\n\\n  isRepeatable: Boolean!\\n}\\n\\nenum __DirectiveLocation {\\n  QUERY\\n\\n  MUTATION\\n\\n  SUBSCRIPTION\\n\\n  FIELD\\n\\n  FRAGMENT_DEFINITION\\n\\n  FRAGMENT_SPREAD\\n\\n  INLINE_FRAGMENT\\n\\n  VARIABLE_DEFINITION\\n\\n  SCHEMA\\n\\n  SCALAR\\n\\n  OBJECT\\n\\n  FIELD_DEFINITION\\n\\n  ARGUMENT_DEFINITION\\n\\n  INTERFACE\\n\\n  UNION\\n\\n  ENUM\\n\\n  ENUM_VALUE\\n\\n  INPUT_OBJECT\\n\\n  INPUT_FIELD_DEFINITION\\n}\\n\",\"keyFields\":{\"Query\":[],\"__Schema\":[],\"__Type\":[],\"__Field\":[],\"__InputValue\":[],\"__EnumValue\":[],\"__Directive\":[]},\"foreignNames\":{},\"directivesToStrip\":[\"optional\",\"nonnull\",\"typePolicy\",\"fieldPolicy\",\"requiresOptIn\",\"targetName\"],\"connectionTypes\":[]}","normalizedPath":"schema.graphqls","scalarMapping":{},"generateDataBuilders":false}