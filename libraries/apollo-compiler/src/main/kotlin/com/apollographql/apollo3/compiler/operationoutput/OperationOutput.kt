package com.apollographql.apollo3.compiler.operationoutput

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.okio.decodeFromBufferedSource
import kotlinx.serialization.json.okio.encodeToBufferedSink
import okio.buffer
import okio.sink
import okio.source
import java.io.File

/**
 * [OperationOutput] is a map where the operationId is the key and [OperationDescriptor] the value
 *
 * By default the operationId is a sha256 but it can be changed for custom whitelisting implementations
 */
typealias OperationOutput = Map<String, OperationDescriptor>

/**
 * This structure is also generated by other tools (iOS, cli, ...), try to keep the field names if possible.
 */
@Serializable
class OperationDescriptor(
    val name: String,
    val source: String
)

fun OperationOutput.findOperationId(name: String): String {
  val id = entries.find { it.value.name == name }?.key
  check(id != null) {
    "cannot find operation ID for '$name', check your operationOutput.json"
  }
  return id
}

@OptIn(ExperimentalSerializationApi::class)
fun OperationOutput.writeTo(file: File) {
  file.sink().buffer().use {
    Json.encodeToBufferedSink<Map<String, OperationDescriptor>>(this, it)
  }

}

@OptIn(ExperimentalSerializationApi::class)
fun File.toOperationOutput(): OperationOutput {
  return source().buffer().use {
    Json.decodeFromBufferedSource<Map<String, OperationDescriptor>>(it)
  }
}
