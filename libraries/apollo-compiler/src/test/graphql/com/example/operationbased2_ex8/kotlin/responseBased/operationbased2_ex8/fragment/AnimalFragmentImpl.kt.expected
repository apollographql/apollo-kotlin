//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Fragment
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.operationbased2_ex8.fragment.selections.AnimalFragmentSelections
import com.example.operationbased2_ex8.type.Animal
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress

public class AnimalFragmentImpl() : Fragment<AnimalFragmentImpl.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This fragment doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = AnimalFragmentImpl_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = Animal.type
  )
  .selections(selections = AnimalFragmentSelections.__root)
  .build()

  public data class Data(
    override val species: String,
    override val parent: Parent,
  ) : AnimalFragment,
      Fragment.Data {
    public sealed interface Parent : AnimalFragment.Parent {
      override val __typename: String

      override val species: String

      public companion object {
        @Suppress("USELESS_CAST")
        public fun Parent.asLion(): LionParent? = this as? LionParent

        @Suppress("USELESS_CAST")
        public fun Parent.asCat(): CatParent? = this as? CatParent
      }
    }

    public data class LionParent(
      override val __typename: String,
      override val species: String,
      override val temperature: Int,
    ) : Parent,
        AnimalFragment.LionParent

    public data class CatParent(
      override val __typename: String,
      override val species: String,
      override val name: String,
    ) : Parent,
        AnimalFragment.CatParent

    public data class OtherParent(
      override val __typename: String,
      override val species: String,
    ) : Parent,
        AnimalFragment.Parent
  }
}
