//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object AnimalFragment : Adapter<com.example.operationbased2_ex8.fragment.AnimalFragment> {
    public val RESPONSE_NAMES: List<String> = listOf("species", "parent")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        com.example.operationbased2_ex8.fragment.AnimalFragment {
      var _species: String? = null
      var _parent: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _species = StringAdapter.fromJson(reader, scalarAdapters)
          1 -> _parent = Parent.obj(true).fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return com.example.operationbased2_ex8.fragment.AnimalFragment(
        species = _species!!,
        parent = _parent!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: com.example.operationbased2_ex8.fragment.AnimalFragment,
    ): Unit {
      writer.name("species")
      StringAdapter.toJson(writer, scalarAdapters, value.species)

      writer.name("parent")
      Parent.obj(true).toJson(writer, scalarAdapters, value.parent)
    }

    private object Parent : Adapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent>
        {
      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          com.example.operationbased2_ex8.fragment.AnimalFragment.Parent {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Lion",
          -> LionParent.fromJson(reader, scalarAdapters, __typename)
          "Cat",
          -> CatParent.fromJson(reader, scalarAdapters, __typename)
          else
          -> OtherParent.fromJson(reader, scalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent,
      ): Unit {
        when(value) {
          is com.example.operationbased2_ex8.fragment.AnimalFragment.LionParent ->
              LionParent.toJson(writer, scalarAdapters, value)
          is com.example.operationbased2_ex8.fragment.AnimalFragment.CatParent ->
              CatParent.toJson(writer, scalarAdapters, value)
          is com.example.operationbased2_ex8.fragment.AnimalFragment.OtherParent ->
              OtherParent.toJson(writer, scalarAdapters, value)
        }
      }

      public object OnLion :
          Adapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion> {
        public val RESPONSE_NAMES: List<String> = listOf("temperature")

        public override fun fromJson(reader: JsonReader,
            scalarAdapters: ScalarAdapters):
            com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion {
          var _temperature: Int? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _temperature = IntAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion(
            temperature = _temperature!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion,
        ): Unit {
          writer.name("temperature")
          IntAdapter.toJson(writer, scalarAdapters, value.temperature)
        }
      }

      public object OnCat :
          Adapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            scalarAdapters: ScalarAdapters):
            com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, scalarAdapters, value.name)
        }
      }
    }

    public object LionParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): com.example.operationbased2_ex8.fragment.AnimalFragment.LionParent {
        var __typename: String? = typename
        var _species: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onLion = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.fromJson(reader,
            scalarAdapters)

        var _onCat: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat? = null
        if (possibleTypes("Cat").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onCat = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.fromJson(reader,
              scalarAdapters)
        }

        return com.example.operationbased2_ex8.fragment.AnimalFragment.LionParent(
          __typename = __typename,
          species = _species!!,
          onLion = _onLion,
          onCat = _onCat
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.LionParent,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, scalarAdapters, value.species)

        com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.toJson(writer,
            scalarAdapters, value.onLion)

        if (value.onCat != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.toJson(writer,
              scalarAdapters, value.onCat)
        }
      }
    }

    public object CatParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): com.example.operationbased2_ex8.fragment.AnimalFragment.CatParent {
        var __typename: String? = typename
        var _species: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onLion: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion? = null
        if (possibleTypes("Lion").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onLion = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.fromJson(reader,
              scalarAdapters)
        }

        reader.rewind()
        val _onCat = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.fromJson(reader,
            scalarAdapters)

        return com.example.operationbased2_ex8.fragment.AnimalFragment.CatParent(
          __typename = __typename,
          species = _species!!,
          onLion = _onLion,
          onCat = _onCat
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.CatParent,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, scalarAdapters, value.species)

        if (value.onLion != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.toJson(writer,
              scalarAdapters, value.onLion)
        }

        com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.toJson(writer,
            scalarAdapters, value.onCat)
      }
    }

    public object OtherParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): com.example.operationbased2_ex8.fragment.AnimalFragment.OtherParent {
        var __typename: String? = typename
        var _species: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onLion: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion? = null
        if (possibleTypes("Lion").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onLion = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.fromJson(reader,
              scalarAdapters)
        }

        var _onCat: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat? = null
        if (possibleTypes("Cat").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onCat = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.fromJson(reader,
              scalarAdapters)
        }

        return com.example.operationbased2_ex8.fragment.AnimalFragment.OtherParent(
          __typename = __typename,
          species = _species!!,
          onLion = _onLion,
          onCat = _onCat
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.OtherParent,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, scalarAdapters, value.species)

        if (value.onLion != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.toJson(writer,
              scalarAdapters, value.onLion)
        }

        if (value.onCat != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.toJson(writer,
              scalarAdapters, value.onCat)
        }
      }
    }
  }
}
