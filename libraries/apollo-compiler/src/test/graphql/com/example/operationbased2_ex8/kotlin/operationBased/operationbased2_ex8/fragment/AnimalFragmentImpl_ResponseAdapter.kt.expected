//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object AnimalFragment :
      CompositeAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment> {
    public val RESPONSE_NAMES: List<String> = listOf("species", "parent")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        com.example.operationbased2_ex8.fragment.AnimalFragment {
      var _species: String? = null
      var _parent: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
          1 -> _parent = Parent.obj(true).fromJson(reader, adapterContext)
          else -> break
        }
      }

      return com.example.operationbased2_ex8.fragment.AnimalFragment(
        species = _species ?: missingField(reader, "species"),
        parent = _parent ?: missingField(reader, "parent")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: com.example.operationbased2_ex8.fragment.AnimalFragment,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("species")
      StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)

      writer.name("parent")
      Parent.obj(true).toJson(writer, value.parent, adapterContext)
    }

    private object Parent :
        CompositeAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          com.example.operationbased2_ex8.fragment.AnimalFragment.Parent {
        var __typename: String? = null
        var _species: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onLion: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion? = null
        if (possibleTypes("Lion").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onLion = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.fromJson(reader,
              adapterContext)
        }

        var _onCat: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat? = null
        if (possibleTypes("Cat").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onCat = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.fromJson(reader,
              adapterContext)
        }

        return com.example.operationbased2_ex8.fragment.AnimalFragment.Parent(
          __typename = __typename,
          species = _species ?: missingField(reader, "species"),
          onLion = _onLion,
          onCat = _onCat
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)

        if (value.onLion != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnLion.toJson(writer,
              value.onLion, adapterContext)
        }

        if (value.onCat != null) {
          com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.Parent.OnCat.toJson(writer,
              value.onCat, adapterContext)
        }
      }

      private object OnLion :
          CompositeAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion> {
        public val RESPONSE_NAMES: List<String> = listOf("temperature")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion {
          var _temperature: Int? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _temperature = IntAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion(
            temperature = _temperature ?: missingField(reader, "temperature")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnLion,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("temperature")
          IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.temperature)
        }
      }

      private object OnCat :
          CompositeAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat(
            name = _name ?: missingField(reader, "name")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: com.example.operationbased2_ex8.fragment.AnimalFragment.Parent.OnCat,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
        }
      }
    }
  }
}
