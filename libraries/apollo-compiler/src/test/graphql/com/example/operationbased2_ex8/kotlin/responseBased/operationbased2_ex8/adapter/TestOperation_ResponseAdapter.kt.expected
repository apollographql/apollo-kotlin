//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.operationbased2_ex8.TestOperation
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _animal: TestOperation.Data.Animal? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        animal = _animal
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("animal")
      Animal.obj().nullable().toJson(writer, customScalarAdapters, value.animal)
    }

    private object Animal : Adapter<TestOperation.Data.Animal> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "parent")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.Animal {
        var __typename: String? = null
        var _species: String? = null
        var _parent: TestOperation.Data.Animal.Parent? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _parent = Parent.obj().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.Animal(
          __typename = __typename!!,
          species = _species!!,
          parent = _parent!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Animal,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)

        writer.name("parent")
        Parent.obj().toJson(writer, customScalarAdapters, value.parent)
      }

      private object Parent : Adapter<TestOperation.Data.Animal.Parent> {
        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Animal.Parent {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Lion",
            -> LionParent.fromJson(reader, customScalarAdapters, __typename)
            "Cat",
            -> CatParent.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherParent.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Animal.Parent,
        ): Unit {
          when(value) {
            is TestOperation.Data.Animal.LionParent -> LionParent.toJson(writer,
                customScalarAdapters, value)
            is TestOperation.Data.Animal.CatParent -> CatParent.toJson(writer, customScalarAdapters,
                value)
            is TestOperation.Data.Animal.OtherParent -> OtherParent.toJson(writer,
                customScalarAdapters, value)
          }
        }
      }

      public object LionParent {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

        public fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.Animal.LionParent {
          var __typename: String? = typename
          var _species: String? = null
          var _temperature: Int? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Animal.LionParent(
            __typename = __typename!!,
            species = _species!!,
            temperature = _temperature!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Animal.LionParent,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("species")
          StringAdapter.toJson(writer, customScalarAdapters, value.species)

          writer.name("temperature")
          IntAdapter.toJson(writer, customScalarAdapters, value.temperature)
        }
      }

      public object CatParent {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

        public fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.Animal.CatParent {
          var __typename: String? = typename
          var _species: String? = null
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Animal.CatParent(
            __typename = __typename!!,
            species = _species!!,
            name = _name!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Animal.CatParent,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("species")
          StringAdapter.toJson(writer, customScalarAdapters, value.species)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      public object OtherParent {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

        public fun fromJson(
          reader: JsonReader,
          customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.Animal.OtherParent {
          var __typename: String? = typename
          var _species: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Animal.OtherParent(
            __typename = __typename!!,
            species = _species!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Animal.OtherParent,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("species")
          StringAdapter.toJson(writer, customScalarAdapters, value.species)
        }
      }
    }
  }
}
