//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class AnimalFragmentImpl_ResponseAdapter {
  public enum AnimalFragment implements DataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("species", "parent");

    @Override
    public com.example.operationbased2_ex8.fragment.AnimalFragment deserializeData(
        JsonReader reader, DataAdapter.DeserializeDataContext context) throws IOException {
      String _species = null;
      com.example.operationbased2_ex8.fragment.AnimalFragment.Parent _parent = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _species = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _parent = new ObjectDataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent>(Parent.INSTANCE, true).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_species, "species");
      Assertions.checkFieldNotMissing(_parent, "parent");

      return new com.example.operationbased2_ex8.fragment.AnimalFragment(
        _species,
        _parent
      );
    }

    @Override
    public void serializeData(JsonWriter writer,
        com.example.operationbased2_ex8.fragment.AnimalFragment value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("species");
      DataAdapters.StringDataAdapter.serializeData(writer, value.species, context);

      writer.name("parent");
      new ObjectDataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent>(Parent.INSTANCE, true).serializeData(writer, value.parent, context);
    }
  }

  public enum Parent implements DataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.Parent> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "species");

    @Override
    public com.example.operationbased2_ex8.fragment.AnimalFragment.Parent deserializeData(
        JsonReader reader, DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _species = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _species = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      com.example.operationbased2_ex8.fragment.AnimalFragment.OnLion _onLion = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Lion")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onLion = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.OnLion.INSTANCE.deserializeData(reader, context);
      }

      com.example.operationbased2_ex8.fragment.AnimalFragment.OnCat _onCat = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Cat")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onCat = com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.OnCat.INSTANCE.deserializeData(reader, context);
      }

      Assertions.checkFieldNotMissing(_species, "species");

      return new com.example.operationbased2_ex8.fragment.AnimalFragment.Parent(
        __typename,
        _species,
        _onLion,
        _onCat
      );
    }

    @Override
    public void serializeData(JsonWriter writer,
        com.example.operationbased2_ex8.fragment.AnimalFragment.Parent value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("species");
      DataAdapters.StringDataAdapter.serializeData(writer, value.species, context);

      if (value.onLion != null) {
        com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.OnLion.INSTANCE.serializeData(writer, value.onLion, context);
      }

      if (value.onCat != null) {
        com.example.operationbased2_ex8.fragment.AnimalFragmentImpl_ResponseAdapter.OnCat.INSTANCE.serializeData(writer, value.onCat, context);
      }
    }
  }

  public enum OnLion implements DataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.OnLion> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("temperature");

    @Override
    public com.example.operationbased2_ex8.fragment.AnimalFragment.OnLion deserializeData(
        JsonReader reader, DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _temperature = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _temperature = DataAdapters.IntDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_temperature, "temperature");

      return new com.example.operationbased2_ex8.fragment.AnimalFragment.OnLion(
        _temperature
      );
    }

    @Override
    public void serializeData(JsonWriter writer,
        com.example.operationbased2_ex8.fragment.AnimalFragment.OnLion value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("temperature");
      DataAdapters.IntDataAdapter.serializeData(writer, value.temperature, context);
    }
  }

  public enum OnCat implements DataAdapter<com.example.operationbased2_ex8.fragment.AnimalFragment.OnCat> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public com.example.operationbased2_ex8.fragment.AnimalFragment.OnCat deserializeData(
        JsonReader reader, DataAdapter.DeserializeDataContext context) throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new com.example.operationbased2_ex8.fragment.AnimalFragment.OnCat(
        _name
      );
    }

    @Override
    public void serializeData(JsonWriter writer,
        com.example.operationbased2_ex8.fragment.AnimalFragment.OnCat value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("name");
      DataAdapters.StringDataAdapter.serializeData(writer, value.name, context);
    }
  }
}
