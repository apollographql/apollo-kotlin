//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object Data : CompositeAdapter<AnimalFragmentImpl.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("species", "parent")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        AnimalFragmentImpl.Data {
      var _species: String? = null
      var _parent: AnimalFragmentImpl.Data.Parent? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
          1 -> _parent = Parent.obj().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return AnimalFragmentImpl.Data(
        species = _species ?: missingField(reader, "species"),
        parent = _parent ?: missingField(reader, "parent")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("species")
      StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)

      writer.name("parent")
      Parent.obj().toJson(writer, value.parent, adapterContext)
    }

    private object Parent : CompositeAdapter<AnimalFragmentImpl.Data.Parent> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          AnimalFragmentImpl.Data.Parent {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Lion",
          -> LionParent.fromJson(reader, adapterContext, __typename)
          "Cat",
          -> CatParent.fromJson(reader, adapterContext, __typename)
          else
          -> OtherParent.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.Parent,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is AnimalFragmentImpl.Data.LionParent -> LionParent.toJson(writer, value, adapterContext)
          is AnimalFragmentImpl.Data.CatParent -> CatParent.toJson(writer, value, adapterContext)
          is AnimalFragmentImpl.Data.OtherParent -> OtherParent.toJson(writer, value,
              adapterContext)
        }
      }
    }

    public object LionParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalFragmentImpl.Data.LionParent {
        var __typename: String? = typename
        var _species: String? = null
        var _temperature: Int? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _temperature = IntAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.LionParent(
          __typename = __typename ?: missingField(reader, "__typename"),
          species = _species ?: missingField(reader, "species"),
          temperature = _temperature ?: missingField(reader, "temperature")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.LionParent,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)

        writer.name("temperature")
        IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.temperature)
      }
    }

    public object CatParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalFragmentImpl.Data.CatParent {
        var __typename: String? = typename
        var _species: String? = null
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.CatParent(
          __typename = __typename ?: missingField(reader, "__typename"),
          species = _species ?: missingField(reader, "species"),
          name = _name ?: missingField(reader, "name")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.CatParent,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
      }
    }

    public object OtherParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalFragmentImpl.Data.OtherParent {
        var __typename: String? = typename
        var _species: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _species = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.OtherParent(
          __typename = __typename ?: missingField(reader, "__typename"),
          species = _species ?: missingField(reader, "species")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.OtherParent,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.species)
      }
    }
  }
}
