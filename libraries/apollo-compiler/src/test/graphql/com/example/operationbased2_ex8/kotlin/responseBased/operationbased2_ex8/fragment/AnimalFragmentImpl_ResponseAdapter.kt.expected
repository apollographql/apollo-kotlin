//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.IntDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object Data : DataAdapter<AnimalFragmentImpl.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("species", "parent")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): AnimalFragmentImpl.Data {
      var _species: String? = null
      var _parent: AnimalFragmentImpl.Data.Parent? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _species = StringDataAdapter.deserializeData(reader, context)
          1 -> _parent = Parent.obj().deserializeData(reader, context)
          else -> break
        }
      }

      return AnimalFragmentImpl.Data(
        species = _species!!,
        parent = _parent!!
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("species")
      StringDataAdapter.serializeData(writer, value.species, context)

      writer.name("parent")
      Parent.obj().serializeData(writer, value.parent, context)
    }

    private object Parent : DataAdapter<AnimalFragmentImpl.Data.Parent> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): AnimalFragmentImpl.Data.Parent {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Lion",
          -> LionParent.deserializeData(reader, context, __typename)
          "Cat",
          -> CatParent.deserializeData(reader, context, __typename)
          else
          -> OtherParent.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.Parent,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is AnimalFragmentImpl.Data.LionParent -> LionParent.serializeData(writer, value, context)
          is AnimalFragmentImpl.Data.CatParent -> CatParent.serializeData(writer, value, context)
          is AnimalFragmentImpl.Data.OtherParent -> OtherParent.serializeData(writer, value,
              context)
        }
      }
    }

    public object LionParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): AnimalFragmentImpl.Data.LionParent {
        var __typename: String? = typename
        var _species: String? = null
        var _temperature: Int? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _species = StringDataAdapter.deserializeData(reader, context)
            2 -> _temperature = IntDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.LionParent(
          __typename = __typename!!,
          species = _species!!,
          temperature = _temperature!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.LionParent,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("species")
        StringDataAdapter.serializeData(writer, value.species, context)

        writer.name("temperature")
        IntDataAdapter.serializeData(writer, value.temperature, context)
      }
    }

    public object CatParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): AnimalFragmentImpl.Data.CatParent {
        var __typename: String? = typename
        var _species: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _species = StringDataAdapter.deserializeData(reader, context)
            2 -> _name = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.CatParent(
          __typename = __typename!!,
          species = _species!!,
          name = _name!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.CatParent,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("species")
        StringDataAdapter.serializeData(writer, value.species, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)
      }
    }

    public object OtherParent {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): AnimalFragmentImpl.Data.OtherParent {
        var __typename: String? = typename
        var _species: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _species = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return AnimalFragmentImpl.Data.OtherParent(
          __typename = __typename!!,
          species = _species!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: AnimalFragmentImpl.Data.OtherParent,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("species")
        StringDataAdapter.serializeData(writer, value.species, context)
      }
    }
  }
}
