//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.hero_name.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.hero_name.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _hero: TestQuery.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }
  }

  public object Hero : Adapter<TestQuery.Hero> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "birthDate")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Hero {
      var __typename: String? = null
      var _name: String? = null
      var _birthDate: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _birthDate = AnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asDroid: TestQuery.AsDroid? = null
      if (possibleTypes("Droid").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asDroid = com.example.hero_name.adapter.TestQuery_ResponseAdapter.AsDroid.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Hero(
        __typename = __typename,
        name = _name!!,
        birthDate = _birthDate!!,
        asDroid = _asDroid
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Hero,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("birthDate")
      AnyAdapter.toJson(writer, customScalarAdapters, value.birthDate)

      if (value.asDroid != null) {
        com.example.hero_name.adapter.TestQuery_ResponseAdapter.AsDroid.toJson(writer,
            customScalarAdapters, value.asDroid)
      }
    }
  }

  public object AsDroid : Adapter<TestQuery.AsDroid> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "birthDate",
        "primaryFunction")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsDroid {
      var __typename: String? = null
      var _name: String? = null
      var _birthDate: Any? = null
      var _primaryFunction: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _birthDate = AnyAdapter.fromJson(reader, customScalarAdapters)
          3 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsDroid(
        __typename = __typename!!,
        name = _name!!,
        birthDate = _birthDate!!,
        primaryFunction = _primaryFunction
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsDroid,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("birthDate")
      AnyAdapter.toJson(writer, customScalarAdapters, value.birthDate)

      writer.name("primaryFunction")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
    }
  }
}
