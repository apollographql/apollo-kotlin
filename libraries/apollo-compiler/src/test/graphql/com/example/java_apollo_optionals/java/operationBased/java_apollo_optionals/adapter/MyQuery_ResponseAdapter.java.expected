//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_apollo_optionals.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloOptionalAdapter;
import com.apollographql.apollo3.api.ApolloOptionalCompositeAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_apollo_optionals.MyQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class MyQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<MyQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt", "nullableMyType", "nonNullableMyType", "nullableListOfNullableString", "nullableListOfNonNullableString");

    @Override
    public MyQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;
      Optional<MyQuery.NullableMyType> _nullableMyType = null;
      MyQuery.NonNullableMyType _nonNullableMyType = null;
      Optional<List<Optional<String>>> _nullableListOfNullableString = null;
      Optional<List<String>> _nullableListOfNonNullableString = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.ApolloOptionalIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 2: _nullableMyType = new ApolloOptionalCompositeAdapter<>(new ObjectCompositeAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).fromJson(reader, adapterContext); break;
          case 3: _nonNullableMyType = new ObjectCompositeAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).fromJson(reader, adapterContext); break;
          case 4: _nullableListOfNullableString = new ApolloOptionalAdapter<>(new ListAdapter<>(Adapters.ApolloOptionalStringAdapter)).fromJson(reader, CustomScalarAdapters.Empty); break;
          case 5: _nullableListOfNonNullableString = new ApolloOptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");
      Assertions.checkFieldNotMissing(_nonNullableMyType, "nonNullableMyType");

      return new MyQuery.Data(
        _nullableInt,
        _nonNullableInt,
        _nullableMyType,
        _nonNullableMyType,
        _nullableListOfNullableString,
        _nullableListOfNonNullableString
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("nullableInt");
      Adapters.ApolloOptionalIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);

      writer.name("nullableMyType");
      new ApolloOptionalCompositeAdapter<>(new ObjectCompositeAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).toJson(writer, value.nullableMyType, adapterContext);

      writer.name("nonNullableMyType");
      new ObjectCompositeAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).toJson(writer, value.nonNullableMyType, adapterContext);

      writer.name("nullableListOfNullableString");
      new ApolloOptionalAdapter<>(new ListAdapter<>(Adapters.ApolloOptionalStringAdapter)).toJson(writer, CustomScalarAdapters.Empty, value.nullableListOfNullableString);

      writer.name("nullableListOfNonNullableString");
      new ApolloOptionalAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, CustomScalarAdapters.Empty, value.nullableListOfNonNullableString);
    }
  }

  public enum NullableMyType implements CompositeAdapter<MyQuery.NullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NullableMyType fromJson(JsonReader reader,
        CompositeAdapterContext adapterContext) throws IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.ApolloOptionalIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.NullableMyType value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("nullableInt");
      Adapters.ApolloOptionalIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);
    }
  }

  public enum NonNullableMyType implements CompositeAdapter<MyQuery.NonNullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NonNullableMyType fromJson(JsonReader reader,
        CompositeAdapterContext adapterContext) throws IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.ApolloOptionalIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NonNullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.NonNullableMyType value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("nullableInt");
      Adapters.ApolloOptionalIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);
    }
  }
}
