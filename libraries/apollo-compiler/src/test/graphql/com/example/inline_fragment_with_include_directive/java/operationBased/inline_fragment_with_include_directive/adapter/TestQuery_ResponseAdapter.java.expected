//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_with_include_directive.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BVariable;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.inline_fragment_with_include_directive.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("hero");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).toJson(writer, value.hero, adapterContext);
    }
  }

  public enum Hero implements CompositeAdapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "id");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      String __typename = null;
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _id = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnHuman _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")),new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BVariable("withDetails")),new BooleanExpression.Not<BTerm>(new BooleanExpression.Element<BTerm>(new BVariable("skipHumanDetails"))))), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onHuman = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.fromJson(reader, adapterContext);
      }

      TestQuery.OnDroid _onDroid = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Element<BTerm>(new BVariable("withDetails"))), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onDroid = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnDroid.INSTANCE.fromJson(reader, adapterContext);
      }

      TestQuery.OnCharacter _onCharacter = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BVariable("withDetails")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onCharacter = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.fromJson(reader, adapterContext);
      }

      Assertions.checkFieldNotMissing(_id, "id");

      return new TestQuery.Hero(
        __typename,
        _id,
        _onHuman,
        _onDroid,
        _onCharacter
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Hero value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id);

      if (value.onHuman != null) {
        com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.toJson(writer, value.onHuman, adapterContext);
      }

      if (value.onDroid != null) {
        com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnDroid.INSTANCE.toJson(writer, value.onDroid, adapterContext);
      }

      if (value.onCharacter != null) {
        com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.toJson(writer, value.onCharacter, adapterContext);
      }
    }
  }

  public enum OnHuman implements CompositeAdapter<TestQuery.OnHuman> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "homePlanet");

    @Override
    public TestQuery.OnHuman fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      String _name = null;
      String _homePlanet = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _homePlanet = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.OnHuman(
        _name,
        _homePlanet
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.OnHuman value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);

      writer.name("homePlanet");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.homePlanet);
    }
  }

  public enum OnDroid implements CompositeAdapter<TestQuery.OnDroid> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "primaryFunction");

    @Override
    public TestQuery.OnDroid fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      String _name = null;
      String _primaryFunction = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _primaryFunction = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.OnDroid(
        _name,
        _primaryFunction
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.OnDroid value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);

      writer.name("primaryFunction");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.primaryFunction);
    }
  }

  public enum OnCharacter implements CompositeAdapter<TestQuery.OnCharacter> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.OnCharacter fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.OnCharacter(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.OnCharacter value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);
    }
  }
}
