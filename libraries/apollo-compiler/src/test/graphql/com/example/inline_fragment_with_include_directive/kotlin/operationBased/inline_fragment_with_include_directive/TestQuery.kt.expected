//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_with_include_directive

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter
import com.example.inline_fragment_with_include_directive.adapter.TestQuery_VariablesAdapter
import com.example.inline_fragment_with_include_directive.selections.TestQuerySelections
import kotlin.Boolean
import kotlin.String
import com.example.inline_fragment_with_include_directive.type.Query as CompiledQuery

public data class TestQuery(
  public val withDetails: Boolean,
  public val skipHumanDetails: Boolean,
) : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    TestQuery_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
  ) : Query.Data {
    public data class Hero(
      public val __typename: String,
      /**
       * The ID of the character
       */
      public val id: String,
      /**
       * Synthetic field for inline fragment on Human
       */
      public val onHuman: OnHuman?,
      /**
       * Synthetic field for inline fragment on Droid
       */
      public val onDroid: OnDroid?,
      /**
       * Synthetic field for inline fragment on Character
       */
      public val onCharacter: OnCharacter?,
    ) {
      public data class OnHuman(
        /**
         * What this human calls themselves
         */
        public val name: String,
        /**
         * The home planet of the human, or null if unknown
         */
        public val homePlanet: String?,
      )

      public data class OnDroid(
        /**
         * What others call this droid
         */
        public val name: String,
        /**
         * This droid's primary function
         */
        public val primaryFunction: String?,
      )

      public data class OnCharacter(
        /**
         * The name of the character
         */
        public val name: String,
      )
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "1fc50a1808d1ff72f74d821b563ee69df2fc04dd650e41d27d75d90d0413bd65"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery($withDetails: Boolean!, $skipHumanDetails: Boolean!) {
     *   hero {
     *     __typename
     *     id
     *     ... on Human @include(if: $withDetails) @skip(if: $skipHumanDetails) {
     *       name
     *       homePlanet
     *     }
     *     ... on Droid @include(if: $withDetails) {
     *       name
     *       primaryFunction
     *     }
     *     ... on Character @include(if: $withDetails) {
     *       name
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery(${'$'}withDetails: Boolean!, ${'$'}skipHumanDetails: Boolean!) { hero { __typename id ... on Human @include(if: ${'$'}withDetails) @skip(if: ${'$'}skipHumanDetails) { name homePlanet } ... on Droid @include(if: ${'$'}withDetails) { name primaryFunction } ... on Character @include(if: ${'$'}withDetails) { name } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
