//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_with_include_directive.adapter

import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.and
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.not
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.apollographql.apollo3.api.variable
import com.example.inline_fragment_with_include_directive.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().serializeData(writer, value.hero, context)
    }

    private object Hero : DataAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero {
        var __typename: String? = null
        var _id: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestQuery.Data.Hero.OnHuman? = null
        if (and(possibleTypes("Human"),and(variable("withDetails"),not(variable("skipHumanDetails")))).evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onHuman = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.deserializeData(reader,
              context)
        }

        var _onDroid: TestQuery.Data.Hero.OnDroid? = null
        if (and(possibleTypes("Droid"),variable("withDetails")).evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onDroid = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.deserializeData(reader,
              context)
        }

        var _onCharacter: TestQuery.Data.Hero.OnCharacter? = null
        if (variable("withDetails").evaluate(context.falseBooleanVariables, null, context, null)) {
          reader.rewind()
          _onCharacter = com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.deserializeData(reader,
              context)
        }

        return TestQuery.Data.Hero(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman,
          onDroid = _onDroid,
          onCharacter = _onCharacter
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        if (value.onHuman != null) {
          com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.serializeData(writer,
              value.onHuman, context)
        }

        if (value.onDroid != null) {
          com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.serializeData(writer,
              value.onDroid, context)
        }

        if (value.onCharacter != null) {
          com.example.inline_fragment_with_include_directive.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.serializeData(writer,
              value.onCharacter, context)
        }
      }

      private object OnHuman : DataAdapter<TestQuery.Data.Hero.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "homePlanet")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnHuman {
          var _name: String? = null
          var _homePlanet: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _homePlanet = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnHuman(
            name = _name!!,
            homePlanet = _homePlanet
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnHuman,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

          writer.name("homePlanet")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.homePlanet)
        }
      }

      private object OnDroid : DataAdapter<TestQuery.Data.Hero.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "primaryFunction")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnDroid {
          var _name: String? = null
          var _primaryFunction: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _primaryFunction = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnDroid(
            name = _name!!,
            primaryFunction = _primaryFunction
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnDroid,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.primaryFunction)
        }
      }

      private object OnCharacter : DataAdapter<TestQuery.Data.Hero.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnCharacter {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnCharacter(
            name = _name!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnCharacter,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
        }
      }
    }
  }
}
