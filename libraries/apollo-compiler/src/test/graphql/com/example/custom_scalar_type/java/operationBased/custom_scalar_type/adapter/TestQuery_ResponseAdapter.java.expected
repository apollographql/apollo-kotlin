//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.custom_scalar_type.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.ScalarAdapterToApolloAdapter;
import com.apollographql.apollo3.api.ScalarAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.custom_scalar_type.TestQuery;
import com.example.custom_scalar_type.type.GraphQLID;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, TestQuery.Data value)
        throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).toJson(writer, scalarAdapters, value.hero);
    }
  }

  public enum Hero implements ApolloAdapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "birthDate", "appearanceDates", "fieldWithUnsupportedType", "profileLink", "links");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      Long _id = null;
      String _name = null;
      Date _birthDate = null;
      List<Date> _appearanceDates = null;
      Object _fieldWithUnsupportedType = null;
      String _profileLink = null;
      List<String> _links = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = (scalarAdapters.<Long>responseAdapterFor(GraphQLID.type)).fromJson(reader, scalarAdapters); break;
          case 1: _name = new ScalarAdapterToApolloAdapter<>(new com.example.MyStringAdapter()).fromJson(reader, scalarAdapters); break;
          case 2: _birthDate = (scalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type)).fromJson(reader, scalarAdapters); break;
          case 3: _appearanceDates = new ListAdapter<>((scalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type))).fromJson(reader, scalarAdapters); break;
          case 4: _fieldWithUnsupportedType = Adapters.AnyApolloAdapter.fromJson(reader, scalarAdapters); break;
          case 5: _profileLink = new ScalarAdapterToApolloAdapter<>(com.example.UrlAdapter.INSTANCE).fromJson(reader, scalarAdapters); break;
          case 6: _links = new ListAdapter<>(new ScalarAdapterToApolloAdapter<>(com.example.UrlAdapter.INSTANCE)).fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_birthDate, "birthDate");
      Assertions.checkFieldNotMissing(_appearanceDates, "appearanceDates");
      Assertions.checkFieldNotMissing(_fieldWithUnsupportedType, "fieldWithUnsupportedType");
      Assertions.checkFieldNotMissing(_profileLink, "profileLink");
      Assertions.checkFieldNotMissing(_links, "links");

      return new TestQuery.Hero(
        _id,
        _name,
        _birthDate,
        _appearanceDates,
        _fieldWithUnsupportedType,
        _profileLink,
        _links
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, TestQuery.Hero value)
        throws IOException {
      writer.name("id");
      (scalarAdapters.<Long>responseAdapterFor(GraphQLID.type)).toJson(writer, scalarAdapters, value.id);

      writer.name("name");
      new ScalarAdapterToApolloAdapter<>(new com.example.MyStringAdapter()).toJson(writer, scalarAdapters, value.name);

      writer.name("birthDate");
      (scalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type)).toJson(writer, scalarAdapters, value.birthDate);

      writer.name("appearanceDates");
      new ListAdapter<>((scalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type))).toJson(writer, scalarAdapters, value.appearanceDates);

      writer.name("fieldWithUnsupportedType");
      Adapters.AnyApolloAdapter.toJson(writer, scalarAdapters, value.fieldWithUnsupportedType);

      writer.name("profileLink");
      new ScalarAdapterToApolloAdapter<>(com.example.UrlAdapter.INSTANCE).toJson(writer, scalarAdapters, value.profileLink);

      writer.name("links");
      new ListAdapter<>(new ScalarAdapterToApolloAdapter<>(com.example.UrlAdapter.INSTANCE)).toJson(writer, scalarAdapters, value.links);
    }
  }
}
