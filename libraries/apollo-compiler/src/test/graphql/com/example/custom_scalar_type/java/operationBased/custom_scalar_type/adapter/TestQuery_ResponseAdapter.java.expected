//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.custom_scalar_type.adapter;

import com.apollographql.apollo3.api.AdapterToDataAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.ListDataAdapter;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.custom_scalar_type.TestQuery;
import com.example.custom_scalar_type.type.GraphQLID;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("hero");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).serializeData(writer, value.hero, context);
    }
  }

  public enum Hero implements DataAdapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "birthDate", "appearanceDates", "fieldWithUnsupportedType", "profileLink", "links");

    @Override
    public TestQuery.Hero deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Long _id = null;
      String _name = null;
      Date _birthDate = null;
      List<Date> _appearanceDates = null;
      Object _fieldWithUnsupportedType = null;
      String _profileLink = null;
      List<String> _links = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = (context.customScalarAdapters.<Long>responseAdapterFor(GraphQLID.type)).deserializeData(reader, context); break;
          case 1: _name = new AdapterToDataAdapter<>(new com.example.MyStringAdapter()).deserializeData(reader, context); break;
          case 2: _birthDate = (context.customScalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type)).deserializeData(reader, context); break;
          case 3: _appearanceDates = new ListDataAdapter<>((context.customScalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type))).deserializeData(reader, context); break;
          case 4: _fieldWithUnsupportedType = DataAdapters.AnyDataAdapter.deserializeData(reader, context); break;
          case 5: _profileLink = new AdapterToDataAdapter<>(com.example.UrlAdapter.INSTANCE).deserializeData(reader, context); break;
          case 6: _links = new ListDataAdapter<>(new AdapterToDataAdapter<>(com.example.UrlAdapter.INSTANCE)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_birthDate, "birthDate");
      Assertions.checkFieldNotMissing(_appearanceDates, "appearanceDates");
      Assertions.checkFieldNotMissing(_fieldWithUnsupportedType, "fieldWithUnsupportedType");
      Assertions.checkFieldNotMissing(_profileLink, "profileLink");
      Assertions.checkFieldNotMissing(_links, "links");

      return new TestQuery.Hero(
        _id,
        _name,
        _birthDate,
        _appearanceDates,
        _fieldWithUnsupportedType,
        _profileLink,
        _links
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Hero value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("id");
      (context.customScalarAdapters.<Long>responseAdapterFor(GraphQLID.type)).serializeData(writer, value.id, context);

      writer.name("name");
      new AdapterToDataAdapter<>(new com.example.MyStringAdapter()).serializeData(writer, value.name, context);

      writer.name("birthDate");
      (context.customScalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type)).serializeData(writer, value.birthDate, context);

      writer.name("appearanceDates");
      new ListDataAdapter<>((context.customScalarAdapters.<Date>responseAdapterFor(com.example.custom_scalar_type.type.Date.type))).serializeData(writer, value.appearanceDates, context);

      writer.name("fieldWithUnsupportedType");
      DataAdapters.AnyDataAdapter.serializeData(writer, value.fieldWithUnsupportedType, context);

      writer.name("profileLink");
      new AdapterToDataAdapter<>(com.example.UrlAdapter.INSTANCE).serializeData(writer, value.profileLink, context);

      writer.name("links");
      new ListDataAdapter<>(new AdapterToDataAdapter<>(com.example.UrlAdapter.INSTANCE)).serializeData(writer, value.links, context);
    }
  }
}
