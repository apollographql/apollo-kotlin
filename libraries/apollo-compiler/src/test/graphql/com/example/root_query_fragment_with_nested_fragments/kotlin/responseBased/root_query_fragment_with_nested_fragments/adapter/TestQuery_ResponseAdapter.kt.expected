//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_fragment_with_nested_fragments.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.root_query_fragment_with_nested_fragments.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid", "human")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var __typename: String? = null
      var _hero: TestQuery.Data.Hero? = null
      var _droid: TestQuery.Data.Droid? = null
      var _human: TestQuery.Data.Human? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
          1 -> _hero = Hero.obj().nullable().fromJson(reader, scalarAdapters)
          2 -> _droid = Droid.obj().nullable().fromJson(reader, scalarAdapters)
          3 -> _human = Human.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        __typename = __typename!!,
        hero = _hero,
        droid = _droid,
        human = _human
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("__typename")
      StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

      writer.name("hero")
      Hero.obj().nullable().toJson(writer, scalarAdapters, value.hero)

      writer.name("droid")
      Droid.obj().nullable().toJson(writer, scalarAdapters, value.droid)

      writer.name("human")
      Human.obj().nullable().toJson(writer, scalarAdapters, value.human)
    }

    private object Hero : ApolloAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Hero(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Hero,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
      }
    }

    private object Droid : ApolloAdapter<TestQuery.Data.Droid> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Droid {
        var __typename: String? = null
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Droid(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Droid,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("primaryFunction")
        NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.primaryFunction)
      }
    }

    private object Human : ApolloAdapter<TestQuery.Data.Human> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "homePlanet")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Human {
        var __typename: String? = null
        var _name: String? = null
        var _homePlanet: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _homePlanet = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Human(
          __typename = __typename!!,
          name = _name!!,
          homePlanet = _homePlanet
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Human,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("homePlanet")
        NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.homePlanet)
      }
    }
  }
}
