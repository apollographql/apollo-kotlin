//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex7.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.operationbased2_ex7.TestOperation
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _animal: TestOperation.Animal? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        animal = _animal
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("animal")
      Animal.obj(true).nullable().toJson(writer, customScalarAdapters, value.animal)
    }
  }

  public object Animal : Adapter<TestOperation.Animal> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Animal {
      var __typename: String? = null
      var _species: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asWarmBlooded: TestOperation.AsWarmBlooded? = null
      if (possibleTypes("Lion","Cat","Panther").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asWarmBlooded = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.AsWarmBlooded.fromJson(reader,
            customScalarAdapters)
      }

      var _asPet: TestOperation.AsPet? = null
      if (possibleTypes("Cat","Turtle").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asPet = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.AsPet.fromJson(reader,
            customScalarAdapters)
      }

      return TestOperation.Animal(
        __typename = __typename,
        species = _species!!,
        asWarmBlooded = _asWarmBlooded,
        asPet = _asPet
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Animal,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      if (value.asWarmBlooded != null) {
        com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.AsWarmBlooded.toJson(writer,
            customScalarAdapters, value.asWarmBlooded)
      }

      if (value.asPet != null) {
        com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.AsPet.toJson(writer,
            customScalarAdapters, value.asPet)
      }
    }
  }

  public object AsWarmBlooded : Adapter<TestOperation.AsWarmBlooded> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsWarmBlooded {
      var __typename: String? = null
      var _species: String? = null
      var _temperature: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsWarmBlooded(
        __typename = __typename!!,
        species = _species!!,
        temperature = _temperature!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsWarmBlooded,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      writer.name("temperature")
      IntAdapter.toJson(writer, customScalarAdapters, value.temperature)
    }
  }

  public object AsPet : Adapter<TestOperation.AsPet> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsPet {
      var __typename: String? = null
      var _species: String? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsPet(
        __typename = __typename!!,
        species = _species!!,
        name = _name!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsPet,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }
}
