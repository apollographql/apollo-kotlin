//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex7.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.operationbased2_ex7.TestOperation;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestOperation_ResponseAdapter {
  public enum Data implements DataAdapter<TestOperation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("animal");

    @Override
    public TestOperation.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestOperation.Animal _animal = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _animal = new NullableDataAdapter<>(new ObjectDataAdapter<TestOperation.Animal>(Animal.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestOperation.Data(
        _animal
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestOperation.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("animal");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestOperation.Animal>(Animal.INSTANCE, true)).serializeData(writer, value.animal, context);
    }
  }

  public enum Animal implements DataAdapter<TestOperation.Animal> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestOperation.Animal deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestOperation.OnAnimal _onAnimal = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnAnimal.INSTANCE.deserializeData(reader, context);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestOperation.Animal(
        __typename,
        _onAnimal
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestOperation.Animal value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnAnimal.INSTANCE.serializeData(writer, value.onAnimal, context);
    }
  }

  public enum OnAnimal implements DataAdapter<TestOperation.OnAnimal> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "species");

    @Override
    public TestOperation.OnAnimal deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _species = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _species = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestOperation.OnWarmBlooded _onWarmBlooded = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Lion","Cat","Panther")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onWarmBlooded = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnWarmBlooded.INSTANCE.deserializeData(reader, context);
      }

      TestOperation.OnPet _onPet = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Cat","Turtle")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onPet = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnPet.INSTANCE.deserializeData(reader, context);
      }

      Assertions.checkFieldNotMissing(_species, "species");

      return new TestOperation.OnAnimal(
        __typename,
        _species,
        _onWarmBlooded,
        _onPet
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestOperation.OnAnimal value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("species");
      DataAdapters.StringDataAdapter.serializeData(writer, value.species, context);

      if (value.onWarmBlooded != null) {
        com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnWarmBlooded.INSTANCE.serializeData(writer, value.onWarmBlooded, context);
      }

      if (value.onPet != null) {
        com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.OnPet.INSTANCE.serializeData(writer, value.onPet, context);
      }
    }
  }

  public enum OnWarmBlooded implements DataAdapter<TestOperation.OnWarmBlooded> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("temperature");

    @Override
    public TestOperation.OnWarmBlooded deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _temperature = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _temperature = DataAdapters.IntDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_temperature, "temperature");

      return new TestOperation.OnWarmBlooded(
        _temperature
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestOperation.OnWarmBlooded value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("temperature");
      DataAdapters.IntDataAdapter.serializeData(writer, value.temperature, context);
    }
  }

  public enum OnPet implements DataAdapter<TestOperation.OnPet> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestOperation.OnPet deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestOperation.OnPet(
        _name
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestOperation.OnPet value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("name");
      DataAdapters.StringDataAdapter.serializeData(writer, value.name, context);
    }
  }
}
