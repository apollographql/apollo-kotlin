//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex7.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.IntAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.operationbased2_ex7.TestOperation
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data {
      var _animal: TestOperation.Data.Animal? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        animal = _animal
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ) {
      writer.name("animal")
      Animal.obj(true).nullable().toJson(writer, customScalarAdapters, value.animal)
    }

    private object Animal : Adapter<TestOperation.Data.Animal> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Animal {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val _onAnimal = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.fromJson(reader, customScalarAdapters)

        return TestOperation.Data.Animal(
          __typename = __typename ?: missingField(reader, "__typename"),
          onAnimal = _onAnimal
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Animal,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.toJson(writer, customScalarAdapters, value.onAnimal)
      }

      private object OnAnimal : Adapter<TestOperation.Data.Animal.OnAnimal> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Animal.OnAnimal {
          var __typename: String? = null
          var _species: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onWarmBlooded: TestOperation.Data.Animal.OnAnimal.OnWarmBlooded? = null
          if (possibleTypes("Lion","Cat","Panther").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
            reader.rewind()
            _onWarmBlooded = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.OnWarmBlooded.fromJson(reader, customScalarAdapters)
          }

          var _onPet: TestOperation.Data.Animal.OnAnimal.OnPet? = null
          if (possibleTypes("Cat","Turtle").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
            reader.rewind()
            _onPet = com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.OnPet.fromJson(reader, customScalarAdapters)
          }

          return TestOperation.Data.Animal.OnAnimal(
            __typename = __typename,
            species = _species ?: missingField(reader, "species"),
            onWarmBlooded = _onWarmBlooded,
            onPet = _onPet
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Animal.OnAnimal,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("species")
          StringAdapter.toJson(writer, customScalarAdapters, value.species)

          if (value.onWarmBlooded != null) {
            com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.OnWarmBlooded.toJson(writer, customScalarAdapters, value.onWarmBlooded)
          }

          if (value.onPet != null) {
            com.example.operationbased2_ex7.adapter.TestOperation_ResponseAdapter.Data.Animal.OnAnimal.OnPet.toJson(writer, customScalarAdapters, value.onPet)
          }
        }

        private object OnWarmBlooded : Adapter<TestOperation.Data.Animal.OnAnimal.OnWarmBlooded> {
          public val RESPONSE_NAMES: List<String> = listOf("temperature")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Animal.OnAnimal.OnWarmBlooded {
            var _temperature: Int? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestOperation.Data.Animal.OnAnimal.OnWarmBlooded(
              temperature = _temperature ?: missingField(reader, "temperature")
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Animal.OnAnimal.OnWarmBlooded,
          ) {
            writer.name("temperature")
            IntAdapter.toJson(writer, customScalarAdapters, value.temperature)
          }
        }

        private object OnPet : Adapter<TestOperation.Data.Animal.OnAnimal.OnPet> {
          public val RESPONSE_NAMES: List<String> = listOf("name")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Animal.OnAnimal.OnPet {
            var _name: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestOperation.Data.Animal.OnAnimal.OnPet(
              name = _name ?: missingField(reader, "name")
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Animal.OnAnimal.OnPet,
          ) {
            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)
          }
        }
      }
    }
  }
}
