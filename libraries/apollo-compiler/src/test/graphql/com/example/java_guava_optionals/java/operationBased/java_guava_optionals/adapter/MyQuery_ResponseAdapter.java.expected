//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_guava_optionals.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.java.adapter.GuavaOptionalAdapter;
import com.apollographql.apollo3.api.java.adapter.GuavaOptionalAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_guava_optionals.MyQuery;
import com.google.common.base.Optional;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class MyQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<MyQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt", "nullableMyType", "nonNullableMyType", "nullableListOfNullableString", "nullableListOfNonNullableString");

    @Override
    public MyQuery.Data fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;
      Optional<MyQuery.NullableMyType> _nullableMyType = null;
      MyQuery.NonNullableMyType _nonNullableMyType = null;
      Optional<List<Optional<String>>> _nullableListOfNullableString = null;
      Optional<List<String>> _nullableListOfNonNullableString = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          case 2: _nullableMyType = new GuavaOptionalAdapter<>(new ObjectAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).fromJson(reader, context); break;
          case 3: _nonNullableMyType = new ObjectAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).fromJson(reader, context); break;
          case 4: _nullableListOfNullableString = new GuavaOptionalAdapter<>(new ListAdapter<>(GuavaOptionalAdapters.GuavaOptionalStringApolloAdapter)).fromJson(reader, context); break;
          case 5: _nullableListOfNonNullableString = new GuavaOptionalAdapter<>(new ListAdapter<>(Adapters.StringApolloAdapter)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");
      Assertions.checkFieldNotMissing(_nonNullableMyType, "nonNullableMyType");

      return new MyQuery.Data(
        _nullableInt,
        _nonNullableInt,
        _nullableMyType,
        _nonNullableMyType,
        _nullableListOfNullableString,
        _nullableListOfNonNullableString
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.Data value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);

      writer.name("nullableMyType");
      new GuavaOptionalAdapter<>(new ObjectAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).toJson(writer, value.nullableMyType, context);

      writer.name("nonNullableMyType");
      new ObjectAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).toJson(writer, value.nonNullableMyType, context);

      writer.name("nullableListOfNullableString");
      new GuavaOptionalAdapter<>(new ListAdapter<>(GuavaOptionalAdapters.GuavaOptionalStringApolloAdapter)).toJson(writer, value.nullableListOfNullableString, context);

      writer.name("nullableListOfNonNullableString");
      new GuavaOptionalAdapter<>(new ListAdapter<>(Adapters.StringApolloAdapter)).toJson(writer, value.nullableListOfNonNullableString, context);
    }
  }

  public enum NullableMyType implements ApolloAdapter<MyQuery.NullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NullableMyType fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.NullableMyType value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);
    }
  }

  public enum NonNullableMyType implements ApolloAdapter<MyQuery.NonNullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NonNullableMyType fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      Optional<Integer> _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NonNullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, MyQuery.NonNullableMyType value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      GuavaOptionalAdapters.GuavaOptionalIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);
    }
  }
}
