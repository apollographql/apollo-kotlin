//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.suppressed_warnings;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Optional;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.suppressed_warnings.adapter.CatQuery_ResponseAdapter;
import com.example.suppressed_warnings.adapter.CatQuery_VariablesAdapter;
import com.example.suppressed_warnings.selections.CatQuerySelections;
import com.example.suppressed_warnings.type.Direction;
import com.example.suppressed_warnings.type.Filter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public class CatQuery implements Query<CatQuery.Data> {
  public static final String OPERATION_ID = "a9164e713b135ac6a07ce03604974a833b919eb0ff9099665d8e7ff076c2e2c5";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query CatQuery($filter: Filter) {
   *   search(filter: $filter) {
   *     mustaches
   *   }
   *   direction
   * }
   */
  public static final String OPERATION_DOCUMENT = "query CatQuery($filter: Filter) { search(filter: $filter) { mustaches } direction }";

  public static final String OPERATION_NAME = "CatQuery";

  public final Optional<Filter> filter;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public CatQuery(Optional<Filter> filter) {
    this.filter = filter;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CatQuery) {
      CatQuery that = (CatQuery) o;
      return ((this.filter == null) ? (that.filter == null) : this.filter.equals(that.filter));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (filter == null) ? 0 : filter.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "CatQuery{"
        + "filter=" + filter
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withDefaultValues) throws IOException {
    CatQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withDefaultValues);
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(CatQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.suppressed_warnings.type.Query.type
    )
    .selections(CatQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Optional<Filter> filter = Optional.absent();

    Builder() {
    }

    public Builder filter(Filter filter) {
      this.filter = Optional.present(filter);
      return this;
    }

    public CatQuery build() {
      return new CatQuery(filter);
    }
  }

  public static class Data implements Query.Data {
    public Search search;

    public Direction direction;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(Search search, Direction direction) {
      this.search = search;
      this.direction = direction;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.search == null) ? (that.search == null) : this.search.equals(that.search))
         &&((this.direction == null) ? (that.direction == null) : this.direction.equals(that.direction));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (search == null) ? 0 : search.hashCode();
        __h *= 1000003;
        __h ^= (direction == null) ? 0 : direction.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "search=" + search + ", "
          + "direction=" + direction
          + "}";
      }
      return $toString;
    }
  }

  public static class Search {
    public Integer mustaches;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Search(Integer mustaches) {
      this.mustaches = mustaches;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Search) {
        Search that = (Search) o;
        return ((this.mustaches == null) ? (that.mustaches == null) : this.mustaches.equals(that.mustaches));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (mustaches == null) ? 0 : mustaches.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Search{"
          + "mustaches=" + mustaches
          + "}";
      }
      return $toString;
    }
  }
}
