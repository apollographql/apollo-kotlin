//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.suppressed_warnings.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.IntAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.suppressed_warnings.CatQuery
import com.example.suppressed_warnings.type.Direction
import com.example.suppressed_warnings.type.adapter.Direction_ResponseAdapter
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object CatQuery_ResponseAdapter {
  public object Data : Adapter<CatQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search", "direction")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): CatQuery.Data {
      var _search: CatQuery.Data.Search? = null
      var _direction: Direction? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _direction = Direction_ResponseAdapter.nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatQuery.Data(
        search = _search,
        direction = _direction
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatQuery.Data,
    ) {
      writer.name("search")
      Search.obj().nullable().toJson(writer, customScalarAdapters, value.search)

      writer.name("direction")
      Direction_ResponseAdapter.nullable().toJson(writer, customScalarAdapters, value.direction)
    }

    private object Search : Adapter<CatQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("mustaches")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): CatQuery.Data.Search {
        var _mustaches: Int? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _mustaches = IntAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CatQuery.Data.Search(
          mustaches = _mustaches ?: missingField(reader, "mustaches")
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: CatQuery.Data.Search,
      ) {
        writer.name("mustaches")
        IntAdapter.toJson(writer, customScalarAdapters, value.mustaches)
      }
    }
  }
}
