//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.suppressed_warnings.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.suppressed_warnings.CatQuery;
import com.example.suppressed_warnings.type.Direction;
import com.example.suppressed_warnings.type.adapter.Direction_ResponseAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class CatQuery_ResponseAdapter {
  public enum Data implements Adapter<CatQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("search", "direction");

    @Override
    public CatQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      CatQuery.Search _search = null;
      Direction _direction = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _search = new NullableAdapter<>(new ObjectAdapter<CatQuery.Search>(Search.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: _direction = new NullableAdapter<>(Direction_ResponseAdapter.INSTANCE).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new CatQuery.Data(
        _search,
        _direction
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CatQuery.Data value) throws IOException {
      writer.name("search");
      new NullableAdapter<>(new ObjectAdapter<CatQuery.Search>(Search.INSTANCE, false)).toJson(writer, customScalarAdapters, value.search);

      writer.name("direction");
      new NullableAdapter<>(Direction_ResponseAdapter.INSTANCE).toJson(writer, customScalarAdapters, value.direction);
    }
  }

  public enum Search implements Adapter<CatQuery.Search> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("mustaches");

    @Override
    public CatQuery.Search fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Integer _mustaches = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _mustaches = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_mustaches, "mustaches");

      return new CatQuery.Search(
        _mustaches
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CatQuery.Search value) throws IOException {
      writer.name("mustaches");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.mustaches);
    }
  }
}
