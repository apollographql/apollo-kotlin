//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.suppressed_warnings.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.suppressed_warnings.CatQuery;
import com.example.suppressed_warnings.type.Direction;
import com.example.suppressed_warnings.type.adapter.Direction_ResponseAdapter;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class CatQuery_ResponseAdapter {
  public enum Data implements DataAdapter<CatQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("search", "direction");

    @Override
    public CatQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      CatQuery.Search _search = null;
      Direction _direction = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _search = new NullableDataAdapter<>(new ObjectDataAdapter<CatQuery.Search>(Search.INSTANCE, false)).deserializeData(reader, context); break;
          case 1: _direction = new NullableDataAdapter<>(Direction_ResponseAdapter.INSTANCE).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new CatQuery.Data(
        _search,
        _direction
      );
    }

    @Override
    public void serializeData(JsonWriter writer, CatQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("search");
      new NullableDataAdapter<>(new ObjectDataAdapter<CatQuery.Search>(Search.INSTANCE, false)).serializeData(writer, value.search, context);

      writer.name("direction");
      new NullableDataAdapter<>(Direction_ResponseAdapter.INSTANCE).serializeData(writer, value.direction, context);
    }
  }

  public enum Search implements DataAdapter<CatQuery.Search> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("mustaches");

    @Override
    public CatQuery.Search deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _mustaches = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _mustaches = DataAdapters.IntDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_mustaches, "mustaches");

      return new CatQuery.Search(
        _mustaches
      );
    }

    @Override
    public void serializeData(JsonWriter writer, CatQuery.Search value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("mustaches");
      DataAdapters.IntDataAdapter.serializeData(writer, value.mustaches, context);
    }
  }
}
