//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.arguments_hardcoded.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.arguments_hardcoded.TestQuery
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("reviews", "testNullableArguments")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _reviews: List<TestQuery.Data.Review?>? = null
      var _testNullableArguments: Int? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _reviews = Review.obj().nullable().list().nullable().fromJson(reader, adapterContext)
          1 -> _testNullableArguments = IntAdapter.fromJson(reader, CustomScalarAdapters.Empty)
          else -> break
        }
      }

      return TestQuery.Data(
        reviews = _reviews,
        testNullableArguments = _testNullableArguments!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("reviews")
      Review.obj().nullable().list().nullable().toJson(writer, value.reviews, adapterContext)

      writer.name("testNullableArguments")
      IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.testNullableArguments)
    }

    private object Review : CompositeAdapter<TestQuery.Data.Review> {
      public val RESPONSE_NAMES: List<String> = listOf("stars", "commentary")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Review {
        var _stars: Int? = null
        var _commentary: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _stars = IntAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _commentary = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.Review(
          stars = _stars!!,
          commentary = _commentary
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Review,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("stars")
        IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.stars)

        writer.name("commentary")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.commentary)
      }
    }
  }
}
