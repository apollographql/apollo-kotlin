//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.arguments_hardcoded.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListCompositeAdapter;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.arguments_hardcoded.TestQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reviews", "testNullableArguments");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      List<TestQuery.Review> _reviews = null;
      Integer _testNullableArguments = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _reviews = new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Review>(Review.INSTANCE, false)))).fromJson(reader, adapterContext); break;
          case 1: _testNullableArguments = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_testNullableArguments, "testNullableArguments");

      return new TestQuery.Data(
        _reviews,
        _testNullableArguments
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("reviews");
      new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Review>(Review.INSTANCE, false)))).toJson(writer, value.reviews, adapterContext);

      writer.name("testNullableArguments");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.testNullableArguments);
    }
  }

  public enum Review implements CompositeAdapter<TestQuery.Review> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("stars", "commentary");

    @Override
    public TestQuery.Review fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      Integer _stars = null;
      String _commentary = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _stars = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _commentary = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_stars, "stars");

      return new TestQuery.Review(
        _stars,
        _commentary
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Review value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("stars");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.stars);

      writer.name("commentary");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.commentary);
    }
  }
}
