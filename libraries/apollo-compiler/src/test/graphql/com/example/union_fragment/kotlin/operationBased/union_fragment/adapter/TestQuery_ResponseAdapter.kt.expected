//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_fragment.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.union_fragment.TestQuery
import com.example.union_fragment.fragment.Starship
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters, value.search)
    }

    private object Search : Adapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onStarship: TestQuery.Data.Search.OnStarship? = null
        if (possibleTypes("Starship").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onStarship = com.example.union_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.fromJson(reader, customScalarAdapters)
        }

        var _starship: Starship? = null
        if (possibleTypes("Starship").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _starship = com.example.union_fragment.fragment.StarshipImpl_ResponseAdapter.Starship.fromJson(reader, customScalarAdapters)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onStarship = _onStarship,
          starship = _starship
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Search,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onStarship != null) {
          com.example.union_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.toJson(writer, customScalarAdapters, value.onStarship)
        }

        if (value.starship != null) {
          com.example.union_fragment.fragment.StarshipImpl_ResponseAdapter.Starship.toJson(writer, customScalarAdapters, value.starship)
        }
      }

      private object OnStarship : Adapter<TestQuery.Data.Search.OnStarship> {
        public val RESPONSE_NAMES: List<String> = listOf("id")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnStarship {
          var _id: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnStarship(
            id = _id ?: missingField(reader, "id")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Search.OnStarship,
        ) {
          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)
        }
      }
    }
  }
}
