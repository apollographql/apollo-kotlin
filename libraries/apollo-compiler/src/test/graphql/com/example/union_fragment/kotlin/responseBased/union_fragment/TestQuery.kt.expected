//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_fragment

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.union_fragment.adapter.TestQuery_ResponseAdapter
import com.example.union_fragment.fragment.Starship
import com.example.union_fragment.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class TestQuery() : Query<TestQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.union_fragment.type.Query.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val search: List<Search?>?,
  ) : Query.Data {
    public fun searchFilterNotNull(): List<Search>? = search?.filterNotNull()

    public sealed interface Search {
      public val __typename: String

      public companion object {
        public fun Search.starship() = this as? Starship

        public fun Search.asStarship() = this as? StarshipSearch
      }
    }

    public data class StarshipSearch(
      public override val __typename: String,
      /**
       * The ID of the starship
       */
      public val id: String,
      /**
       * The name of the starship
       */
      public override val name: String,
    ) : Search, Starship

    public data class OtherSearch(
      public override val __typename: String,
    ) : Search
  }

  public companion object {
    public const val OPERATION_ID: String =
        "6b4ab40afa26bf3c0c7d80ce98ca5288378f0323da59c6643d893efa510a6fec"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   search(text: "test") {
     *     __typename
     *     ... on Starship {
     *       id
     *     }
     *     ...Starship
     *   }
     * }
     *
     * fragment Starship on Starship {
     *   name
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query TestQuery { search(text: \"test\") { __typename ... on Starship { id } ...Starship } }  fragment Starship on Starship { name }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
