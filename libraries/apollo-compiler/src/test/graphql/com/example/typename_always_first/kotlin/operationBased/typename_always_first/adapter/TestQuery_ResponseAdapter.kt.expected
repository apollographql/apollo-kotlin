//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typename_always_first.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableDoubleApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.typename_always_first.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero", "__typename")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().fromJson(reader, context)
          1 -> __typename = StringApolloAdapter.fromJson(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero,
        __typename = __typename!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, value.hero, context)

      writer.name("__typename")
      StringApolloAdapter.toJson(writer, value.__typename, context)
    }

    private object Hero : ApolloAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Hero {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestQuery.Data.Hero.OnHuman? = null
        if (possibleTypes("Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onHuman = com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.fromJson(reader,
              context)
        }

        var _onDroid: TestQuery.Data.Hero.OnDroid? = null
        if (possibleTypes("Droid").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onDroid = com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.fromJson(reader,
              context)
        }

        return TestQuery.Data.Hero(
          __typename = __typename,
          onHuman = _onHuman,
          onDroid = _onDroid
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        if (value.onHuman != null) {
          com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.toJson(writer,
              value.onHuman, context)
        }

        if (value.onDroid != null) {
          com.example.typename_always_first.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.toJson(writer,
              value.onDroid, context)
        }
      }

      private object OnHuman : ApolloAdapter<TestQuery.Data.Hero.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("height", "__typename")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Hero.OnHuman {
          var _height: Double? = null
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _height = NullableDoubleApolloAdapter.fromJson(reader, context)
              1 -> __typename = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnHuman(
            height = _height,
            __typename = __typename!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnHuman,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("height")
          NullableDoubleApolloAdapter.toJson(writer, value.height, context)

          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)
        }
      }

      private object OnDroid : ApolloAdapter<TestQuery.Data.Hero.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "__typename", "primaryFunction")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Hero.OnDroid {
          var _name: String? = null
          var __typename: String? = null
          var _primaryFunction: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringApolloAdapter.fromJson(reader, context)
              1 -> __typename = StringApolloAdapter.fromJson(reader, context)
              2 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnDroid(
            name = _name!!,
            __typename = __typename!!,
            primaryFunction = _primaryFunction
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnDroid,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("primaryFunction")
          NullableStringApolloAdapter.toJson(writer, value.primaryFunction, context)
        }
      }
    }
  }
}
