//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typename_always_first

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.typename_always_first.adapter.TestQuery_ResponseAdapter
import com.example.typename_always_first.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import com.example.typename_always_first.type.Query as CompiledQuery

public class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
    public val __typename: String,
  ) : Query.Data {
    public data class Hero(
      public val __typename: String,
      /**
       * Synthetic field for inline fragment on Human
       */
      public val onHuman: OnHuman?,
      /**
       * Synthetic field for inline fragment on Droid
       */
      public val onDroid: OnDroid?,
    ) {
      public data class OnHuman(
        /**
         * Height in the preferred unit, default is meters
         */
        public val height: Double?,
        public val __typename: String,
      )

      public data class OnDroid(
        /**
         * What others call this droid
         */
        public val name: String,
        public val __typename: String,
        /**
         * This droid's primary function
         */
        public val primaryFunction: String?,
      )
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "5351cc2f9dea89f8d8d9513a08a18eee20324eaba674211bf21f9c01cba9fdea"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   hero {
     *     __typename
     *     ... on Human {
     *       height
     *       __typename
     *     }
     *     ... on Droid {
     *       name
     *       __typename
     *       primaryFunction
     *     }
     *   }
     *   __typename
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { hero { __typename ... on Human { height __typename } ... on Droid { name __typename primaryFunction } } __typename }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
