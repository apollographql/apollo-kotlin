//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_with_inline_fragment

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_inline_fragment.adapter.TestQuery_ResponseAdapter
import com.example.fragment_with_inline_fragment.fragment.DroidHeroDetails
import com.example.fragment_with_inline_fragment.fragment.HeroDetails
import com.example.fragment_with_inline_fragment.fragment.HumanHeroDetails
import com.example.fragment_with_inline_fragment.selections.TestQuerySelections
import com.example.fragment_with_inline_fragment.type.Episode
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class TestQuery() : Query<TestQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.fragment_with_inline_fragment.type.Query.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
  ) : Query.Data {
    public sealed interface Hero : HeroDetails {
      public override val __typename: String

      /**
       * The name of the character
       */
      public override val name: String

      /**
       * The friends of the character exposed as a connection with edges
       */
      public override val friendsConnection: FriendsConnection

      /**
       * The movies this character appears in
       */
      public val appearsIn: List<Episode?>

      public sealed interface FriendsConnection : HeroDetails.FriendsConnection {
        /**
         * The total number of friends
         */
        public override val totalCount: Int?

        /**
         * The edges for each of the character's friends.
         */
        public override val edges: List<Edge?>?

        public sealed interface Edge : HeroDetails.FriendsConnection.Edge {
          /**
           * The character represented by this friendship edge
           */
          public override val node: Node?

          public sealed interface Node : HeroDetails.FriendsConnection.Edge.Node {
            /**
             * The name of the character
             */
            public override val name: String
          }
        }
      }

      public companion object {
        public fun Hero.heroDetails() = this as? HeroDetails

        public fun Hero.asHuman() = this as? HumanHero

        public fun Hero.asDroid() = this as? DroidHero
      }
    }

    public data class HumanHero(
      public override val __typename: String,
      /**
       * Merged field with multiple descriptions. See parentTypes: 'Character, Human' for more
       * information
       */
      public override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      public override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      public override val appearsIn: List<Episode?>,
    ) : Hero, HumanHeroDetails {
      public fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      public data class FriendsConnection(
        /**
         * The total number of friends
         */
        public override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        public override val edges: List<Edge?>?,
      ) : Hero.FriendsConnection, HumanHeroDetails.FriendsConnection {
        public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        public data class Edge(
          /**
           * The character represented by this friendship edge
           */
          public override val node: Node?,
        ) : Hero.FriendsConnection.Edge, HumanHeroDetails.FriendsConnection.Edge {
          public data class Node(
            /**
             * The name of the character
             */
            public override val name: String,
          ) : Hero.FriendsConnection.Edge.Node, HumanHeroDetails.FriendsConnection.Edge.Node
        }
      }
    }

    public data class DroidHero(
      public override val __typename: String,
      /**
       * Merged field with multiple descriptions. See parentTypes: 'Character, Droid' for more
       * information
       */
      public override val name: String,
      /**
       * This droid's primary function
       */
      public override val primaryFunction: String?,
      /**
       * The friends of the character exposed as a connection with edges
       */
      public override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      public override val appearsIn: List<Episode?>,
    ) : Hero, DroidHeroDetails {
      public fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      public data class FriendsConnection(
        /**
         * The total number of friends
         */
        public override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        public override val edges: List<Edge?>?,
      ) : Hero.FriendsConnection, DroidHeroDetails.FriendsConnection {
        public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        public data class Edge(
          /**
           * The character represented by this friendship edge
           */
          public override val node: Node?,
        ) : Hero.FriendsConnection.Edge, DroidHeroDetails.FriendsConnection.Edge {
          public data class Node(
            /**
             * The name of the character
             */
            public override val name: String,
          ) : Hero.FriendsConnection.Edge.Node, DroidHeroDetails.FriendsConnection.Edge.Node
        }
      }
    }

    public data class OtherHero(
      public override val __typename: String,
      /**
       * The name of the character
       */
      public override val name: String,
      /**
       * The friends of the character exposed as a connection with edges
       */
      public override val friendsConnection: FriendsConnection,
      /**
       * The movies this character appears in
       */
      public override val appearsIn: List<Episode?>,
    ) : Hero, HeroDetails {
      public fun appearsInFilterNotNull(): List<Episode> = appearsIn.filterNotNull()

      public data class FriendsConnection(
        /**
         * The total number of friends
         */
        public override val totalCount: Int?,
        /**
         * The edges for each of the character's friends.
         */
        public override val edges: List<Edge?>?,
      ) : Hero.FriendsConnection, HeroDetails.FriendsConnection {
        public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

        public data class Edge(
          /**
           * The character represented by this friendship edge
           */
          public override val node: Node?,
        ) : Hero.FriendsConnection.Edge, HeroDetails.FriendsConnection.Edge {
          public data class Node(
            /**
             * The name of the character
             */
            public override val name: String,
          ) : Hero.FriendsConnection.Edge.Node, HeroDetails.FriendsConnection.Edge.Node
        }
      }
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "e7d60efdcca39c19521839807ddc66ed9efa271ade2ad3e0a934c6c9b388830e"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   hero {
     *     __typename
     *     name
     *     ...HeroDetails
     *     appearsIn
     *   }
     * }
     *
     * fragment HumanDetails on Human {
     *   name
     * }
     *
     * fragment DroidDetails on Droid {
     *   name
     *   primaryFunction
     * }
     *
     * fragment HeroDetails on Character {
     *   __typename
     *   ...HumanDetails
     *   ... on Droid {
     *     __typename
     *     ...DroidDetails
     *   }
     *   name
     *   friendsConnection {
     *     totalCount
     *     edges {
     *       node {
     *         name
     *       }
     *     }
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query TestQuery { hero { __typename name ...HeroDetails appearsIn } }  fragment HumanDetails on Human { name }  fragment DroidDetails on Droid { name primaryFunction }  fragment HeroDetails on Character { __typename ...HumanDetails ... on Droid { __typename ...DroidDetails } name friendsConnection { totalCount edges { node { name } } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
