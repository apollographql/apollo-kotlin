//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_with_inline_fragment.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableIntAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.fragment_with_inline_fragment.TestQuery
import com.example.fragment_with_inline_fragment.type.Episode
import com.example.fragment_with_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    private object Hero : Adapter<TestQuery.Data.Hero> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanHero.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidHero.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherHero.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Hero,
      ) {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.DroidHero -> DroidHero.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> =
          listOf("__typename", "name", "friendsConnection", "appearsIn")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.HumanHero.FriendsConnection? = null
        var _appearsIn: List<Episode?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            3 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection"),
          appearsIn = _appearsIn ?: missingField(reader, "appearsIn")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.HumanHero,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)

        writer.name("appearsIn")
        Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters, value.appearsIn)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.HumanHero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.HumanHero.FriendsConnection {
          var _totalCount: Int? = null
          var _edges: List<TestQuery.Data.HumanHero.FriendsConnection.Edge?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _totalCount = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.FriendsConnection(
            totalCount = _totalCount,
            edges = _edges
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.HumanHero.FriendsConnection,
        ) {
          writer.name("totalCount")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.HumanHero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.HumanHero.FriendsConnection.Edge {
            var _node: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.HumanHero.FriendsConnection.Edge(
              node = _node
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge,
          ) {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.HumanHero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.HumanHero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.HumanHero.FriendsConnection.Edge.Node(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }

    public object DroidHero {
      public val RESPONSE_NAMES: List<String> =
          listOf("__typename", "name", "primaryFunction", "friendsConnection", "appearsIn")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null
        var _friendsConnection: TestQuery.Data.DroidHero.FriendsConnection? = null
        var _appearsIn: List<Episode?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            3 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            4 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          primaryFunction = _primaryFunction,
          friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection"),
          appearsIn = _appearsIn ?: missingField(reader, "appearsIn")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.DroidHero,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("primaryFunction")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)

        writer.name("appearsIn")
        Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters, value.appearsIn)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.DroidHero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.DroidHero.FriendsConnection {
          var _totalCount: Int? = null
          var _edges: List<TestQuery.Data.DroidHero.FriendsConnection.Edge?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _totalCount = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.FriendsConnection(
            totalCount = _totalCount,
            edges = _edges
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.DroidHero.FriendsConnection,
        ) {
          writer.name("totalCount")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.DroidHero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.DroidHero.FriendsConnection.Edge {
            var _node: TestQuery.Data.DroidHero.FriendsConnection.Edge.Node? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.DroidHero.FriendsConnection.Edge(
              node = _node
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.DroidHero.FriendsConnection.Edge,
          ) {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.DroidHero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.DroidHero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.DroidHero.FriendsConnection.Edge.Node(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.DroidHero.FriendsConnection.Edge.Node,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> =
          listOf("__typename", "name", "friendsConnection", "appearsIn")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.OtherHero.FriendsConnection? = null
        var _appearsIn: List<Episode?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            3 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection"),
          appearsIn = _appearsIn ?: missingField(reader, "appearsIn")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherHero,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)

        writer.name("appearsIn")
        Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters, value.appearsIn)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.OtherHero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OtherHero.FriendsConnection {
          var _totalCount: Int? = null
          var _edges: List<TestQuery.Data.OtherHero.FriendsConnection.Edge?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _totalCount = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.OtherHero.FriendsConnection(
            totalCount = _totalCount,
            edges = _edges
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.OtherHero.FriendsConnection,
        ) {
          writer.name("totalCount")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.OtherHero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OtherHero.FriendsConnection.Edge {
            var _node: TestQuery.Data.OtherHero.FriendsConnection.Edge.Node? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.OtherHero.FriendsConnection.Edge(
              node = _node
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.OtherHero.FriendsConnection.Edge,
          ) {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.OtherHero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OtherHero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.OtherHero.FriendsConnection.Edge.Node(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.OtherHero.FriendsConnection.Edge.Node,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }
  }
}
