//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_with_inline_fragment.fragment

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Fragment
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.fragment_with_inline_fragment.fragment.selections.HeroDetailsSelections
import com.example.fragment_with_inline_fragment.type.Character
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public class HeroDetailsImpl() : Fragment<HeroDetailsImpl.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This fragment doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = HeroDetailsImpl_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = Character.type
  )
  .selections(selections = HeroDetailsSelections.__root)
  .build()

  public sealed interface Data : HeroDetails, Fragment.Data {
    override val __typename: String

    /**
     * The name of the character
     */
    override val name: String

    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection

    public sealed interface FriendsConnection : HeroDetails.FriendsConnection {
      /**
       * The total number of friends
       */
      override val totalCount: Int?

      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?

      public sealed interface Edge : HeroDetails.FriendsConnection.Edge {
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?

        public sealed interface Node : HeroDetails.FriendsConnection.Edge.Node {
          /**
           * The name of the character
           */
          override val name: String
        }
      }
    }

    public companion object {
      @Suppress("USELESS_CAST")
      public fun Data.humanDetails(): HumanDetails? = this as? HumanDetails

      @Suppress("USELESS_CAST")
      public fun Data.droidDetails(): DroidDetails? = this as? DroidDetails

      @Suppress("USELESS_CAST")
      public fun Data.asHuman(): HumanData? = this as? HumanData

      @Suppress("USELESS_CAST")
      public fun Data.asDroid(): DroidData? = this as? DroidData
    }
  }

  public data class HumanData(
    override val __typename: String,
    /**
     * Merged field with multiple descriptions. See parentTypes: 'Human, Character' for more
     * information
     */
    override val name: String,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection,
  ) : Data,
      HumanDetails,
      HumanHeroDetails {
    public data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?,
    ) : Data.FriendsConnection,
        HumanHeroDetails.FriendsConnection {
      public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      public data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?,
      ) : Data.FriendsConnection.Edge,
          HumanHeroDetails.FriendsConnection.Edge {
        public data class Node(
          /**
           * The name of the character
           */
          override val name: String,
        ) : Data.FriendsConnection.Edge.Node,
            HumanHeroDetails.FriendsConnection.Edge.Node
      }
    }
  }

  public data class DroidData(
    override val __typename: String,
    /**
     * Merged field with multiple descriptions. See parentTypes: 'Droid, Character' for more
     * information
     */
    override val name: String,
    /**
     * This droid's primary function
     */
    override val primaryFunction: String?,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection,
  ) : Data,
      DroidDetails,
      DroidHeroDetails {
    public data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?,
    ) : Data.FriendsConnection,
        DroidHeroDetails.FriendsConnection {
      public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      public data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?,
      ) : Data.FriendsConnection.Edge,
          DroidHeroDetails.FriendsConnection.Edge {
        public data class Node(
          /**
           * The name of the character
           */
          override val name: String,
        ) : Data.FriendsConnection.Edge.Node,
            DroidHeroDetails.FriendsConnection.Edge.Node
      }
    }
  }

  public data class OtherData(
    override val __typename: String,
    /**
     * The name of the character
     */
    override val name: String,
    /**
     * The friends of the character exposed as a connection with edges
     */
    override val friendsConnection: FriendsConnection,
  ) : Data,
      HeroDetails {
    public data class FriendsConnection(
      /**
       * The total number of friends
       */
      override val totalCount: Int?,
      /**
       * The edges for each of the character's friends.
       */
      override val edges: List<Edge?>?,
    ) : Data.FriendsConnection,
        HeroDetails.FriendsConnection {
      public fun edgesFilterNotNull(): List<Edge>? = edges?.filterNotNull()

      public data class Edge(
        /**
         * The character represented by this friendship edge
         */
        override val node: Node?,
      ) : Data.FriendsConnection.Edge,
          HeroDetails.FriendsConnection.Edge {
        public data class Node(
          /**
           * The name of the character
           */
          override val name: String,
        ) : Data.FriendsConnection.Edge.Node,
            HeroDetails.FriendsConnection.Edge.Node
      }
    }
  }
}
