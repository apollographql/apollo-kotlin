//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.target_name.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.target_name.TestQuery;
import com.example.target_name.type.adapter.renamedEnum_ResponseAdapter;
import com.example.target_name.type.renamedEnum;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("object", "interface", "union", "scalar", "enum");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Object _object = null;
      TestQuery.Interface _interface = null;
      TestQuery.Union _union = null;
      java.lang.Object _scalar = null;
      renamedEnum _enum = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _object = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Object>(Object.INSTANCE, false)).deserializeData(reader, context); break;
          case 1: _interface = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Interface>(Interface.INSTANCE, false)).deserializeData(reader, context); break;
          case 2: _union = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Union>(Union.INSTANCE, true)).deserializeData(reader, context); break;
          case 3: _scalar = DataAdapters.NullableAnyDataAdapter.deserializeData(reader, context); break;
          case 4: _enum = new NullableDataAdapter<>(renamedEnum_ResponseAdapter.INSTANCE).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _object,
        _interface,
        _union,
        _scalar,
        _enum
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("object");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Object>(Object.INSTANCE, false)).serializeData(writer, value.object, context);

      writer.name("interface");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Interface>(Interface.INSTANCE, false)).serializeData(writer, value.interface_, context);

      writer.name("union");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Union>(Union.INSTANCE, true)).serializeData(writer, value.union, context);

      writer.name("scalar");
      DataAdapters.NullableAnyDataAdapter.serializeData(writer, value.scalar, context);

      writer.name("enum");
      new NullableDataAdapter<>(renamedEnum_ResponseAdapter.INSTANCE).serializeData(writer, value.enum_, context);
    }
  }

  public enum Object implements DataAdapter<TestQuery.Object> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("field");

    @Override
    public TestQuery.Object deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _field = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _field = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Object(
        _field
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Object value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("field");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.field, context);
    }
  }

  public enum Interface implements DataAdapter<TestQuery.Interface> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("field");

    @Override
    public TestQuery.Interface deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _field = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _field = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Interface(
        _field
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Interface value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("field");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.field, context);
    }
  }

  public enum Union implements DataAdapter<TestQuery.Union> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Union deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnReservedObject _onReservedObject = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ReservedObject")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onReservedObject = com.example.target_name.adapter.TestQuery_ResponseAdapter.OnReservedObject.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.Union(
        __typename,
        _onReservedObject
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Union value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      if (value.onReservedObject != null) {
        com.example.target_name.adapter.TestQuery_ResponseAdapter.OnReservedObject.INSTANCE.serializeData(writer, value.onReservedObject, context);
      }
    }
  }

  public enum OnReservedObject implements DataAdapter<TestQuery.OnReservedObject> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("field");

    @Override
    public TestQuery.OnReservedObject deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _field = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _field = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnReservedObject(
        _field
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnReservedObject value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("field");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.field, context);
    }
  }
}
