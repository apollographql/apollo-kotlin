//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.target_name.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.target_name.TestQuery
import com.example.target_name.type.adapter.renamedEnum_ResponseAdapter
import com.example.target_name.type.renamedEnum
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("object", "interface", "union", "scalar",
        "enum")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _object: TestQuery.Object? = null
      var _interface: TestQuery.Interface? = null
      var _union: TestQuery.Union? = null
      var _scalar: Any? = null
      var _enum: renamedEnum? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _object = Object.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _interface = Interface.obj().nullable().fromJson(reader, customScalarAdapters)
          2 -> _union = Union.obj(true).nullable().fromJson(reader, customScalarAdapters)
          3 -> _scalar = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _enum = renamedEnum_ResponseAdapter.nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        `object` = _object,
        `interface` = _interface,
        union = _union,
        scalar = _scalar,
        `enum` = _enum
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("object")
      Object.obj().nullable().toJson(writer, customScalarAdapters, value.`object`)

      writer.name("interface")
      Interface.obj().nullable().toJson(writer, customScalarAdapters, value.`interface`)

      writer.name("union")
      Union.obj(true).nullable().toJson(writer, customScalarAdapters, value.union)

      writer.name("scalar")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.scalar)

      writer.name("enum")
      renamedEnum_ResponseAdapter.nullable().toJson(writer, customScalarAdapters, value.`enum`)
    }
  }

  public object Object : Adapter<TestQuery.Object> {
    public val RESPONSE_NAMES: List<String> = listOf("field")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Object {
      var _field: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Object(
        `field` = _field
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Object,
    ): Unit {
      writer.name("field")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
    }
  }

  public object Interface : Adapter<TestQuery.Interface> {
    public val RESPONSE_NAMES: List<String> = listOf("field")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Interface {
      var _field: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Interface(
        `field` = _field
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Interface,
    ): Unit {
      writer.name("field")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
    }
  }

  public object Union : Adapter<TestQuery.Union> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Union {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asReservedObject: TestQuery.AsReservedObject? = null
      if (possibleTypes("ReservedObject").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asReservedObject = com.example.target_name.adapter.TestQuery_ResponseAdapter.AsReservedObject.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Union(
        __typename = __typename,
        asReservedObject = _asReservedObject
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Union,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asReservedObject != null) {
        com.example.target_name.adapter.TestQuery_ResponseAdapter.AsReservedObject.toJson(writer,
            customScalarAdapters, value.asReservedObject)
      }
    }
  }

  public object AsReservedObject : Adapter<TestQuery.AsReservedObject> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "field")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsReservedObject {
      var __typename: String? = null
      var _field: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsReservedObject(
        __typename = __typename!!,
        `field` = _field
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsReservedObject,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("field")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
    }
  }
}
