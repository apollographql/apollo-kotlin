//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.target_name.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.target_name.TestQuery
import com.example.target_name.type.adapter.renamedEnum_ResponseAdapter
import com.example.target_name.type.renamedEnum
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("object", "interface", "union", "scalar",
        "enum")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _object: TestQuery.Data.Object? = null
      var _interface: TestQuery.Data.Interface? = null
      var _union: TestQuery.Data.Union? = null
      var _scalar: Any? = null
      var _enum: renamedEnum? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _object = Object.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _interface = Interface.obj().nullable().fromJson(reader, customScalarAdapters)
          2 -> _union = Union.obj().nullable().fromJson(reader, customScalarAdapters)
          3 -> _scalar = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          4 -> _enum = renamedEnum_ResponseAdapter.nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        `object` = _object,
        `interface` = _interface,
        union = _union,
        scalar = _scalar,
        `enum` = _enum
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("object")
      Object.obj().nullable().toJson(writer, customScalarAdapters, value.`object`)

      writer.name("interface")
      Interface.obj().nullable().toJson(writer, customScalarAdapters, value.`interface`)

      writer.name("union")
      Union.obj().nullable().toJson(writer, customScalarAdapters, value.union)

      writer.name("scalar")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.scalar)

      writer.name("enum")
      renamedEnum_ResponseAdapter.nullable().toJson(writer, customScalarAdapters, value.`enum`)
    }

    private object Object : Adapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("field")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object {
        var _field: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Object(
          `field` = _field
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Object,
      ): Unit {
        writer.name("field")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
      }
    }

    private object Interface : Adapter<TestQuery.Data.Interface> {
      public val RESPONSE_NAMES: List<String> = listOf("field")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Interface {
        var _field: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Interface(
          `field` = _field
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Interface,
      ): Unit {
        writer.name("field")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
      }
    }

    private object Union : Adapter<TestQuery.Data.Union> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Union {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ReservedObject",
          -> ReservedObjectUnion.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherUnion.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Union,
      ): Unit {
        when(value) {
          is TestQuery.Data.ReservedObjectUnion -> ReservedObjectUnion.toJson(writer,
              customScalarAdapters, value)
          is TestQuery.Data.OtherUnion -> OtherUnion.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object ReservedObjectUnion {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "field")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.ReservedObjectUnion {
        var __typename: String? = typename
        var _field: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _field = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.ReservedObjectUnion(
          __typename = __typename!!,
          `field` = _field
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.ReservedObjectUnion,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("field")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.`field`)
      }
    }

    public object OtherUnion {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherUnion {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherUnion(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherUnion,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
