//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.target_name.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.target_name.TestQuery
import com.example.target_name.type.adapter.renamedEnum_ResponseAdapter
import com.example.target_name.type.renamedEnum
import kotlin.Any
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("object", "interface", "union", "scalar",
        "enum")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _object: TestQuery.Data.Object? = null
      var _interface: TestQuery.Data.Interface? = null
      var _union: TestQuery.Data.Union? = null
      var _scalar: Any? = null
      var _enum: renamedEnum? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _object = Object.obj().nullable().fromJson(reader, adapterContext)
          1 -> _interface = Interface.obj().nullable().fromJson(reader, adapterContext)
          2 -> _union = Union.obj(true).nullable().fromJson(reader, adapterContext)
          3 -> _scalar = NullableAnyAdapter.fromJson(reader, CustomScalarAdapters.Empty)
          4 -> _enum = renamedEnum_ResponseAdapter.nullable().fromJson(reader, CustomScalarAdapters.Empty)
          else -> break
        }
      }

      return TestQuery.Data(
        `object` = _object,
        `interface` = _interface,
        union = _union,
        scalar = _scalar,
        `enum` = _enum
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("object")
      Object.obj().nullable().toJson(writer, value.`object`, adapterContext)

      writer.name("interface")
      Interface.obj().nullable().toJson(writer, value.`interface`, adapterContext)

      writer.name("union")
      Union.obj(true).nullable().toJson(writer, value.union, adapterContext)

      writer.name("scalar")
      NullableAnyAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar)

      writer.name("enum")
      renamedEnum_ResponseAdapter.nullable().toJson(writer, CustomScalarAdapters.Empty,
          value.`enum`)
    }

    private object Object : CompositeAdapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("field")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Object {
        var _field: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _field = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.Object(
          `field` = _field
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Object,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("field")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.`field`)
      }
    }

    private object Interface : CompositeAdapter<TestQuery.Data.Interface> {
      public val RESPONSE_NAMES: List<String> = listOf("field")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Interface {
        var _field: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _field = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.Interface(
          `field` = _field
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Interface,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("field")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.`field`)
      }
    }

    private object Union : CompositeAdapter<TestQuery.Data.Union> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Union {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onReservedObject: TestQuery.Data.Union.OnReservedObject? = null
        if (possibleTypes("ReservedObject").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onReservedObject = com.example.target_name.adapter.TestQuery_ResponseAdapter.Data.Union.OnReservedObject.fromJson(reader,
              adapterContext)
        }

        return TestQuery.Data.Union(
          __typename = __typename,
          onReservedObject = _onReservedObject
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Union,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        if (value.onReservedObject != null) {
          com.example.target_name.adapter.TestQuery_ResponseAdapter.Data.Union.OnReservedObject.toJson(writer,
              value.onReservedObject, adapterContext)
        }
      }

      private object OnReservedObject : CompositeAdapter<TestQuery.Data.Union.OnReservedObject> {
        public val RESPONSE_NAMES: List<String> = listOf("field")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Union.OnReservedObject {
          var _field: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _field = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Union.OnReservedObject(
            `field` = _field
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Union.OnReservedObject,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("field")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.`field`)
        }
      }
    }
  }
}
