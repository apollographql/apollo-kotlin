//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.multiple_fragments

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.multiple_fragments.adapter.TestQuery_ResponseAdapter
import com.example.multiple_fragments.fragment.AFragment
import com.example.multiple_fragments.fragment.Fragment1
import com.example.multiple_fragments.fragment.Fragment2
import com.example.multiple_fragments.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import com.example.multiple_fragments.type.Query as CompiledQuery

public class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val a: A?,
  ) : Query.Data {
    public data class A(
      public val __typename: String,
      override val node: Node?,
    ) : AFragment {
      public sealed interface Node : AFragment.Node {
        override val __typename: String

        public companion object {
          @Suppress("USELESS_CAST")
          public fun Node.fragment1(): Fragment1? = this as? Fragment1

          @Suppress("USELESS_CAST")
          public fun Node.fragment2(): Fragment2? = this as? Fragment2

          @Suppress("USELESS_CAST")
          public fun Node.asANode(): ANodeNode? = this as? ANodeNode
        }
      }

      public data class ANodeNode(
        override val __typename: String,
        override val field1: String?,
        override val field2: String?,
      ) : Node,
          Fragment1,
          Fragment2,
          AFragment.ANodeNode

      public data class OtherNode(
        override val __typename: String,
      ) : Node,
          AFragment.Node

      public companion object {
        @Suppress("USELESS_CAST")
        public fun A.aFragment(): AFragment? = this as? AFragment
      }
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "17957893a92546c5a6a6c22ea23453c05b06d4bf74f3be7e2ecec5d89338e14c"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   a {
     *     __typename
     *     ...aFragment
     *   }
     * }
     *
     * fragment fragment1 on ANode {
     *   field1
     * }
     *
     * fragment fragment2 on ANode {
     *   field2
     * }
     *
     * fragment aFragment on A {
     *   node {
     *     __typename
     *     ...fragment1
     *     ...fragment2
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { a { __typename ...aFragment } }  fragment fragment1 on ANode { field1 }  fragment fragment2 on ANode { field2 }  fragment aFragment on A { node { __typename ...fragment1 ...fragment2 } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
