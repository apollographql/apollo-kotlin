//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.multiple_fragments.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.multiple_fragments.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("a")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _a: TestQuery.Data.A? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _a = A.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        a = _a
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("a")
      A.obj().nullable().toJson(writer, scalarAdapters, value.a)
    }

    private object A : Adapter<TestQuery.Data.A> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "node")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.A {
        var __typename: String? = null
        var _node: TestQuery.Data.A.Node? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _node = Node.obj().nullable().fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.A(
          __typename = __typename!!,
          node = _node
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.A,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("node")
        Node.obj().nullable().toJson(writer, scalarAdapters, value.node)
      }

      private object Node : Adapter<TestQuery.Data.A.Node> {
        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.A.Node {
          val __typename = reader.readTypename()
          return when(__typename) {
            "ANode",
            -> ANodeNode.fromJson(reader, scalarAdapters, __typename)
            else
            -> OtherNode.fromJson(reader, scalarAdapters, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.A.Node,
        ): Unit {
          when(value) {
            is TestQuery.Data.A.ANodeNode -> ANodeNode.toJson(writer, scalarAdapters, value)
            is TestQuery.Data.A.OtherNode -> OtherNode.toJson(writer, scalarAdapters, value)
          }
        }
      }

      public object ANodeNode {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "field1", "field2")

        public fun fromJson(
          reader: JsonReader,
          scalarAdapters: ScalarAdapters,
          typename: String,
        ): TestQuery.Data.A.ANodeNode {
          var __typename: String? = typename
          var _field1: String? = null
          var _field2: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
              1 -> _field1 = NullableStringAdapter.fromJson(reader, scalarAdapters)
              2 -> _field2 = NullableStringAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.A.ANodeNode(
            __typename = __typename!!,
            field1 = _field1,
            field2 = _field2
          )
        }

        public fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.A.ANodeNode,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, scalarAdapters, value.__typename)

          writer.name("field1")
          NullableStringAdapter.toJson(writer, scalarAdapters, value.field1)

          writer.name("field2")
          NullableStringAdapter.toJson(writer, scalarAdapters, value.field2)
        }
      }

      public object OtherNode {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public fun fromJson(
          reader: JsonReader,
          scalarAdapters: ScalarAdapters,
          typename: String,
        ): TestQuery.Data.A.OtherNode {
          var __typename: String? = typename

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.A.OtherNode(
            __typename = __typename!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.A.OtherNode,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, scalarAdapters, value.__typename)
        }
      }
    }
  }
}
