//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java8annotation.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.ScalarAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java8annotation.LoginBarber;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class LoginBarber_ResponseAdapter {
  public enum Data implements ApolloAdapter<LoginBarber.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("login");

    @Override
    public LoginBarber.Data fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      LoginBarber.Login _login = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _login = new ObjectAdapter<LoginBarber.Login>(Login.INSTANCE, false).fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_login, "login");

      return new LoginBarber.Data(
        _login
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, LoginBarber.Data value)
        throws IOException {
      writer.name("login");
      new ObjectAdapter<LoginBarber.Login>(Login.INSTANCE, false).toJson(writer, scalarAdapters, value.login);
    }
  }

  public enum Login implements ApolloAdapter<LoginBarber.Login> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("response");

    @Override
    public LoginBarber.Login fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      String _response = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _response = Adapters.StringApolloAdapter.fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_response, "response");

      return new LoginBarber.Login(
        _response
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, LoginBarber.Login value)
        throws IOException {
      writer.name("response");
      Adapters.StringApolloAdapter.toJson(writer, scalarAdapters, value.response);
    }
  }
}
