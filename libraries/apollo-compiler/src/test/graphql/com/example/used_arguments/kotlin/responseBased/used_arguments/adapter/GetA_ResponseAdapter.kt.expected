//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.used_arguments.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableIntAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.used_arguments.GetA
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object GetA_ResponseAdapter {
  public object Data : Adapter<GetA.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("a")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data {
      var _a: GetA.Data.A? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _a = A.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetA.Data(
        a = _a
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetA.Data,
    ) {
      writer.name("a")
      A.obj().nullable().toJson(writer, customScalarAdapters, value.a)
    }

    private object A : Adapter<GetA.Data.A> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data.A {
        val __typename = reader.readTypename()
        return when(__typename) {
          "B",
          -> BA.fromJson(reader, customScalarAdapters, __typename)
          "C",
          -> CA.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherA.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetA.Data.A,
      ) {
        when(value) {
          is GetA.Data.BA -> BA.toJson(writer, customScalarAdapters, value)
          is GetA.Data.CA -> CA.toJson(writer, customScalarAdapters, value)
          is GetA.Data.OtherA -> OtherA.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object BA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "field")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetA.Data.BA {
        var __typename: String? = typename
        var _field: Int? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _field = NullableIntAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetA.Data.BA(
          __typename = __typename ?: missingField(reader, "__typename"),
          `field` = _field
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetA.Data.BA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("field")
        NullableIntAdapter.toJson(writer, customScalarAdapters, value.`field`)
      }
    }

    public object CA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "field")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetA.Data.CA {
        var __typename: String? = typename
        var _field: Int? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _field = NullableIntAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetA.Data.CA(
          __typename = __typename ?: missingField(reader, "__typename"),
          `field` = _field
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetA.Data.CA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("field")
        NullableIntAdapter.toJson(writer, customScalarAdapters, value.`field`)
      }
    }

    public object OtherA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetA.Data.OtherA {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetA.Data.OtherA(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetA.Data.OtherA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
