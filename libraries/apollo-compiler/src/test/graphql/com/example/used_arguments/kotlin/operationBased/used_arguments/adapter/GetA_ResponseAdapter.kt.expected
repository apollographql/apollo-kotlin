//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.used_arguments.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableIntAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.used_arguments.GetA
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object GetA_ResponseAdapter {
  public object Data : Adapter<GetA.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("a")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data {
      var _a: GetA.Data.A? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _a = A.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetA.Data(
        a = _a
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetA.Data,
    ) {
      writer.name("a")
      A.obj(true).nullable().toJson(writer, customScalarAdapters, value.a)
    }

    private object A : Adapter<GetA.Data.A> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data.A {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onB: GetA.Data.A.OnB? = null
        if (possibleTypes("B").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onB = com.example.used_arguments.adapter.GetA_ResponseAdapter.Data.A.OnB.fromJson(reader, customScalarAdapters)
        }

        var _onC: GetA.Data.A.OnC? = null
        if (possibleTypes("C").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onC = com.example.used_arguments.adapter.GetA_ResponseAdapter.Data.A.OnC.fromJson(reader, customScalarAdapters)
        }

        return GetA.Data.A(
          __typename = __typename,
          onB = _onB,
          onC = _onC
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetA.Data.A,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onB != null) {
          com.example.used_arguments.adapter.GetA_ResponseAdapter.Data.A.OnB.toJson(writer, customScalarAdapters, value.onB)
        }

        if (value.onC != null) {
          com.example.used_arguments.adapter.GetA_ResponseAdapter.Data.A.OnC.toJson(writer, customScalarAdapters, value.onC)
        }
      }

      private object OnB : Adapter<GetA.Data.A.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("field")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data.A.OnB {
          var _field: Int? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _field = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetA.Data.A.OnB(
            `field` = _field
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetA.Data.A.OnB,
        ) {
          writer.name("field")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.`field`)
        }
      }

      private object OnC : Adapter<GetA.Data.A.OnC> {
        public val RESPONSE_NAMES: List<String> = listOf("field")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetA.Data.A.OnC {
          var _field: Int? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _field = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetA.Data.A.OnC(
            `field` = _field
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetA.Data.A.OnC,
        ) {
          writer.name("field")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.`field`)
        }
      }
    }
  }
}
