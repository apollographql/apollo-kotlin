//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.used_arguments.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.BPossibleTypes;
import com.apollographql.apollo.api.BTerm;
import com.apollographql.apollo.api.BooleanExpression;
import com.apollographql.apollo.api.BooleanExpressions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.used_arguments.GetA;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class GetA_ResponseAdapter {
  public enum Data implements Adapter<GetA.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("a");

    @Override
    public GetA.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
        IOException {
      GetA.A _a = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _a = new NullableAdapter<>(new ObjectAdapter<GetA.A>(A.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new GetA.Data(
        _a
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        GetA.Data value) throws IOException {
      writer.name("a");
      new NullableAdapter<>(new ObjectAdapter<GetA.A>(A.INSTANCE, true)).toJson(writer, customScalarAdapters, value.a);
    }
  }

  public enum A implements Adapter<GetA.A> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public GetA.A fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
        IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      GetA.OnB _onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("B")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onB = com.example.used_arguments.adapter.GetA_ResponseAdapter.OnB.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      GetA.OnC _onC = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("C")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onC = com.example.used_arguments.adapter.GetA_ResponseAdapter.OnC.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new GetA.A(
        __typename,
        _onB,
        _onC
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters, GetA.A value)
        throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onB != null) {
        com.example.used_arguments.adapter.GetA_ResponseAdapter.OnB.INSTANCE.toJson(writer, customScalarAdapters, value.onB);
      }

      if (value.onC != null) {
        com.example.used_arguments.adapter.GetA_ResponseAdapter.OnC.INSTANCE.toJson(writer, customScalarAdapters, value.onC);
      }
    }
  }

  public enum OnB implements Adapter<GetA.OnB> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("field");

    @Override
    public GetA.OnB fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
        IOException {
      Integer _field = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _field = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new GetA.OnB(
        _field
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters, GetA.OnB value)
        throws IOException {
      writer.name("field");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.field);
    }
  }

  public enum OnC implements Adapter<GetA.OnC> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("field");

    @Override
    public GetA.OnC fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
        IOException {
      Integer _field = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _field = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new GetA.OnC(
        _field
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters, GetA.OnC value)
        throws IOException {
      writer.name("field");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.field);
    }
  }
}
