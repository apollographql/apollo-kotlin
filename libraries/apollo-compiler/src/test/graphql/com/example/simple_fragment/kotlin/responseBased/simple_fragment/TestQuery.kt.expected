//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_fragment

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.DefaultFakeResolver
import com.apollographql.apollo.api.FakeResolver
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.buildData
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.simple_fragment.adapter.TestQuery_ResponseAdapter
import com.example.simple_fragment.fragment.HeroDetails
import com.example.simple_fragment.fragment.HumanDetails
import com.example.simple_fragment.fragment.HumanHeroDetails
import com.example.simple_fragment.schema.__Schema
import com.example.simple_fragment.selections.TestQuerySelections
import com.example.simple_fragment.type.QueryBuilder
import com.example.simple_fragment.type.__CustomScalarAdapters
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import com.example.simple_fragment.type.Query as CompiledQuery

/**
 * Demonstration of Java / Kotlin docs generation
 * for both query and fragments
 */
internal class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
  ) : Query.Data {
    public sealed interface Hero : HeroDetails {
      override val __typename: String

      public companion object {
        @Suppress("USELESS_CAST")
        public fun Hero.heroDetails(): HeroDetails? = this as? HeroDetails

        @Suppress("USELESS_CAST")
        public fun Hero.humanDetails(): HumanDetails? = this as? HumanDetails

        @Suppress("USELESS_CAST")
        public fun Hero.asHuman(): HumanHero? = this as? HumanHero
      }
    }

    public data class HumanHero(
      override val __typename: String,
      /**
       * What this human calls themselves
       */
      override val name: String,
    ) : Hero,
        HumanHeroDetails,
        HumanDetails

    public data class OtherHero(
      override val __typename: String,
    ) : Hero,
        HeroDetails
  }

  public companion object {
    public const val OPERATION_ID: String =
        "590d21282ab1a5387ee626ec6ab47a1ba5fb1c93f8370ede7594be52e5d0f28f"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   hero {
     *     __typename
     *     ...HeroDetails
     *     ...HumanDetails
     *   }
     * }
     *
     * fragment HumanDetails on Human {
     *   __typename
     *   name
     * }
     *
     * fragment HeroDetails on Character {
     *   __typename
     *   ...HumanDetails
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { hero { __typename ...HeroDetails ...HumanDetails } }  fragment HumanDetails on Human { __typename name }  fragment HeroDetails on Character { __typename ...HumanDetails }"

    public const val OPERATION_NAME: String = "TestQuery"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all), block: QueryBuilder.() -> Unit = {}): Data = buildData(
      CompiledQuery,
      block,
      TestQuery_ResponseAdapter.Data,
      TestQuerySelections.__root,
      "Query",
      resolver,
      __CustomScalarAdapters,
    )
  }
}
