//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_fragment.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.simple_fragment.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

internal object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, value.hero, adapterContext)
    }

    private object Hero : CompositeAdapter<TestQuery.Data.Hero> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanHero.fromJson(reader, adapterContext, __typename)
          else
          -> OtherHero.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, value, adapterContext)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, value, adapterContext)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanHero,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherHero,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
