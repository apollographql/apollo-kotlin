//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_fragment.builder

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.DataBuilder
import com.apollographql.apollo.api.DataBuilderDsl
import com.apollographql.apollo.api.DataBuilderFactory
import com.apollographql.apollo.api.DataBuilderScope
import com.apollographql.apollo.api.ExecutableDefinition
import com.apollographql.apollo.api.FakeResolver
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.buildData
import kotlin.Unit

@DataBuilderDsl
internal class QueryBuilder(
  customScalarAdapters: CustomScalarAdapters,
) : DataBuilder<QueryMap>(customScalarAdapters) {
  init {
    __typename = "Query"}

  public var hero: CharacterMap by __fields

  override fun build(): QueryMap = QueryMap(__fields)

  public companion object : DataBuilderFactory<QueryBuilder> {
    override fun newBuilder(customScalarAdapters: CustomScalarAdapters): QueryBuilder = QueryBuilder(customScalarAdapters)
  }
}

internal fun DataBuilderScope.buildQuery(block: QueryBuilder.() -> Unit): QueryMap = QueryBuilder(customScalarAdapters)
.apply {
  __typename = "Query"
}.apply(block)
.build()

internal fun <D : Query.Data> ExecutableDefinition<D>.Data(customScalarAdapters: CustomScalarAdapters = CustomScalarAdapters.Empty, block: QueryBuilder.() -> Unit): D = buildData(
  ADAPTER,
  customScalarAdapters,
  QueryBuilder(customScalarAdapters).apply(block).build(),
)

internal fun <D : Query.Data> ExecutableDefinition<D>.Data(
  resolver: FakeResolver,
  customScalarAdapters: CustomScalarAdapters = CustomScalarAdapters.Empty,
  block: QueryBuilder.() -> Unit = {},
): D = buildData(
  ADAPTER,
  customScalarAdapters,
  QueryBuilder(customScalarAdapters).apply(block).build(),
  ROOT_FIELD.selections,
  "Query",
  resolver,
)
