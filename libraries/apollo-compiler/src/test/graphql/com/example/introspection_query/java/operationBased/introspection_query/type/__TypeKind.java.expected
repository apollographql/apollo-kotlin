//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.type;

import com.apollographql.apollo.api.EnumType;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Objects;

public class __TypeKind {
  public static EnumType type = new EnumType("__TypeKind", Arrays.asList("SCALAR", "OBJECT", "INTERFACE", "UNION", "ENUM", "INPUT_OBJECT", "LIST", "NON_NULL"));

  public static __TypeKind SCALAR = new __TypeKind("SCALAR");

  public static __TypeKind OBJECT = new __TypeKind("OBJECT");

  public static __TypeKind INTERFACE = new __TypeKind("INTERFACE");

  public static __TypeKind UNION = new __TypeKind("UNION");

  public static __TypeKind ENUM = new __TypeKind("ENUM");

  public static __TypeKind INPUT_OBJECT = new __TypeKind("INPUT_OBJECT");

  public static __TypeKind LIST = new __TypeKind("LIST");

  public static __TypeKind NON_NULL = new __TypeKind("NON_NULL");

  public String rawValue;

  private __TypeKind(String rawValue) {
    this.rawValue = rawValue;
  }

  /**
   * Returns the __TypeKind that represents the specified rawValue.
   * Note: unknown values of rawValue will return UNKNOWN__. You may want to update your schema instead of calling this method directly.
   */
  public static __TypeKind safeValueOf(String rawValue) {
    switch (Objects.requireNonNull(rawValue)) {
      case "SCALAR": return __TypeKind.SCALAR;
      case "OBJECT": return __TypeKind.OBJECT;
      case "INTERFACE": return __TypeKind.INTERFACE;
      case "UNION": return __TypeKind.UNION;
      case "ENUM": return __TypeKind.ENUM;
      case "INPUT_OBJECT": return __TypeKind.INPUT_OBJECT;
      case "LIST": return __TypeKind.LIST;
      case "NON_NULL": return __TypeKind.NON_NULL;
      default: return new __TypeKind.UNKNOWN__(rawValue);
    }
  }

  /**
   * An enum value that wasn't known at compile time.
   */
  public static class UNKNOWN__ extends __TypeKind {
    private UNKNOWN__(String rawValue) {
      super(rawValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      if (!(other instanceof UNKNOWN__)) return false;
      return rawValue.equals(((UNKNOWN__) other).rawValue);
    }

    @Override
    public int hashCode() {
      return rawValue.hashCode();
    }

    @Override
    public String toString() {
      return "UNKNOWN__(" + rawValue + ")";
    }
  }
}
