//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.ListDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.introspection_query.TestQuery;
import com.example.introspection_query.type.__TypeKind;
import com.example.introspection_query.type.adapter.__TypeKind_ResponseAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__schema", "__type");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.__Schema ___schema = null;
      TestQuery.__Type ___type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: ___schema = new ObjectDataAdapter<TestQuery.__Schema>(__Schema.INSTANCE, false).deserializeData(reader, context); break;
          case 1: ___type = new ObjectDataAdapter<TestQuery.__Type>(__Type.INSTANCE, false).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(___schema, "__schema");
      Assertions.checkFieldNotMissing(___type, "__type");

      return new TestQuery.Data(
        ___schema,
        ___type
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__schema");
      new ObjectDataAdapter<TestQuery.__Schema>(__Schema.INSTANCE, false).serializeData(writer, value.__schema, context);

      writer.name("__type");
      new ObjectDataAdapter<TestQuery.__Type>(__Type.INSTANCE, false).serializeData(writer, value.__type, context);
    }
  }

  public enum __Schema implements DataAdapter<TestQuery.__Schema> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("queryType", "types");

    @Override
    public TestQuery.__Schema deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.QueryType _queryType = null;
      List<TestQuery.Type> _types = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _queryType = new ObjectDataAdapter<TestQuery.QueryType>(QueryType.INSTANCE, false).deserializeData(reader, context); break;
          case 1: _types = new ListDataAdapter<>(new ObjectDataAdapter<TestQuery.Type>(Type.INSTANCE, false)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_queryType, "queryType");
      Assertions.checkFieldNotMissing(_types, "types");

      return new TestQuery.__Schema(
        _queryType,
        _types
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.__Schema value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("queryType");
      new ObjectDataAdapter<TestQuery.QueryType>(QueryType.INSTANCE, false).serializeData(writer, value.queryType, context);

      writer.name("types");
      new ListDataAdapter<>(new ObjectDataAdapter<TestQuery.Type>(Type.INSTANCE, false)).serializeData(writer, value.types, context);
    }
  }

  public enum QueryType implements DataAdapter<TestQuery.QueryType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.QueryType deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.QueryType(
        _name
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.QueryType value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("name");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.name, context);
    }
  }

  public enum Type implements DataAdapter<TestQuery.Type> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Type deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Type(
        _name
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Type value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("name");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.name, context);
    }
  }

  public enum __Type implements DataAdapter<TestQuery.__Type> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "kind");

    @Override
    public TestQuery.__Type deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _name = null;
      __TypeKind _kind = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          case 1: _kind = __TypeKind_ResponseAdapter.INSTANCE.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_kind, "kind");

      return new TestQuery.__Type(
        _name,
        _kind
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.__Type value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("name");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.name, context);

      writer.name("kind");
      __TypeKind_ResponseAdapter.INSTANCE.serializeData(writer, value.kind, context);
    }
  }
}
