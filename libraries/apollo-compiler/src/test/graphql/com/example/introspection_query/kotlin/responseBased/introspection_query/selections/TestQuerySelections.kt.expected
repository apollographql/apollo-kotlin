//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.selections

import com.apollographql.apollo.api.CompiledArgument
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CompiledSelection
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.notNull
import com.example.introspection_query.type.GraphQLString
import com.example.introspection_query.type.Query
import com.example.introspection_query.type.__Schema
import com.example.introspection_query.type.__Type
import com.example.introspection_query.type.__TypeKind
import kotlin.collections.List

public object TestQuerySelections {
  private val __queryType: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type
        ).build()
      )

  private val __types: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type
        ).build()
      )

  private val ____schema: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "queryType",
          type = __Type.type.notNull()
        ).selections(__queryType)
        .build(),
        CompiledField.Builder(
          name = "types",
          type = __Type.type.notNull().list().notNull()
        ).selections(__types)
        .build()
      )

  private val ____type: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type
        ).build(),
        CompiledField.Builder(
          name = "kind",
          type = __TypeKind.type.notNull()
        ).build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__schema",
          type = __Schema.type.notNull()
        ).selections(____schema)
        .build(),
        CompiledField.Builder(
          name = "__type",
          type = __Type.type.notNull()
        ).arguments(listOf(
          CompiledArgument.Builder(Query.____type_name).value("Vehicle").build()
        ))
        .selections(____type)
        .build()
      )
}
