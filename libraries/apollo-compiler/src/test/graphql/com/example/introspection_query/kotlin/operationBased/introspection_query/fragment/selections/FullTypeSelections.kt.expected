//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.fragment.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFieldType
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledInputValueType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.introspection_query.type.GraphQLString
import kotlin.collections.List

public object FullTypeSelections {
  private val __args: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "__InputValue",
          possibleTypes = listOf("__InputValue")
        ).selections(InputValueSelections.__root)
        .build()
      )

  private val __fields: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "args",
          type = CompiledInputValueType.notNull().list().notNull()
        ).selections(__args)
        .build()
      )

  private val __inputFields: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "__InputValue",
          possibleTypes = listOf("__InputValue")
        ).selections(InputValueSelections.__root)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "__Type",
          possibleTypes = listOf("__Type")
        ).selections(FullTypeCommonSelections.__root)
        .build(),
        CompiledField.Builder(
          name = "fields",
          type = CompiledFieldType.notNull().list()
        ).arguments(listOf(
          CompiledArgument.Builder("includeDeprecated", true).build()
        ))
        .selections(__fields)
        .build(),
        CompiledField.Builder(
          name = "inputFields",
          type = CompiledInputValueType.notNull().list()
        ).selections(__inputFields)
        .build()
      )
}
