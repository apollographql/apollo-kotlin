//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.example.introspection_query.TestQuery
import com.example.introspection_query.type.__TypeKind
import com.example.introspection_query.type.adapter.__TypeKind_ResponseAdapter
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__schema", "__type")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var ___schema: TestQuery.Data.__Schema? = null
      var ___type: TestQuery.Data.__Type? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> ___schema = __Schema.obj().fromJson(reader, customScalarAdapters)
          1 -> ___type = __Type.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        __schema = ___schema ?: missingField(reader, "__schema"),
        __type = ___type ?: missingField(reader, "__type")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("__schema")
      __Schema.obj().toJson(writer, customScalarAdapters, value.__schema)

      writer.name("__type")
      __Type.obj().toJson(writer, customScalarAdapters, value.__type)
    }

    private object __Schema : Adapter<TestQuery.Data.__Schema> {
      public val RESPONSE_NAMES: List<String> = listOf("queryType", "types")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Schema {
        var _queryType: TestQuery.Data.__Schema.QueryType? = null
        var _types: List<TestQuery.Data.__Schema.Type>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _queryType = QueryType.obj().fromJson(reader, customScalarAdapters)
            1 -> _types = Type.obj().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.__Schema(
          queryType = _queryType ?: missingField(reader, "queryType"),
          types = _types ?: missingField(reader, "types")
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.__Schema,
      ) {
        writer.name("queryType")
        QueryType.obj().toJson(writer, customScalarAdapters, value.queryType)

        writer.name("types")
        Type.obj().list().toJson(writer, customScalarAdapters, value.types)
      }

      private object QueryType : Adapter<TestQuery.Data.__Schema.QueryType> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Schema.QueryType {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.__Schema.QueryType(
            name = _name
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.__Schema.QueryType,
        ) {
          writer.name("name")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      private object Type : Adapter<TestQuery.Data.__Schema.Type> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Schema.Type {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.__Schema.Type(
            name = _name
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.__Schema.Type,
        ) {
          writer.name("name")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    private object __Type : Adapter<TestQuery.Data.__Type> {
      public val RESPONSE_NAMES: List<String> = listOf("name", "kind")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Type {
        var _name: String? = null
        var _kind: __TypeKind? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _kind = __TypeKind_ResponseAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.__Type(
          name = _name,
          kind = _kind ?: missingField(reader, "kind")
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.__Type,
      ) {
        writer.name("name")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("kind")
        __TypeKind_ResponseAdapter.toJson(writer, customScalarAdapters, value.kind)
      }
    }
  }
}
