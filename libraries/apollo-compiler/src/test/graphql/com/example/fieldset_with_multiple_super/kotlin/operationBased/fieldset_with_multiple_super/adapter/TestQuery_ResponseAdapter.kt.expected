//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.fieldset_with_multiple_super.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("c")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data {
      var _c: TestQuery.Data.C? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _c = C.obj(true).nullable().deserializeComposite(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        c = _c
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("c")
      C.obj(true).nullable().serializeComposite(writer, value.c, context)
    }

    private object C : CompositeAdapter<TestQuery.Data.C> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.C {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onA: TestQuery.Data.C.OnA? = null
        if (possibleTypes("ABC","AC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.deserializeComposite(reader,
              context)
        }

        var _onB: TestQuery.Data.C.OnB? = null
        if (possibleTypes("ABC","BC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.deserializeComposite(reader,
              context)
        }

        return TestQuery.Data.C(
          __typename = __typename,
          onA = _onA,
          onB = _onB
        )
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.C,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        if (value.onA != null) {
          com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.serializeComposite(writer,
              value.onA, context)
        }

        if (value.onB != null) {
          com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.serializeComposite(writer,
              value.onB, context)
        }
      }

      private object OnA : CompositeAdapter<TestQuery.Data.C.OnA> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

        public override fun deserializeComposite(reader: JsonReader,
            context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.C.OnA {
          var __typename: String? = null
          var _fieldA1: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onB: TestQuery.Data.C.OnA.OnB? = null
          if (possibleTypes("ABC","BC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.OnB.deserializeComposite(reader,
                context)
          }

          return TestQuery.Data.C.OnA(
            __typename = __typename,
            fieldA1 = _fieldA1,
            onB = _onB
          )
        }

        public override fun serializeComposite(
          writer: JsonWriter,
          `value`: TestQuery.Data.C.OnA,
          context: CompositeAdapter.SerializeCompositeContext,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("fieldA1")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA1)

          if (value.onB != null) {
            com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.OnB.serializeComposite(writer,
                value.onB, context)
          }
        }

        private object OnB : CompositeAdapter<TestQuery.Data.C.OnA.OnB> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldB1")

          public override fun deserializeComposite(reader: JsonReader,
              context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.C.OnA.OnB {
            var _fieldB1: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _fieldB1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            return TestQuery.Data.C.OnA.OnB(
              fieldB1 = _fieldB1
            )
          }

          public override fun serializeComposite(
            writer: JsonWriter,
            `value`: TestQuery.Data.C.OnA.OnB,
            context: CompositeAdapter.SerializeCompositeContext,
          ): Unit {
            writer.name("fieldB1")
            NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB1)
          }
        }
      }

      private object OnB : CompositeAdapter<TestQuery.Data.C.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

        public override fun deserializeComposite(reader: JsonReader,
            context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.C.OnB {
          var __typename: String? = null
          var _fieldB2: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _fieldB2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onA: TestQuery.Data.C.OnB.OnA? = null
          if (possibleTypes("ABC","AC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.OnA.deserializeComposite(reader,
                context)
          }

          return TestQuery.Data.C.OnB(
            __typename = __typename,
            fieldB2 = _fieldB2,
            onA = _onA
          )
        }

        public override fun serializeComposite(
          writer: JsonWriter,
          `value`: TestQuery.Data.C.OnB,
          context: CompositeAdapter.SerializeCompositeContext,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("fieldB2")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB2)

          if (value.onA != null) {
            com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.OnA.serializeComposite(writer,
                value.onA, context)
          }
        }

        private object OnA : CompositeAdapter<TestQuery.Data.C.OnB.OnA> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldA2")

          public override fun deserializeComposite(reader: JsonReader,
              context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.C.OnB.OnA {
            var _fieldA2: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _fieldA2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            return TestQuery.Data.C.OnB.OnA(
              fieldA2 = _fieldA2
            )
          }

          public override fun serializeComposite(
            writer: JsonWriter,
            `value`: TestQuery.Data.C.OnB.OnA,
            context: CompositeAdapter.SerializeCompositeContext,
          ): Unit {
            writer.name("fieldA2")
            NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA2)
          }
        }
      }
    }
  }
}
