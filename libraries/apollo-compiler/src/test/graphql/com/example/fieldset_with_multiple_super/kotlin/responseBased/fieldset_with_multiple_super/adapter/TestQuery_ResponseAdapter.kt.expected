//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter

import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fieldset_with_multiple_super.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("c")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _c: TestQuery.Data.C? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _c = C.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        c = _c
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("c")
      C.obj().nullable().serializeData(writer, value.c, context)
    }

    private object C : DataAdapter<TestQuery.Data.C> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.C {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ABC",
          -> ABC.deserializeData(reader, context, __typename)
          "AC",
          -> OtherAC.deserializeData(reader, context, __typename)
          "BC",
          -> OtherBC.deserializeData(reader, context, __typename)
          else
          -> OtherC.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.C,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.ABC -> ABC.serializeData(writer, value, context)
          is TestQuery.Data.OtherAC -> OtherAC.serializeData(writer, value, context)
          is TestQuery.Data.OtherBC -> OtherBC.serializeData(writer, value, context)
          is TestQuery.Data.OtherC -> OtherC.serializeData(writer, value, context)
        }
      }
    }

    public object ABC {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1", "fieldB1",
          "fieldB2", "fieldA2")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.ABC {
        var __typename: String? = typename
        var _fieldA1: String? = null
        var _fieldB1: String? = null
        var _fieldB2: String? = null
        var _fieldA2: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _fieldB1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            3 -> _fieldB2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            4 -> _fieldA2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.ABC(
          __typename = __typename!!,
          fieldA1 = _fieldA1,
          fieldB1 = _fieldB1,
          fieldB2 = _fieldB2,
          fieldA2 = _fieldA2
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.ABC,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldA1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA1)

        writer.name("fieldB1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB1)

        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB2)

        writer.name("fieldA2")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA2)
      }
    }

    public object OtherC {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherC {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherC(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherC,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }

    public object OtherAC {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherAC {
        var __typename: String? = typename
        var _fieldA1: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherAC(
          __typename = __typename!!,
          fieldA1 = _fieldA1
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherAC,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldA1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA1)
      }
    }

    public object OtherBC {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherBC {
        var __typename: String? = typename
        var _fieldB2: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldB2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherBC(
          __typename = __typename!!,
          fieldB2 = _fieldB2
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherBC,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB2)
      }
    }
  }
}
