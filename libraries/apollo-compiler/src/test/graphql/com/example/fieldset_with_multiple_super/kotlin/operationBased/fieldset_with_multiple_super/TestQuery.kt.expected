//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter
import com.example.fieldset_with_multiple_super.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import com.example.fieldset_with_multiple_super.type.Query as CompiledQuery

public class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val c: C?,
  ) : Query.Data {
    public data class C(
      public val __typename: String,
      /**
       * Synthetic field for inline fragment on A
       */
      public val onA: OnA?,
      /**
       * Synthetic field for inline fragment on B
       */
      public val onB: OnB?,
    ) {
      public data class OnA(
        public val __typename: String,
        public val fieldA1: String?,
        /**
         * Synthetic field for inline fragment on B
         */
        public val onB: OnB?,
      ) {
        public data class OnB(
          public val fieldB1: String?,
        )
      }

      public data class OnB(
        public val __typename: String,
        public val fieldB2: String?,
        /**
         * Synthetic field for inline fragment on A
         */
        public val onA: OnA?,
      ) {
        public data class OnA(
          public val fieldA2: String?,
        )
      }
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "6faa0db26a1466e969ffc48d42fef45419406628c6c607fbbb1a0da1d592fdb2"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   c {
     *     __typename
     *     ... on A {
     *       __typename
     *       fieldA1
     *       ... on B {
     *         fieldB1
     *       }
     *     }
     *     ... on B {
     *       __typename
     *       fieldB2
     *       ... on A {
     *         fieldA2
     *       }
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { c { __typename ... on A { __typename fieldA1 ... on B { fieldB1 } } ... on B { __typename fieldB2 ... on A { fieldA2 } } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
