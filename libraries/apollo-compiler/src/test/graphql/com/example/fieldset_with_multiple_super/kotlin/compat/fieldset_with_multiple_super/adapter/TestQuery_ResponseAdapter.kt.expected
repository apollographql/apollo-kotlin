//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.fieldset_with_multiple_super.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("c")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _c: TestQuery.C? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _c = C.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        c = _c
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("c")
      C.obj(true).nullable().toJson(writer, customScalarAdapters, value.c)
    }
  }

  public object C : Adapter<TestQuery.C> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.C {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asA: TestQuery.AsA? = null
      if (possibleTypes("ABC","AC").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsA.fromJson(reader,
            customScalarAdapters)
      }

      var _asB1: TestQuery.AsB1? = null
      if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asB1 = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsB1.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.C(
        __typename = __typename,
        asA = _asA,
        asB1 = _asB1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.C,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asA != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsA.toJson(writer,
            customScalarAdapters, value.asA)
      }

      if (value.asB1 != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsB1.toJson(writer,
            customScalarAdapters, value.asB1)
      }
    }
  }

  public object AsA : Adapter<TestQuery.AsA> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsA {
      var __typename: String? = null
      var _fieldA1: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asB: TestQuery.AsB? = null
      if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsB.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.AsA(
        __typename = __typename,
        fieldA1 = _fieldA1,
        asB = _asB
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsA,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("fieldA1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1)

      if (value.asB != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsB.toJson(writer,
            customScalarAdapters, value.asB)
      }
    }
  }

  public object AsB : Adapter<TestQuery.AsB> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1", "fieldB1")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsB {
      var __typename: String? = null
      var _fieldA1: String? = null
      var _fieldB1: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _fieldB1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsB(
        __typename = __typename!!,
        fieldA1 = _fieldA1,
        fieldB1 = _fieldB1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsB,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("fieldA1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1)

      writer.name("fieldB1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1)
    }
  }

  public object AsB1 : Adapter<TestQuery.AsB1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsB1 {
      var __typename: String? = null
      var _fieldB2: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asA1: TestQuery.AsA1? = null
      if (possibleTypes("ABC","AC").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asA1 = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsA1.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.AsB1(
        __typename = __typename,
        fieldB2 = _fieldB2,
        asA1 = _asA1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsB1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("fieldB2")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)

      if (value.asA1 != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.AsA1.toJson(writer,
            customScalarAdapters, value.asA1)
      }
    }
  }

  public object AsA1 : Adapter<TestQuery.AsA1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2", "fieldA2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsA1 {
      var __typename: String? = null
      var _fieldB2: String? = null
      var _fieldA2: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _fieldA2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsA1(
        __typename = __typename!!,
        fieldB2 = _fieldB2,
        fieldA2 = _fieldA2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsA1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("fieldB2")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)

      writer.name("fieldA2")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA2)
    }
  }
}
