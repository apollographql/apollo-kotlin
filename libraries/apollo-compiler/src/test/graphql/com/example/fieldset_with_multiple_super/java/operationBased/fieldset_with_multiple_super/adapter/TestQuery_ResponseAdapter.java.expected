//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fieldset_with_multiple_super.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("c");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.C _c = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _c = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.C>(C.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _c
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("c");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.C>(C.INSTANCE, true)).serializeData(writer, value.c, context);
    }
  }

  public enum C implements DataAdapter<TestQuery.C> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.C deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnA _onA = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","AC")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.deserializeData(reader, context);
      }

      TestQuery.OnB1 _onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.C(
        __typename,
        _onA,
        _onB
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.C value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      if (value.onA != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.serializeData(writer, value.onA, context);
      }

      if (value.onB != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.serializeData(writer, value.onB, context);
      }
    }
  }

  public enum OnA implements DataAdapter<TestQuery.OnA> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "fieldA1");

    @Override
    public TestQuery.OnA deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _fieldA1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _fieldA1 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnB _onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.OnA(
        __typename,
        _fieldA1,
        _onB
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnA value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("fieldA1");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.fieldA1, context);

      if (value.onB != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.serializeData(writer, value.onB, context);
      }
    }
  }

  public enum OnB implements DataAdapter<TestQuery.OnB> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldB1");

    @Override
    public TestQuery.OnB deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _fieldB1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _fieldB1 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnB(
        _fieldB1
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnB value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("fieldB1");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.fieldB1, context);
    }
  }

  public enum OnB1 implements DataAdapter<TestQuery.OnB1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "fieldB2");

    @Override
    public TestQuery.OnB1 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _fieldB2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _fieldB2 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnA1 _onA = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","AC")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA1.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.OnB1(
        __typename,
        _fieldB2,
        _onA
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnB1 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("fieldB2");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.fieldB2, context);

      if (value.onA != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA1.INSTANCE.serializeData(writer, value.onA, context);
      }
    }
  }

  public enum OnA1 implements DataAdapter<TestQuery.OnA1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldA2");

    @Override
    public TestQuery.OnA1 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _fieldA2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _fieldA2 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnA1(
        _fieldA2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnA1 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("fieldA2");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.fieldA2, context);
    }
  }
}
