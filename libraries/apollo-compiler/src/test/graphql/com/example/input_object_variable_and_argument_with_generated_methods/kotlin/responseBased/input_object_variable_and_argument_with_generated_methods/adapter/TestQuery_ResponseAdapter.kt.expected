//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.input_object_variable_and_argument_with_generated_methods.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.input_object_variable_and_argument_with_generated_methods.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("heroWithReview")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _heroWithReview: TestQuery.Data.HeroWithReview? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _heroWithReview = HeroWithReview.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        heroWithReview = _heroWithReview
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("heroWithReview")
      HeroWithReview.obj().nullable().toJson(writer, customScalarAdapters, value.heroWithReview)
    }

    private object HeroWithReview : Adapter<TestQuery.Data.HeroWithReview> {
      public val RESPONSE_NAMES: List<String> = listOf("name", "height")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.HeroWithReview {
        var _name: String? = null
        var _height: Double? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HeroWithReview(
          name = _name ?: missingField(reader, "name"),
          height = _height
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.HeroWithReview,
      ) {
        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("height")
        NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
      }
    }
  }
}
