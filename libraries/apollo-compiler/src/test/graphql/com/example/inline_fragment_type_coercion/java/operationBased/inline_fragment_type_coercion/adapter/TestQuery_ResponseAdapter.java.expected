//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.inline_fragment_type_coercion.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("foo");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Foo _foo = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _foo = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Foo>(Foo.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _foo
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("foo");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Foo>(Foo.INSTANCE, true)).serializeData(writer, value.foo, context);
    }
  }

  public enum Foo implements DataAdapter<TestQuery.Foo> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "foo");

    @Override
    public TestQuery.Foo deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _foo = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _foo = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnBar _onBar = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("BarObject","FooBar")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onBar = com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.OnBar.INSTANCE.deserializeData(reader, context);
      }

      Assertions.checkFieldNotMissing(_foo, "foo");

      return new TestQuery.Foo(
        __typename,
        _foo,
        _onBar
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Foo value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("foo");
      DataAdapters.StringDataAdapter.serializeData(writer, value.foo, context);

      if (value.onBar != null) {
        com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.OnBar.INSTANCE.serializeData(writer, value.onBar, context);
      }
    }
  }

  public enum OnBar implements DataAdapter<TestQuery.OnBar> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("bar");

    @Override
    public TestQuery.OnBar deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _bar = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _bar = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_bar, "bar");

      return new TestQuery.OnBar(
        _bar
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnBar value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("bar");
      DataAdapters.StringDataAdapter.serializeData(writer, value.bar, context);
    }
  }
}
