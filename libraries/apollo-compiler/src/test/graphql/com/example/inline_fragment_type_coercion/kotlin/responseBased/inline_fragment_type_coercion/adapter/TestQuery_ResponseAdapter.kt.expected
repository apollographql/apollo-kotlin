//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("foo")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestQuery.Data {
      var _foo: TestQuery.Data.Foo? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _foo = Foo.obj().nullable().fromJson(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        foo = _foo
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("foo")
      Foo.obj().nullable().toJson(writer, value.foo, context)
    }

    private object Foo : ApolloAdapter<TestQuery.Data.Foo> {
      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Foo {
        val __typename = reader.readTypename()
        return when(__typename) {
          "FooBar",
          -> BarFoo.fromJson(reader, context, __typename)
          else
          -> OtherFoo.fromJson(reader, context, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Foo,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.BarFoo -> BarFoo.toJson(writer, value, context)
          is TestQuery.Data.OtherFoo -> OtherFoo.toJson(writer, value, context)
        }
      }
    }

    public object BarFoo {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "foo", "bar")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestQuery.Data.BarFoo {
        var __typename: String? = typename
        var _foo: String? = null
        var _bar: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _foo = StringApolloAdapter.fromJson(reader, context)
            2 -> _bar = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.BarFoo(
          __typename = __typename!!,
          foo = _foo!!,
          bar = _bar!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.BarFoo,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("foo")
        StringApolloAdapter.toJson(writer, value.foo, context)

        writer.name("bar")
        StringApolloAdapter.toJson(writer, value.bar, context)
      }
    }

    public object OtherFoo {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestQuery.Data.OtherFoo {
        var __typename: String? = typename
        var _foo: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _foo = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherFoo(
          __typename = __typename!!,
          foo = _foo!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherFoo,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("foo")
        StringApolloAdapter.toJson(writer, value.foo, context)
      }
    }
  }
}
