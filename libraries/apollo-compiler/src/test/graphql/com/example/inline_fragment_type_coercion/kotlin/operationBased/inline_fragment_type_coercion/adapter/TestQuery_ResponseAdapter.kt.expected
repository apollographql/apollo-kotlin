//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_type_coercion.adapter

import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_type_coercion.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("foo")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _foo: TestQuery.Data.Foo? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _foo = Foo.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        foo = _foo
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("foo")
      Foo.obj(true).nullable().serializeData(writer, value.foo, context)
    }

    private object Foo : DataAdapter<TestQuery.Data.Foo> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "foo")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Foo {
        var __typename: String? = null
        var _foo: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _foo = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onBar: TestQuery.Data.Foo.OnBar? = null
        if (possibleTypes("BarObject","FooBar").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onBar = com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.Data.Foo.OnBar.deserializeData(reader,
              context)
        }

        return TestQuery.Data.Foo(
          __typename = __typename,
          foo = _foo!!,
          onBar = _onBar
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Foo,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("foo")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.foo)

        if (value.onBar != null) {
          com.example.inline_fragment_type_coercion.adapter.TestQuery_ResponseAdapter.Data.Foo.OnBar.serializeData(writer,
              value.onBar, context)
        }
      }

      private object OnBar : DataAdapter<TestQuery.Data.Foo.OnBar> {
        public val RESPONSE_NAMES: List<String> = listOf("bar")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Foo.OnBar {
          var _bar: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _bar = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Foo.OnBar(
            bar = _bar!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Foo.OnBar,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("bar")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.bar)
        }
      }
    }
  }
}
