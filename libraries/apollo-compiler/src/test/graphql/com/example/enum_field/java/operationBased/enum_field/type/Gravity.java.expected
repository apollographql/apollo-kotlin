//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.enum_field.type;

import com.apollographql.apollo.api.EnumType;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Arrays;
import java.util.Objects;

public class Gravity {
  public static EnumType type = new EnumType("Gravity", Arrays.asList("TOP", "CENTER", "BOTTOM", "bottom", "is", "type", "String", "field"));

  public static Gravity TOP = new Gravity("TOP");

  public static Gravity CENTER = new Gravity("CENTER");

  public static Gravity BOTTOM = new Gravity("BOTTOM");

  public static Gravity bottom = new Gravity("bottom");

  public static Gravity is = new Gravity("is");

  public static Gravity type_ = new Gravity("type");

  public static Gravity String = new Gravity("String");

  public static Gravity field = new Gravity("field");

  public String rawValue;

  private Gravity(String rawValue) {
    this.rawValue = rawValue;
  }

  /**
   * Returns the Gravity that represents the specified rawValue.
   * Note: unknown values of rawValue will return UNKNOWN__. You may want to update your schema instead of calling this method directly.
   */
  @SuppressWarnings("deprecation")
  public static Gravity safeValueOf(String rawValue) {
    switch (Objects.requireNonNull(rawValue)) {
      case "TOP": return Gravity.TOP;
      case "CENTER": return Gravity.CENTER;
      case "BOTTOM": return Gravity.BOTTOM;
      case "bottom": return Gravity.bottom;
      case "is": return Gravity.is;
      case "type": return Gravity.type_;
      case "String": return Gravity.String;
      case "field": return Gravity.field;
      default: return new Gravity.UNKNOWN__(rawValue);
    }
  }

  /**
   * An enum value that wasn't known at compile time.
   */
  public static class UNKNOWN__ extends Gravity {
    private UNKNOWN__(String rawValue) {
      super(rawValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      if (!(other instanceof UNKNOWN__)) return false;
      return rawValue.equals(((UNKNOWN__) other).rawValue);
    }

    @Override
    public int hashCode() {
      return rawValue.hashCode();
    }

    @Override
    public String toString() {
      return "UNKNOWN__(" + rawValue + ")";
    }
  }
}
