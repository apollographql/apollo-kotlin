//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.enum_field.type;

import com.apollographql.apollo.api.EnumType;
import java.lang.Deprecated;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Arrays;
import java.util.Objects;

public enum GravityAsEnum {
  TOP("TOP"),

  CENTER("CENTER"),

  BOTTOM("BOTTOM"),

  /**
   * use BOTTOM instead
   * like BOTTOM but with different case instead
   */
  @Deprecated
  bottom("bottom"),

  is("is"),

  /**
   * a name that clashes with a Java reserved keyword
   */
  while_("while"),

  /**
   * a name that clashes with the generated `type` constant
   */
  type_("type"),

  /**
   * an enum value that clashes with the rawValue type
   */
  String("String"),

  field("field"),

  /**
   * Auto generated constant for unknown enum values
   */
  UNKNOWN__("UNKNOWN__");

  public static EnumType type = new EnumType("GravityAsEnum", Arrays.asList("TOP", "CENTER", "BOTTOM", "bottom", "is", "while", "type", "String", "field"));

  public String rawValue;

  private GravityAsEnum(String rawValue) {
    this.rawValue = rawValue;
  }

  /**
   * Returns the GravityAsEnum that represents the specified rawValue.
   * Note: unknown values of rawValue will return UNKNOWN__. You may want to update your schema instead of calling this method directly.
   */
  @SuppressWarnings("deprecation")
  public static GravityAsEnum safeValueOf(String rawValue) {
    switch (Objects.requireNonNull(rawValue)) {
      case "TOP": return GravityAsEnum.TOP;
      case "CENTER": return GravityAsEnum.CENTER;
      case "BOTTOM": return GravityAsEnum.BOTTOM;
      case "bottom": return GravityAsEnum.bottom;
      case "is": return GravityAsEnum.is;
      case "while": return GravityAsEnum.while_;
      case "type": return GravityAsEnum.type_;
      case "String": return GravityAsEnum.String;
      case "field": return GravityAsEnum.field;
      default: return GravityAsEnum.UNKNOWN__;
    }
  }
}
