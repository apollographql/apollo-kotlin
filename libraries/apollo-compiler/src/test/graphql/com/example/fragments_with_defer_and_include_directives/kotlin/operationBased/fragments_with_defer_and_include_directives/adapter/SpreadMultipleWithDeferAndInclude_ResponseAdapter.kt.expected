//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.and
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.label
import com.apollographql.apollo3.api.not
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.or
import com.apollographql.apollo3.api.possibleTypes
import com.apollographql.apollo3.api.variable
import com.example.fragments_with_defer_and_include_directives.SpreadMultipleWithDeferAndInclude
import com.example.fragments_with_defer_and_include_directives.fragment.DroidDetails
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object SpreadMultipleWithDeferAndInclude_ResponseAdapter {
  public object Data : Adapter<SpreadMultipleWithDeferAndInclude.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        SpreadMultipleWithDeferAndInclude.Data {
      var _hero: SpreadMultipleWithDeferAndInclude.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return SpreadMultipleWithDeferAndInclude.Data(
        hero = _hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: SpreadMultipleWithDeferAndInclude.Data,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    private object Hero : Adapter<SpreadMultipleWithDeferAndInclude.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          SpreadMultipleWithDeferAndInclude.Data.Hero {
        var __typename: String? = null

        val __path = reader.getPath()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _droidDetails: DroidDetails? = null
        if (and(possibleTypes("Droid"),or(variable("cond1"),not(variable("cond2")),label("b_first"),label("b_second"),and(label("b_third"),variable("cond3")),and(label("b_fourth"),not(variable("cond4"))))).evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, __path)) {
          reader.rewind()
          _droidDetails = com.example.fragments_with_defer_and_include_directives.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.fromJson(reader,
              customScalarAdapters)
        }

        return SpreadMultipleWithDeferAndInclude.Data.Hero(
          __typename = __typename,
          droidDetails = _droidDetails
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: SpreadMultipleWithDeferAndInclude.Data.Hero,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.droidDetails != null) {
          com.example.fragments_with_defer_and_include_directives.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.toJson(writer,
              customScalarAdapters, value.droidDetails)
        }
      }
    }
  }
}
