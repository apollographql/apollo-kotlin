//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BLabel;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.ScalarAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fragments_with_defer_and_include_directives.InlineSingleWithDefer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class InlineSingleWithDefer_ResponseAdapter {
  public enum Data implements ApolloAdapter<InlineSingleWithDefer.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public InlineSingleWithDefer.Data fromJson(JsonReader reader, ScalarAdapters scalarAdapters)
        throws IOException {
      InlineSingleWithDefer.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableAdapter<>(new ObjectAdapter<InlineSingleWithDefer.Hero>(Hero.INSTANCE, true)).fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      return new InlineSingleWithDefer.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters,
        InlineSingleWithDefer.Data value) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<InlineSingleWithDefer.Hero>(Hero.INSTANCE, true)).toJson(writer, scalarAdapters, value.hero);
    }
  }

  public enum Hero implements ApolloAdapter<InlineSingleWithDefer.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public InlineSingleWithDefer.Hero fromJson(JsonReader reader, ScalarAdapters scalarAdapters)
        throws IOException {
      String __typename = null;

      List<Object> __path = reader.getPath();
      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringApolloAdapter.fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      InlineSingleWithDefer.OnDroid _onDroid = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Element<BTerm>(new BLabel(null))), scalarAdapters.getAdapterContext().variables(), __typename, scalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        _onDroid = com.example.fragments_with_defer_and_include_directives.adapter.InlineSingleWithDefer_ResponseAdapter.OnDroid.INSTANCE.fromJson(reader, scalarAdapters);
      }

      return new InlineSingleWithDefer.Hero(
        __typename,
        _onDroid
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters,
        InlineSingleWithDefer.Hero value) throws IOException {
      writer.name("__typename");
      Adapters.StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename);

      if (value.onDroid != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineSingleWithDefer_ResponseAdapter.OnDroid.INSTANCE.toJson(writer, scalarAdapters, value.onDroid);
      }
    }
  }

  public enum OnDroid implements ApolloAdapter<InlineSingleWithDefer.OnDroid> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineSingleWithDefer.OnDroid fromJson(JsonReader reader, ScalarAdapters scalarAdapters)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringApolloAdapter.fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new InlineSingleWithDefer.OnDroid(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters,
        InlineSingleWithDefer.OnDroid value) throws IOException {
      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, scalarAdapters, value.name);
    }
  }
}
