//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter
import com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_VariablesAdapter
import com.example.fragments_with_defer_and_include_directives.selections.InlineMultipleWithDeferWithIfSelections
import kotlin.Boolean
import kotlin.String
import com.example.fragments_with_defer_and_include_directives.type.Query as CompiledQuery

public data class InlineMultipleWithDeferWithIf(
  public val cond: Boolean,
) : Query<InlineMultipleWithDeferWithIf.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    InlineMultipleWithDeferWithIf_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = InlineMultipleWithDeferWithIf_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = InlineMultipleWithDeferWithIfSelections.__root)
  .build()

  @ApolloAdaptableWith(InlineMultipleWithDeferWithIf_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
  ) : Query.Data {
    public data class Hero(
      public val __typename: String,
      /**
       * Synthetic field for inline fragment on Character
       */
      public val onCharacter: OnCharacter,
      /**
       * Synthetic field for inline fragment on Character
       */
      public val onCharacterDeferF_second: OnCharacterDeferF_second?,
      /**
       * Synthetic field for inline fragment on Character
       */
      public val onCharacterDeferF_third: OnCharacterDeferF_third?,
    ) {
      public data class OnCharacter(
        /**
         * The ID of the character
         */
        public val id: String,
      )

      public data class OnCharacterDeferF_second(
        /**
         * The name of the character
         */
        public val name: String,
      )

      public data class OnCharacterDeferF_third(
        /**
         * The name of the character
         */
        public val name: String,
      )
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "9dc79c78df7375c3d860d16df3ea839ea45c7f8420976f63414610d338f0caf1"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query InlineMultipleWithDeferWithIf($cond: Boolean!) {
     *   hero {
     *     __typename
     *     ... on Character @defer(label: "f_first", if: false) {
     *       id
     *     }
     *     ... on Character @defer(label: "f_second", if: true) {
     *       name
     *     }
     *     ... on Character @defer(label: "f_third", if: $cond) {
     *       name
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query InlineMultipleWithDeferWithIf(${'$'}cond: Boolean!) { hero { __typename ... on Character @defer(label: \"f_first\", if: false) { id } ... on Character @defer(label: \"f_second\", if: true) { name } ... on Character @defer(label: \"f_third\", if: ${'$'}cond) { name } } }"

    public const val OPERATION_NAME: String = "InlineMultipleWithDeferWithIf"
  }
}
