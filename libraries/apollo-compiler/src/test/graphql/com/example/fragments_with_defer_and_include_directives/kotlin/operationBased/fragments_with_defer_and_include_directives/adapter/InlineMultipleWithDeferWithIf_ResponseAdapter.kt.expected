//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.label
import com.apollographql.apollo3.api.not
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.or
import com.apollographql.apollo3.api.variable
import com.example.fragments_with_defer_and_include_directives.InlineMultipleWithDeferWithIf
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object InlineMultipleWithDeferWithIf_ResponseAdapter {
  public object Data : DataAdapter<InlineMultipleWithDeferWithIf.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): InlineMultipleWithDeferWithIf.Data {
      var _hero: InlineMultipleWithDeferWithIf.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return InlineMultipleWithDeferWithIf.Data(
        hero = _hero
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: InlineMultipleWithDeferWithIf.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().serializeData(writer, value.hero, context)
    }

    private object Hero : DataAdapter<InlineMultipleWithDeferWithIf.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): InlineMultipleWithDeferWithIf.Data.Hero {
        var __typename: String? = null

        val __path = reader.getPath()
        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        reader.rewind()
        val _onCharacter = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacter.deserializeData(reader,
            context)

        var _onCharacterDeferF_second: InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_second? = null
        if (label("f_second").evaluate(context.falseBooleanVariables, null, context, __path)) {
          reader.rewind()
          _onCharacterDeferF_second = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacterDeferF_second.deserializeData(reader,
              context)
        }

        var _onCharacterDeferF_third: InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_third? = null
        if (or(not(variable("cond")),label("f_third")).evaluate(context.falseBooleanVariables, null, context, __path)) {
          reader.rewind()
          _onCharacterDeferF_third = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacterDeferF_third.deserializeData(reader,
              context)
        }

        return InlineMultipleWithDeferWithIf.Data.Hero(
          __typename = __typename!!,
          onCharacter = _onCharacter,
          onCharacterDeferF_second = _onCharacterDeferF_second,
          onCharacterDeferF_third = _onCharacterDeferF_third
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: InlineMultipleWithDeferWithIf.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacter.serializeData(writer,
            value.onCharacter, context)

        if (value.onCharacterDeferF_second != null) {
          com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacterDeferF_second.serializeData(writer,
              value.onCharacterDeferF_second, context)
        }

        if (value.onCharacterDeferF_third != null) {
          com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.Data.Hero.OnCharacterDeferF_third.serializeData(writer,
              value.onCharacterDeferF_third, context)
        }
      }

      private object OnCharacter : DataAdapter<InlineMultipleWithDeferWithIf.Data.Hero.OnCharacter>
          {
        public val RESPONSE_NAMES: List<String> = listOf("id")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext):
            InlineMultipleWithDeferWithIf.Data.Hero.OnCharacter {
          var _id: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return InlineMultipleWithDeferWithIf.Data.Hero.OnCharacter(
            id = _id!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: InlineMultipleWithDeferWithIf.Data.Hero.OnCharacter,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("id")
          StringDataAdapter.serializeData(writer, value.id, context)
        }
      }

      private object OnCharacterDeferF_second :
          DataAdapter<InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_second> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext):
            InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_second {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_second(
            name = _name!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_second,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)
        }
      }

      private object OnCharacterDeferF_third :
          DataAdapter<InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_third> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext):
            InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_third {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_third(
            name = _name!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: InlineMultipleWithDeferWithIf.Data.Hero.OnCharacterDeferF_third,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)
        }
      }
    }
  }
}
