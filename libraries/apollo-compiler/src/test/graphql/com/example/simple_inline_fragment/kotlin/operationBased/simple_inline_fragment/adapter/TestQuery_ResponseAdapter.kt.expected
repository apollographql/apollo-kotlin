//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_inline_fragment.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableDoubleApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.simple_inline_fragment.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, scalarAdapters, value.hero)
    }

    private object Hero : ApolloAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Hero {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onCharacter = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.fromJson(reader,
            scalarAdapters)

        var _onHuman: TestQuery.Data.Hero.OnHuman? = null
        if (possibleTypes("Human").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.fromJson(reader,
              scalarAdapters)
        }

        var _onDroid: TestQuery.Data.Hero.OnDroid? = null
        if (possibleTypes("Droid").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onDroid = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.fromJson(reader,
              scalarAdapters)
        }

        return TestQuery.Data.Hero(
          __typename = __typename,
          onCharacter = _onCharacter,
          onHuman = _onHuman,
          onDroid = _onDroid
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Hero,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.toJson(writer,
            scalarAdapters, value.onCharacter)

        if (value.onHuman != null) {
          com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.toJson(writer,
              scalarAdapters, value.onHuman)
        }

        if (value.onDroid != null) {
          com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.toJson(writer,
              scalarAdapters, value.onDroid)
        }
      }

      private object OnCharacter : ApolloAdapter<TestQuery.Data.Hero.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Hero.OnCharacter {
          var __typename: String? = null
          var _id: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
              1 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          reader.rewind()
          val _onCharacter = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.OnCharacter.fromJson(reader,
              scalarAdapters)

          return TestQuery.Data.Hero.OnCharacter(
            __typename = __typename!!,
            id = _id!!,
            onCharacter = _onCharacter
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Hero.OnCharacter,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

          writer.name("id")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.id)

          com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.OnCharacter.toJson(writer,
              scalarAdapters, value.onCharacter)
        }

        private object OnCharacter : ApolloAdapter<TestQuery.Data.Hero.OnCharacter.OnCharacter> {
          public val RESPONSE_NAMES: List<String> = listOf("name")

          public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
              TestQuery.Data.Hero.OnCharacter.OnCharacter {
            var _name: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnCharacter.OnCharacter(
              name = _name!!
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            scalarAdapters: ScalarAdapters,
            `value`: TestQuery.Data.Hero.OnCharacter.OnCharacter,
          ): Unit {
            writer.name("name")
            StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
          }
        }
      }

      private object OnHuman : ApolloAdapter<TestQuery.Data.Hero.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("height")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Hero.OnHuman {
          var _height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _height = NullableDoubleApolloAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnHuman(
            height = _height
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Hero.OnHuman,
        ): Unit {
          writer.name("height")
          NullableDoubleApolloAdapter.toJson(writer, scalarAdapters, value.height)
        }
      }

      private object OnDroid : ApolloAdapter<TestQuery.Data.Hero.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("primaryFunction")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Hero.OnDroid {
          var _primaryFunction: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnDroid(
            primaryFunction = _primaryFunction
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Hero.OnDroid,
        ): Unit {
          writer.name("primaryFunction")
          NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.primaryFunction)
        }
      }
    }
  }
}
