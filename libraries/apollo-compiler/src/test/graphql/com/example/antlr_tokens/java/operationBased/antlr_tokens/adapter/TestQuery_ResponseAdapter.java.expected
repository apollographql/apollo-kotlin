//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.antlr_tokens.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.antlr_tokens.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("typeWithGraphQLKeywords");

    @Override
    public TestQuery.Data deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      TestQuery.TypeWithGraphQLKeywords _typeWithGraphQLKeywords = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _typeWithGraphQLKeywords = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.TypeWithGraphQLKeywords>(TypeWithGraphQLKeywords.INSTANCE, false)).deserializeComposite(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _typeWithGraphQLKeywords
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.Data value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("typeWithGraphQLKeywords");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.TypeWithGraphQLKeywords>(TypeWithGraphQLKeywords.INSTANCE, false)).serializeComposite(writer, value.typeWithGraphQLKeywords, context);
    }
  }

  public enum TypeWithGraphQLKeywords implements CompositeAdapter<TestQuery.TypeWithGraphQLKeywords> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("on", "null", "alias");

    @Override
    public TestQuery.TypeWithGraphQLKeywords deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      String _on = null;
      String _null = null;
      String _alias = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _on = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _null = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 2: _alias = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      return new TestQuery.TypeWithGraphQLKeywords(
        _on,
        _null,
        _alias
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.TypeWithGraphQLKeywords value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("on");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.on);

      writer.name("null");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.null_);

      writer.name("alias");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.alias);
    }
  }
}
