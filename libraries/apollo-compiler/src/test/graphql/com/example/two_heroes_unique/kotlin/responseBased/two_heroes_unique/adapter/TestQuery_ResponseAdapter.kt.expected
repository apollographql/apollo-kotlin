//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.two_heroes_unique.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.two_heroes_unique.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _r2: TestQuery.Data.R2? = null
      var _luke: TestQuery.Data.Luke? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _r2 = R2.obj().nullable().fromJson(reader, scalarAdapters)
          1 -> _luke = Luke.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        r2 = _r2,
        luke = _luke
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("r2")
      R2.obj().nullable().toJson(writer, scalarAdapters, value.r2)

      writer.name("luke")
      Luke.obj().nullable().toJson(writer, scalarAdapters, value.luke)
    }

    private object R2 : Adapter<TestQuery.Data.R2> {
      public val RESPONSE_NAMES: List<String> = listOf("name")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.R2 {
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _name = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.R2(
          name = _name!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.R2,
      ): Unit {
        writer.name("name")
        StringAdapter.toJson(writer, scalarAdapters, value.name)
      }
    }

    private object Luke : Adapter<TestQuery.Data.Luke> {
      public val RESPONSE_NAMES: List<String> = listOf("id", "name")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Luke {
        var _id: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Luke(
          id = _id!!,
          name = _name!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Luke,
      ): Unit {
        writer.name("id")
        StringAdapter.toJson(writer, scalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, scalarAdapters, value.name)
      }
    }
  }
}
