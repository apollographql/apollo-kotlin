//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("random")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _random: TestOperation.Random? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _random = Random.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        random = _random!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("random")
      Random.obj(true).toJson(writer, customScalarAdapters, value.random)
    }
  }

  public object Random : Adapter<TestOperation.Random> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Random {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asBeing: TestOperation.AsBeing? = null
      if (possibleTypes("Human","Wookie").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asBeing = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsBeing.fromJson(reader,
            customScalarAdapters)
      }

      var _asWookie2: TestOperation.AsWookie2? = null
      if (possibleTypes("Wookie").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asWookie2 = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie2.fromJson(reader,
            customScalarAdapters)
      }

      return TestOperation.Random(
        __typename = __typename,
        asBeing = _asBeing,
        asWookie2 = _asWookie2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Random,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asBeing != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsBeing.toJson(writer,
            customScalarAdapters, value.asBeing)
      }

      if (value.asWookie2 != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie2.toJson(writer,
            customScalarAdapters, value.asWookie2)
      }
    }
  }

  public object AsBeing : Adapter<TestOperation.AsBeing> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsBeing {
      var __typename: String? = null
      var _name: String? = null
      var _friends: List<TestOperation.Friend1>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _friends = Friend1.obj(true).list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asHuman: TestOperation.AsHuman? = null
      if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asHuman = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      return TestOperation.AsBeing(
        __typename = __typename,
        name = _name!!,
        friends = _friends!!,
        asHuman = _asHuman
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsBeing,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("friends")
      Friend1.obj(true).list().toJson(writer, customScalarAdapters, value.friends)

      if (value.asHuman != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }
    }
  }

  public object Friend1 : Adapter<TestOperation.Friend1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Friend1 {
      var __typename: String? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asWookie1: TestOperation.AsWookie1? = null
      if (possibleTypes("Wookie").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asWookie1 = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie1.fromJson(reader,
            customScalarAdapters)
      }

      return TestOperation.Friend1(
        __typename = __typename,
        name = _name!!,
        asWookie1 = _asWookie1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Friend1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      if (value.asWookie1 != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie1.toJson(writer,
            customScalarAdapters, value.asWookie1)
      }
    }
  }

  public object AsWookie1 : Adapter<TestOperation.AsWookie1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsWookie1 {
      var __typename: String? = null
      var _name: String? = null
      var _lifeExpectancy: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsWookie1(
        __typename = __typename!!,
        name = _name!!,
        lifeExpectancy = _lifeExpectancy
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsWookie1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("lifeExpectancy")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
    }
  }

  public object AsHuman : Adapter<TestOperation.AsHuman> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends",
        "profilePictureUrl")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsHuman {
      var __typename: String? = null
      var _name: String? = null
      var _friends: List<TestOperation.Friend>? = null
      var _profilePictureUrl: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _friends = Friend.obj(true).list().fromJson(reader, customScalarAdapters)
          3 -> _profilePictureUrl = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsHuman(
        __typename = __typename!!,
        name = _name!!,
        friends = _friends!!,
        profilePictureUrl = _profilePictureUrl
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsHuman,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("friends")
      Friend.obj(true).list().toJson(writer, customScalarAdapters, value.friends)

      writer.name("profilePictureUrl")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.profilePictureUrl)
    }
  }

  public object Friend : Adapter<TestOperation.Friend> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Friend {
      var __typename: String? = null
      var _name: String? = null
      var _isFamous: Boolean? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asWookie: TestOperation.AsWookie? = null
      if (possibleTypes("Wookie").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie.fromJson(reader,
            customScalarAdapters)
      }

      return TestOperation.Friend(
        __typename = __typename,
        name = _name!!,
        isFamous = _isFamous,
        asWookie = _asWookie
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Friend,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("isFamous")
      NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

      if (value.asWookie != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.AsWookie.toJson(writer,
            customScalarAdapters, value.asWookie)
      }
    }
  }

  public object AsWookie : Adapter<TestOperation.AsWookie> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous",
        "lifeExpectancy", "race")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsWookie {
      var __typename: String? = null
      var _name: String? = null
      var _isFamous: Boolean? = null
      var _lifeExpectancy: Double? = null
      var _race: Race? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
          3 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          4 -> _race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsWookie(
        __typename = __typename!!,
        name = _name!!,
        isFamous = _isFamous,
        lifeExpectancy = _lifeExpectancy,
        race = _race!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsWookie,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("isFamous")
      NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

      writer.name("lifeExpectancy")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)

      writer.name("race")
      Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)
    }
  }

  public object AsWookie2 : Adapter<TestOperation.AsWookie2> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "race", "friends")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.AsWookie2 {
      var __typename: String? = null
      var _race: Race? = null
      var _friends: List<TestOperation.Friend2>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
          2 -> _friends = Friend2.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.AsWookie2(
        __typename = __typename!!,
        race = _race!!,
        friends = _friends!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.AsWookie2,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("race")
      Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)

      writer.name("friends")
      Friend2.obj().list().toJson(writer, customScalarAdapters, value.friends)
    }
  }

  public object Friend2 : Adapter<TestOperation.Friend2> {
    public val RESPONSE_NAMES: List<String> = listOf("lifeExpectancy")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Friend2 {
      var _lifeExpectancy: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Friend2(
        lifeExpectancy = _lifeExpectancy
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Friend2,
    ): Unit {
      writer.name("lifeExpectancy")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
    }
  }
}
