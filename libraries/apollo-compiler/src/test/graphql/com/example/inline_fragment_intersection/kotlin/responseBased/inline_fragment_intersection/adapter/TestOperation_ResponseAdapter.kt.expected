//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableBooleanAdapter
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("random")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data {
      var _random: TestOperation.Data.Random? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _random = Random.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        random = _random ?: missingField(reader, "random")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ) {
      writer.name("random")
      Random.obj().toJson(writer, customScalarAdapters, value.random)
    }

    private object Random : Adapter<TestOperation.Data.Random> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Random {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> BeingHumanRandom.fromJson(reader, customScalarAdapters, __typename)
          "Wookie",
          -> BeingWookieRandom.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherRandom.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Random,
      ) {
        when(value) {
          is TestOperation.Data.BeingHumanRandom -> BeingHumanRandom.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.BeingWookieRandom -> BeingWookieRandom.toJson(writer, customScalarAdapters, value)
          is TestOperation.Data.OtherRandom -> OtherRandom.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object BeingHumanRandom {
      public val RESPONSE_NAMES: List<String> =
          listOf("__typename", "name", "friends", "profilePictureUrl")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.BeingHumanRandom {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestOperation.Data.BeingHumanRandom.Friend>? = null
        var _profilePictureUrl: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friends = Friend.obj().list().fromJson(reader, customScalarAdapters)
            3 -> _profilePictureUrl = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.BeingHumanRandom(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friends = _friends ?: missingField(reader, "friends"),
          profilePictureUrl = _profilePictureUrl
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.BeingHumanRandom,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().list().toJson(writer, customScalarAdapters, value.friends)

        writer.name("profilePictureUrl")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.profilePictureUrl)
      }

      private object Friend : Adapter<TestOperation.Data.BeingHumanRandom.Friend> {
        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.BeingHumanRandom.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingHumanRandom.Friend,
        ) {
          when(value) {
            is TestOperation.Data.BeingHumanRandom.WookieFriend -> WookieFriend.toJson(writer, customScalarAdapters, value)
            is TestOperation.Data.BeingHumanRandom.OtherFriend -> OtherFriend.toJson(writer, customScalarAdapters, value)
          }
        }
      }

      public object WookieFriend {
        public val RESPONSE_NAMES: List<String> =
            listOf("__typename", "name", "lifeExpectancy", "isFamous", "race")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.BeingHumanRandom.WookieFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null
          var _isFamous: Boolean? = null
          var _race: Race? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              3 -> _isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
              4 -> _race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.BeingHumanRandom.WookieFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            lifeExpectancy = _lifeExpectancy,
            isFamous = _isFamous,
            race = _race ?: missingField(reader, "race")
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingHumanRandom.WookieFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("lifeExpectancy")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)

          writer.name("isFamous")
          NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)

          writer.name("race")
          Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.BeingHumanRandom.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _isFamous: Boolean? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _isFamous = NullableBooleanAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.BeingHumanRandom.OtherFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            isFamous = _isFamous
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingHumanRandom.OtherFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("isFamous")
          NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous)
        }
      }
    }

    public object BeingWookieRandom {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends", "race")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.BeingWookieRandom {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestOperation.Data.BeingWookieRandom.Friend>? = null
        var _race: Race? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friends = Friend.obj().list().fromJson(reader, customScalarAdapters)
            3 -> _race = Race_ResponseAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.BeingWookieRandom(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friends = _friends ?: missingField(reader, "friends"),
          race = _race ?: missingField(reader, "race")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.BeingWookieRandom,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().list().toJson(writer, customScalarAdapters, value.friends)

        writer.name("race")
        Race_ResponseAdapter.toJson(writer, customScalarAdapters, value.race)
      }

      private object Friend : Adapter<TestOperation.Data.BeingWookieRandom.Friend> {
        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestOperation.Data.BeingWookieRandom.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingWookieRandom.Friend,
        ) {
          when(value) {
            is TestOperation.Data.BeingWookieRandom.WookieFriend -> WookieFriend.toJson(writer, customScalarAdapters, value)
            is TestOperation.Data.BeingWookieRandom.OtherFriend -> OtherFriend.toJson(writer, customScalarAdapters, value)
          }
        }
      }

      public object WookieFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.BeingWookieRandom.WookieFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.BeingWookieRandom.WookieFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            lifeExpectancy = _lifeExpectancy
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingWookieRandom.WookieFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("lifeExpectancy")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestOperation.Data.BeingWookieRandom.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _lifeExpectancy = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.BeingWookieRandom.OtherFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            lifeExpectancy = _lifeExpectancy
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.BeingWookieRandom.OtherFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("lifeExpectancy")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy)
        }
      }
    }

    public object OtherRandom {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.OtherRandom {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.OtherRandom(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.OtherRandom,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
