//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableBooleanApolloAdapter
import com.apollographql.apollo3.api.NullableDoubleApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_intersection.TestOperation
import com.example.inline_fragment_intersection.type.Race
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : ApolloAdapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("random")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestOperation.Data {
      var _random: TestOperation.Data.Random? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _random = Random.obj().fromJson(reader, context)
          else -> break
        }
      }

      return TestOperation.Data(
        random = _random!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestOperation.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("random")
      Random.obj().toJson(writer, value.random, context)
    }

    private object Random : ApolloAdapter<TestOperation.Data.Random> {
      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestOperation.Data.Random {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> BeingHumanRandom.fromJson(reader, context, __typename)
          "Wookie",
          -> BeingWookieRandom.fromJson(reader, context, __typename)
          else
          -> OtherRandom.fromJson(reader, context, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestOperation.Data.Random,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        when(value) {
          is TestOperation.Data.BeingHumanRandom -> BeingHumanRandom.toJson(writer, value, context)
          is TestOperation.Data.BeingWookieRandom -> BeingWookieRandom.toJson(writer, value,
              context)
          is TestOperation.Data.OtherRandom -> OtherRandom.toJson(writer, value, context)
        }
      }
    }

    public object BeingHumanRandom {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends",
          "profilePictureUrl")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestOperation.Data.BeingHumanRandom {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestOperation.Data.BeingHumanRandom.Friend>? = null
        var _profilePictureUrl: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _name = StringApolloAdapter.fromJson(reader, context)
            2 -> _friends = Friend.obj().list().fromJson(reader, context)
            3 -> _profilePictureUrl = NullableStringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestOperation.Data.BeingHumanRandom(
          __typename = __typename!!,
          name = _name!!,
          friends = _friends!!,
          profilePictureUrl = _profilePictureUrl
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestOperation.Data.BeingHumanRandom,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("friends")
        Friend.obj().list().toJson(writer, value.friends, context)

        writer.name("profilePictureUrl")
        NullableStringApolloAdapter.toJson(writer, value.profilePictureUrl, context)
      }

      private object Friend : ApolloAdapter<TestOperation.Data.BeingHumanRandom.Friend> {
        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext):
            TestOperation.Data.BeingHumanRandom.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromJson(reader, context, __typename)
            else
            -> OtherFriend.fromJson(reader, context, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingHumanRandom.Friend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          when(value) {
            is TestOperation.Data.BeingHumanRandom.WookieFriend -> WookieFriend.toJson(writer,
                value, context)
            is TestOperation.Data.BeingHumanRandom.OtherFriend -> OtherFriend.toJson(writer, value,
                context)
          }
        }
      }

      public object WookieFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy",
            "isFamous", "race")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): TestOperation.Data.BeingHumanRandom.WookieFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null
          var _isFamous: Boolean? = null
          var _race: Race? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              1 -> _name = StringApolloAdapter.fromJson(reader, context)
              2 -> _lifeExpectancy = NullableDoubleApolloAdapter.fromJson(reader, context)
              3 -> _isFamous = NullableBooleanApolloAdapter.fromJson(reader, context)
              4 -> _race = Race_ResponseAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestOperation.Data.BeingHumanRandom.WookieFriend(
            __typename = __typename!!,
            name = _name!!,
            lifeExpectancy = _lifeExpectancy,
            isFamous = _isFamous,
            race = _race!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingHumanRandom.WookieFriend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          writer.name("lifeExpectancy")
          NullableDoubleApolloAdapter.toJson(writer, value.lifeExpectancy, context)

          writer.name("isFamous")
          NullableBooleanApolloAdapter.toJson(writer, value.isFamous, context)

          writer.name("race")
          Race_ResponseAdapter.toJson(writer, value.race, context)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "isFamous")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): TestOperation.Data.BeingHumanRandom.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _isFamous: Boolean? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              1 -> _name = StringApolloAdapter.fromJson(reader, context)
              2 -> _isFamous = NullableBooleanApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestOperation.Data.BeingHumanRandom.OtherFriend(
            __typename = __typename!!,
            name = _name!!,
            isFamous = _isFamous
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingHumanRandom.OtherFriend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          writer.name("isFamous")
          NullableBooleanApolloAdapter.toJson(writer, value.isFamous, context)
        }
      }
    }

    public object BeingWookieRandom {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends", "race")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestOperation.Data.BeingWookieRandom {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestOperation.Data.BeingWookieRandom.Friend>? = null
        var _race: Race? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _name = StringApolloAdapter.fromJson(reader, context)
            2 -> _friends = Friend.obj().list().fromJson(reader, context)
            3 -> _race = Race_ResponseAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestOperation.Data.BeingWookieRandom(
          __typename = __typename!!,
          name = _name!!,
          friends = _friends!!,
          race = _race!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestOperation.Data.BeingWookieRandom,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("friends")
        Friend.obj().list().toJson(writer, value.friends, context)

        writer.name("race")
        Race_ResponseAdapter.toJson(writer, value.race, context)
      }

      private object Friend : ApolloAdapter<TestOperation.Data.BeingWookieRandom.Friend> {
        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext):
            TestOperation.Data.BeingWookieRandom.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Wookie",
            -> WookieFriend.fromJson(reader, context, __typename)
            else
            -> OtherFriend.fromJson(reader, context, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingWookieRandom.Friend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          when(value) {
            is TestOperation.Data.BeingWookieRandom.WookieFriend -> WookieFriend.toJson(writer,
                value, context)
            is TestOperation.Data.BeingWookieRandom.OtherFriend -> OtherFriend.toJson(writer, value,
                context)
          }
        }
      }

      public object WookieFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): TestOperation.Data.BeingWookieRandom.WookieFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              1 -> _name = StringApolloAdapter.fromJson(reader, context)
              2 -> _lifeExpectancy = NullableDoubleApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestOperation.Data.BeingWookieRandom.WookieFriend(
            __typename = __typename!!,
            name = _name!!,
            lifeExpectancy = _lifeExpectancy
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingWookieRandom.WookieFriend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          writer.name("lifeExpectancy")
          NullableDoubleApolloAdapter.toJson(writer, value.lifeExpectancy, context)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "lifeExpectancy")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): TestOperation.Data.BeingWookieRandom.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _lifeExpectancy: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              1 -> _name = StringApolloAdapter.fromJson(reader, context)
              2 -> _lifeExpectancy = NullableDoubleApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestOperation.Data.BeingWookieRandom.OtherFriend(
            __typename = __typename!!,
            name = _name!!,
            lifeExpectancy = _lifeExpectancy
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestOperation.Data.BeingWookieRandom.OtherFriend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          writer.name("lifeExpectancy")
          NullableDoubleApolloAdapter.toJson(writer, value.lifeExpectancy, context)
        }
      }
    }

    public object OtherRandom {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestOperation.Data.OtherRandom {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestOperation.Data.OtherRandom(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestOperation.Data.OtherRandom,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)
      }
    }
  }
}
