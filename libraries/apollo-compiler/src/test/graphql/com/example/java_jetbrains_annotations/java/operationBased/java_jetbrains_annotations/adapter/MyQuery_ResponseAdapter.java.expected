//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_jetbrains_annotations.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_jetbrains_annotations.MyQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public class MyQuery_ResponseAdapter {
  public enum Data implements DataAdapter<MyQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt", "nullableMyType", "nonNullableMyType", "nullableListOfNullableString", "nullableListOfNonNullableString");

    @Override
    public MyQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;
      MyQuery.NullableMyType _nullableMyType = null;
      MyQuery.NonNullableMyType _nonNullableMyType = null;
      List<@Nullable String> _nullableListOfNullableString = null;
      List<@NotNull String> _nullableListOfNonNullableString = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 2: _nullableMyType = new NullableDataAdapter<>(new ObjectDataAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).deserializeData(reader, context); break;
          case 3: _nonNullableMyType = new ObjectDataAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).deserializeData(reader, context); break;
          case 4: _nullableListOfNullableString = new NullableAdapter<>(new ListAdapter<>(Adapters.NullableStringAdapter)).fromJson(reader, CustomScalarAdapters.Empty); break;
          case 5: _nullableListOfNonNullableString = new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");
      Assertions.checkFieldNotMissing(_nonNullableMyType, "nonNullableMyType");

      return new MyQuery.Data(
        _nullableInt,
        _nonNullableInt,
        _nullableMyType,
        _nonNullableMyType,
        _nullableListOfNullableString,
        _nullableListOfNonNullableString
      );
    }

    @Override
    public void serializeData(JsonWriter writer, MyQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);

      writer.name("nullableMyType");
      new NullableDataAdapter<>(new ObjectDataAdapter<MyQuery.NullableMyType>(NullableMyType.INSTANCE, false)).serializeData(writer, value.nullableMyType, context);

      writer.name("nonNullableMyType");
      new ObjectDataAdapter<MyQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).serializeData(writer, value.nonNullableMyType, context);

      writer.name("nullableListOfNullableString");
      new NullableAdapter<>(new ListAdapter<>(Adapters.NullableStringAdapter)).toJson(writer, CustomScalarAdapters.Empty, value.nullableListOfNullableString);

      writer.name("nullableListOfNonNullableString");
      new NullableAdapter<>(new ListAdapter<>(Adapters.StringAdapter)).toJson(writer, CustomScalarAdapters.Empty, value.nullableListOfNonNullableString);
    }
  }

  public enum NullableMyType implements DataAdapter<MyQuery.NullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NullableMyType deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void serializeData(JsonWriter writer, MyQuery.NullableMyType value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);
    }
  }

  public enum NonNullableMyType implements DataAdapter<MyQuery.NonNullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public MyQuery.NonNullableMyType deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new MyQuery.NonNullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void serializeData(JsonWriter writer, MyQuery.NonNullableMyType value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.nonNullableInt);
    }
  }
}
