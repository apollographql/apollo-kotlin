//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.two_heroes_with_friends.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableIntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.two_heroes_with_friends.TestQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _r2: TestQuery.Data.R2? = null
      var _luke: TestQuery.Data.Luke? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _r2 = R2.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _luke = Luke.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        r2 = _r2,
        luke = _luke
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("r2")
      R2.obj().nullable().toJson(writer, customScalarAdapters, value.r2)

      writer.name("luke")
      Luke.obj().nullable().toJson(writer, customScalarAdapters, value.luke)
    }

    private object R2 : Adapter<TestQuery.Data.R2> {
      public val RESPONSE_NAMES: List<String> = listOf("name", "friendsConnection")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.R2 {
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.R2.FriendsConnection? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.R2(
          name = _name!!,
          friendsConnection = _friendsConnection!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.R2,
      ): Unit {
        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.R2.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.R2.FriendsConnection {
          var _totalCount: Int? = null
          var _edges: List<TestQuery.Data.R2.FriendsConnection.Edge?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _totalCount = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.R2.FriendsConnection(
            totalCount = _totalCount,
            edges = _edges
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.R2.FriendsConnection,
        ): Unit {
          writer.name("totalCount")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.R2.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.R2.FriendsConnection.Edge {
            var _node: TestQuery.Data.R2.FriendsConnection.Edge.Node? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.R2.FriendsConnection.Edge(
              node = _node
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.R2.FriendsConnection.Edge,
          ): Unit {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.R2.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.R2.FriendsConnection.Edge.Node {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.R2.FriendsConnection.Edge.Node(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.R2.FriendsConnection.Edge.Node,
            ): Unit {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }

    private object Luke : Adapter<TestQuery.Data.Luke> {
      public val RESPONSE_NAMES: List<String> = listOf("id", "name", "friendsConnection")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Luke {
        var _id: String? = null
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.Luke.FriendsConnection? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Luke(
          id = _id!!,
          name = _name!!,
          friendsConnection = _friendsConnection!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Luke,
      ): Unit {
        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.Luke.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("totalCount", "edges")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Luke.FriendsConnection {
          var _totalCount: Int? = null
          var _edges: List<TestQuery.Data.Luke.FriendsConnection.Edge?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _totalCount = NullableIntAdapter.fromJson(reader, customScalarAdapters)
              1 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Luke.FriendsConnection(
            totalCount = _totalCount,
            edges = _edges
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Luke.FriendsConnection,
        ): Unit {
          writer.name("totalCount")
          NullableIntAdapter.toJson(writer, customScalarAdapters, value.totalCount)

          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.Luke.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Luke.FriendsConnection.Edge {
            var _node: TestQuery.Data.Luke.FriendsConnection.Edge.Node? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Luke.FriendsConnection.Edge(
              node = _node
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Luke.FriendsConnection.Edge,
          ): Unit {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.Luke.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Luke.FriendsConnection.Edge.Node {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Luke.FriendsConnection.Edge.Node(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Luke.FriendsConnection.Edge.Node,
            ): Unit {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }
  }
}
