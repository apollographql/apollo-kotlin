//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters, value.search)
    }

    private object Search : Adapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onCharacter: TestQuery.Data.Search.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.fromJson(reader, customScalarAdapters)
        }

        var _onStarship: TestQuery.Data.Search.OnStarship? = null
        if (possibleTypes("Starship").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onStarship = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.fromJson(reader, customScalarAdapters)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onCharacter = _onCharacter,
          onStarship = _onStarship
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Search,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.toJson(writer, customScalarAdapters, value.onCharacter)
        }

        if (value.onStarship != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.toJson(writer, customScalarAdapters, value.onStarship)
        }
      }

      private object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("id", "name", "friends")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter {
          var _id: String? = null
          var _name: String? = null
          var _friends: List<TestQuery.Data.Search.OnCharacter.Friend?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _friends = Friend.obj(true).nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnCharacter(
            id = _id ?: missingField(reader, "id"),
            name = _name ?: missingField(reader, "name"),
            friends = _friends
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Search.OnCharacter,
        ) {
          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("friends")
          Friend.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
        }

        private object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend {
            var __typename: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.fromJson(reader, customScalarAdapters)

            var _onHuman: TestQuery.Data.Search.OnCharacter.Friend.OnHuman? = null
            if (possibleTypes("Human").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
              reader.rewind()
              _onHuman = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.fromJson(reader, customScalarAdapters)
            }

            var _onDroid: TestQuery.Data.Search.OnCharacter.Friend.OnDroid? = null
            if (possibleTypes("Droid").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
              reader.rewind()
              _onDroid = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.fromJson(reader, customScalarAdapters)
            }

            return TestQuery.Data.Search.OnCharacter.Friend(
              __typename = __typename,
              onCharacter = _onCharacter,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Search.OnCharacter.Friend,
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.toJson(writer, customScalarAdapters, value.onCharacter)

            if (value.onHuman != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.toJson(writer, customScalarAdapters, value.onHuman)
            }

            if (value.onDroid != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.toJson(writer, customScalarAdapters, value.onDroid)
            }
          }

          private object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnCharacter> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnCharacter {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnCharacter(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnCharacter,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }

          private object OnHuman : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman> {
            public val RESPONSE_NAMES: List<String> = listOf("homePlanet", "friends")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnHuman {
              var _homePlanet: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend?>? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> _friends = Friend.obj(true).nullable().list().nullable().fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnHuman(
                homePlanet = _homePlanet,
                friends = _friends
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman,
            ) {
              writer.name("homePlanet")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

              writer.name("friends")
              Friend.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
            }

            private object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("__typename")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend {
                var __typename: String? = null

                while (true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }

                reader.rewind()
                val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.fromJson(reader, customScalarAdapters)

                return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend(
                  __typename = __typename ?: missingField(reader, "__typename"),
                  onCharacter = _onCharacter
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend,
              ) {
                writer.name("__typename")
                StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

                com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.toJson(writer, customScalarAdapters, value.onCharacter)
              }

              private object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter> {
                public val RESPONSE_NAMES: List<String> = listOf("firstAppearsIn")

                override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter {
                  var _firstAppearsIn: Episode? = null

                  while (true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> _firstAppearsIn = Episode_ResponseAdapter.fromJson(reader, customScalarAdapters)
                      else -> break
                    }
                  }

                  return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter(
                    firstAppearsIn = _firstAppearsIn ?: missingField(reader, "firstAppearsIn")
                  )
                }

                override fun toJson(
                  writer: JsonWriter,
                  customScalarAdapters: CustomScalarAdapters,
                  `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter,
                ) {
                  writer.name("firstAppearsIn")
                  Episode_ResponseAdapter.toJson(writer, customScalarAdapters, value.firstAppearsIn)
                }
              }
            }
          }

          private object OnDroid : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid> {
            public val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

            override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnDroid {
              var _primaryFunction: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend?>? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                  1 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnDroid(
                primaryFunction = _primaryFunction,
                friends = _friends
              )
            }

            override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid,
            ) {
              writer.name("primaryFunction")
              NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

              writer.name("friends")
              Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
            }

            private object Friend : Adapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("id")

              override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend {
                var _id: String? = null

                while (true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }

                return TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend(
                  id = _id ?: missingField(reader, "id")
                )
              }

              override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend,
              ) {
                writer.name("id")
                StringAdapter.toJson(writer, customScalarAdapters, value.id)
              }
            }
          }
        }
      }

      private object OnStarship : Adapter<TestQuery.Data.Search.OnStarship> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnStarship {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnStarship(
            name = _name ?: missingField(reader, "name")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Search.OnStarship,
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
