//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().deserializeData(reader,
              context)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().serializeData(writer, value.search, context)
    }

    private object Search : DataAdapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Search {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onCharacter: TestQuery.Data.Search.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.deserializeData(reader,
              context)
        }

        var _onStarship: TestQuery.Data.Search.OnStarship? = null
        if (possibleTypes("Starship").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onStarship = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.deserializeData(reader,
              context)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onCharacter = _onCharacter,
          onStarship = _onStarship
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Search,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        if (value.onCharacter != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.serializeData(writer,
              value.onCharacter, context)
        }

        if (value.onStarship != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.serializeData(writer,
              value.onStarship, context)
        }
      }

      private object OnCharacter : DataAdapter<TestQuery.Data.Search.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("id", "name", "friends")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Search.OnCharacter {
          var _id: String? = null
          var _name: String? = null
          var _friends: List<TestQuery.Data.Search.OnCharacter.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              2 -> _friends = Friend.obj(true).nullable().list().nullable().deserializeData(reader,
                  context)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnCharacter(
            id = _id!!,
            name = _name!!,
            friends = _friends
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Search.OnCharacter,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("id")
          StringDataAdapter.serializeData(writer, value.id, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)

          writer.name("friends")
          Friend.obj(true).nullable().list().nullable().serializeData(writer, value.friends,
              context)
        }

        private object Friend : DataAdapter<TestQuery.Data.Search.OnCharacter.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext):
              TestQuery.Data.Search.OnCharacter.Friend {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringDataAdapter.deserializeData(reader, context)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.deserializeData(reader,
                context)

            var _onHuman: TestQuery.Data.Search.OnCharacter.Friend.OnHuman? = null
            if (possibleTypes("Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
              reader.rewind()
              _onHuman = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.deserializeData(reader,
                  context)
            }

            var _onDroid: TestQuery.Data.Search.OnCharacter.Friend.OnDroid? = null
            if (possibleTypes("Droid").evaluate(context.falseBooleanVariables, __typename, context, null)) {
              reader.rewind()
              _onDroid = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.deserializeData(reader,
                  context)
            }

            return TestQuery.Data.Search.OnCharacter.Friend(
              __typename = __typename,
              onCharacter = _onCharacter,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Search.OnCharacter.Friend,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("__typename")
            StringDataAdapter.serializeData(writer, value.__typename, context)

            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.serializeData(writer,
                value.onCharacter, context)

            if (value.onHuman != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.serializeData(writer,
                  value.onHuman, context)
            }

            if (value.onDroid != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.serializeData(writer,
                  value.onDroid, context)
            }
          }

          private object OnCharacter :
              DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnCharacter> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun deserializeData(reader: JsonReader,
                context: DataAdapter.DeserializeDataContext):
                TestQuery.Data.Search.OnCharacter.Friend.OnCharacter {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringDataAdapter.deserializeData(reader, context)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnCharacter(
                name = _name!!
              )
            }

            public override fun serializeData(
              writer: JsonWriter,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnCharacter,
              context: DataAdapter.SerializeDataContext,
            ): Unit {
              writer.name("name")
              StringDataAdapter.serializeData(writer, value.name, context)
            }
          }

          private object OnHuman : DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman> {
            public val RESPONSE_NAMES: List<String> = listOf("homePlanet", "friends")

            public override fun deserializeData(reader: JsonReader,
                context: DataAdapter.DeserializeDataContext):
                TestQuery.Data.Search.OnCharacter.Friend.OnHuman {
              var _homePlanet: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend?>? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _homePlanet = NullableStringDataAdapter.deserializeData(reader, context)
                  1 -> _friends = Friend.obj(true).nullable().list().nullable().deserializeData(reader,
                      context)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnHuman(
                homePlanet = _homePlanet,
                friends = _friends
              )
            }

            public override fun serializeData(
              writer: JsonWriter,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman,
              context: DataAdapter.SerializeDataContext,
            ): Unit {
              writer.name("homePlanet")
              NullableStringDataAdapter.serializeData(writer, value.homePlanet, context)

              writer.name("friends")
              Friend.obj(true).nullable().list().nullable().serializeData(writer, value.friends,
                  context)
            }

            private object Friend :
                DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("__typename")

              public override fun deserializeData(reader: JsonReader,
                  context: DataAdapter.DeserializeDataContext):
                  TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend {
                var __typename: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringDataAdapter.deserializeData(reader, context)
                    else -> break
                  }
                }

                reader.rewind()
                val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.deserializeData(reader,
                    context)

                return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend(
                  __typename = __typename!!,
                  onCharacter = _onCharacter
                )
              }

              public override fun serializeData(
                writer: JsonWriter,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend,
                context: DataAdapter.SerializeDataContext,
              ): Unit {
                writer.name("__typename")
                StringDataAdapter.serializeData(writer, value.__typename, context)

                com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.serializeData(writer,
                    value.onCharacter, context)
              }

              private object OnCharacter :
                  DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter> {
                public val RESPONSE_NAMES: List<String> = listOf("firstAppearsIn")

                public override fun deserializeData(reader: JsonReader,
                    context: DataAdapter.DeserializeDataContext):
                    TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter {
                  var _firstAppearsIn: Episode? = null

                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> _firstAppearsIn = Episode_ResponseAdapter.deserializeData(reader,
                          context)
                      else -> break
                    }
                  }

                  return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter(
                    firstAppearsIn = _firstAppearsIn!!
                  )
                }

                public override fun serializeData(
                  writer: JsonWriter,
                  `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter,
                  context: DataAdapter.SerializeDataContext,
                ): Unit {
                  writer.name("firstAppearsIn")
                  Episode_ResponseAdapter.serializeData(writer, value.firstAppearsIn, context)
                }
              }
            }
          }

          private object OnDroid : DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid> {
            public val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

            public override fun deserializeData(reader: JsonReader,
                context: DataAdapter.DeserializeDataContext):
                TestQuery.Data.Search.OnCharacter.Friend.OnDroid {
              var _primaryFunction: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend?>? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
                  1 -> _friends = Friend.obj().nullable().list().nullable().deserializeData(reader,
                      context)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnDroid(
                primaryFunction = _primaryFunction,
                friends = _friends
              )
            }

            public override fun serializeData(
              writer: JsonWriter,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid,
              context: DataAdapter.SerializeDataContext,
            ): Unit {
              writer.name("primaryFunction")
              NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)

              writer.name("friends")
              Friend.obj().nullable().list().nullable().serializeData(writer, value.friends,
                  context)
            }

            private object Friend :
                DataAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("id")

              public override fun deserializeData(reader: JsonReader,
                  context: DataAdapter.DeserializeDataContext):
                  TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend {
                var _id: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> _id = StringDataAdapter.deserializeData(reader, context)
                    else -> break
                  }
                }

                return TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend(
                  id = _id!!
                )
              }

              public override fun serializeData(
                writer: JsonWriter,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend,
                context: DataAdapter.SerializeDataContext,
              ): Unit {
                writer.name("id")
                StringDataAdapter.serializeData(writer, value.id, context)
              }
            }
          }
        }
      }

      private object OnStarship : DataAdapter<TestQuery.Data.Search.OnStarship> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Search.OnStarship {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnStarship(
            name = _name!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Search.OnStarship,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)
        }
      }
    }
  }
}
