//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, scalarAdapters, value.search)
    }

    private object Search : ApolloAdapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Search {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onCharacter: TestQuery.Data.Search.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.fromJson(reader,
              scalarAdapters)
        }

        var _onStarship: TestQuery.Data.Search.OnStarship? = null
        if (possibleTypes("Starship").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onStarship = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.fromJson(reader,
              scalarAdapters)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onCharacter = _onCharacter,
          onStarship = _onStarship
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Search,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.toJson(writer,
              scalarAdapters, value.onCharacter)
        }

        if (value.onStarship != null) {
          com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnStarship.toJson(writer,
              scalarAdapters, value.onStarship)
        }
      }

      private object OnCharacter : ApolloAdapter<TestQuery.Data.Search.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("id", "name", "friends")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Search.OnCharacter {
          var _id: String? = null
          var _name: String? = null
          var _friends: List<TestQuery.Data.Search.OnCharacter.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
              1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
              2 -> _friends = Friend.obj(true).nullable().list().nullable().fromJson(reader,
                  scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnCharacter(
            id = _id!!,
            name = _name!!,
            friends = _friends
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Search.OnCharacter,
        ): Unit {
          writer.name("id")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.id)

          writer.name("name")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

          writer.name("friends")
          Friend.obj(true).nullable().list().nullable().toJson(writer, scalarAdapters,
              value.friends)
        }

        private object Friend : ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
              TestQuery.Data.Search.OnCharacter.Friend {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.fromJson(reader,
                scalarAdapters)

            var _onHuman: TestQuery.Data.Search.OnCharacter.Friend.OnHuman? = null
            if (possibleTypes("Human").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onHuman = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.fromJson(reader,
                  scalarAdapters)
            }

            var _onDroid: TestQuery.Data.Search.OnCharacter.Friend.OnDroid? = null
            if (possibleTypes("Droid").evaluate(scalarAdapters.adapterContext.variables(), __typename, scalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onDroid = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.fromJson(reader,
                  scalarAdapters)
            }

            return TestQuery.Data.Search.OnCharacter.Friend(
              __typename = __typename,
              onCharacter = _onCharacter,
              onHuman = _onHuman,
              onDroid = _onDroid
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            scalarAdapters: ScalarAdapters,
            `value`: TestQuery.Data.Search.OnCharacter.Friend,
          ): Unit {
            writer.name("__typename")
            StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

            com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnCharacter.toJson(writer,
                scalarAdapters, value.onCharacter)

            if (value.onHuman != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.toJson(writer,
                  scalarAdapters, value.onHuman)
            }

            if (value.onDroid != null) {
              com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnDroid.toJson(writer,
                  scalarAdapters, value.onDroid)
            }
          }

          private object OnCharacter :
              ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnCharacter> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnCharacter {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnCharacter(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              scalarAdapters: ScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnCharacter,
            ): Unit {
              writer.name("name")
              StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
            }
          }

          private object OnHuman : ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman> {
            public val RESPONSE_NAMES: List<String> = listOf("homePlanet", "friends")

            public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnHuman {
              var _homePlanet: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend?>? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _homePlanet = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
                  1 -> _friends = Friend.obj(true).nullable().list().nullable().fromJson(reader,
                      scalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnHuman(
                homePlanet = _homePlanet,
                friends = _friends
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              scalarAdapters: ScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman,
            ): Unit {
              writer.name("homePlanet")
              NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.homePlanet)

              writer.name("friends")
              Friend.obj(true).nullable().list().nullable().toJson(writer, scalarAdapters,
                  value.friends)
            }

            private object Friend :
                ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("__typename")

              public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                  TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend {
                var __typename: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
                    else -> break
                  }
                }

                reader.rewind()
                val _onCharacter = com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.fromJson(reader,
                    scalarAdapters)

                return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend(
                  __typename = __typename!!,
                  onCharacter = _onCharacter
                )
              }

              public override fun toJson(
                writer: JsonWriter,
                scalarAdapters: ScalarAdapters,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend,
              ): Unit {
                writer.name("__typename")
                StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

                com.example.union_inline_fragments.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter.toJson(writer,
                    scalarAdapters, value.onCharacter)
              }

              private object OnCharacter :
                  ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter>
                  {
                public val RESPONSE_NAMES: List<String> = listOf("firstAppearsIn")

                public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                    TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter {
                  var _firstAppearsIn: Episode? = null

                  while(true) {
                    when (reader.selectName(RESPONSE_NAMES)) {
                      0 -> _firstAppearsIn = Episode_ResponseAdapter.fromJson(reader,
                          scalarAdapters)
                      else -> break
                    }
                  }

                  return TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter(
                    firstAppearsIn = _firstAppearsIn!!
                  )
                }

                public override fun toJson(
                  writer: JsonWriter,
                  scalarAdapters: ScalarAdapters,
                  `value`: TestQuery.Data.Search.OnCharacter.Friend.OnHuman.Friend.OnCharacter,
                ): Unit {
                  writer.name("firstAppearsIn")
                  Episode_ResponseAdapter.toJson(writer, scalarAdapters, value.firstAppearsIn)
                }
              }
            }
          }

          private object OnDroid : ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid> {
            public val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

            public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                TestQuery.Data.Search.OnCharacter.Friend.OnDroid {
              var _primaryFunction: String? = null
              var _friends: List<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend?>? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader,
                      scalarAdapters)
                  1 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                      scalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Search.OnCharacter.Friend.OnDroid(
                primaryFunction = _primaryFunction,
                friends = _friends
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              scalarAdapters: ScalarAdapters,
              `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid,
            ): Unit {
              writer.name("primaryFunction")
              NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.primaryFunction)

              writer.name("friends")
              Friend.obj().nullable().list().nullable().toJson(writer, scalarAdapters,
                  value.friends)
            }

            private object Friend :
                ApolloAdapter<TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend> {
              public val RESPONSE_NAMES: List<String> = listOf("id")

              public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
                  TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend {
                var _id: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
                    else -> break
                  }
                }

                return TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend(
                  id = _id!!
                )
              }

              public override fun toJson(
                writer: JsonWriter,
                scalarAdapters: ScalarAdapters,
                `value`: TestQuery.Data.Search.OnCharacter.Friend.OnDroid.Friend,
              ): Unit {
                writer.name("id")
                StringApolloAdapter.toJson(writer, scalarAdapters, value.id)
              }
            }
          }
        }
      }

      private object OnStarship : ApolloAdapter<TestQuery.Data.Search.OnStarship> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Search.OnStarship {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Search.OnStarship(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Search.OnStarship,
        ): Unit {
          writer.name("name")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
        }
      }
    }
  }
}
