//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("search")
      Search.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.search)
    }

    private object Search : Adapter<TestQuery.Data.Search> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterSearch.fromJson(reader, customScalarAdapters, __typename)
          "Starship",
          -> StarshipSearch.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherSearch.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Search,
      ) {
        when(value) {
          is TestQuery.Data.CharacterSearch -> CharacterSearch.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.StarshipSearch -> StarshipSearch.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherSearch -> OtherSearch.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object CharacterSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "friends")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.CharacterSearch {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _friends: List<TestQuery.Data.CharacterSearch.Friend?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.CharacterSearch(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          name = _name ?: missingField(reader, "name"),
          friends = _friends
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.CharacterSearch,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
      }

      private object Friend : Adapter<TestQuery.Data.CharacterSearch.Friend> {
        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.CharacterSearch.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Human",
            -> HumanFriend.fromJson(reader, customScalarAdapters, __typename)
            "Droid",
            -> DroidFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.Friend,
        ) {
          when(value) {
            is TestQuery.Data.CharacterSearch.HumanFriend -> HumanFriend.toJson(writer, customScalarAdapters, value)
            is TestQuery.Data.CharacterSearch.DroidFriend -> DroidFriend.toJson(writer, customScalarAdapters, value)
            is TestQuery.Data.CharacterSearch.OtherFriend -> OtherFriend.toJson(writer, customScalarAdapters, value)
          }
        }
      }

      public object HumanFriend {
        public val RESPONSE_NAMES: List<String> =
            listOf("__typename", "name", "homePlanet", "friends")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.HumanFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _homePlanet: String? = null
          var _friends: List<TestQuery.Data.CharacterSearch.HumanFriend.Friend?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.HumanFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            homePlanet = _homePlanet,
            friends = _friends
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.HumanFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("homePlanet")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
        }

        private object Friend : Adapter<TestQuery.Data.CharacterSearch.HumanFriend.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename", "firstAppearsIn")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.CharacterSearch.HumanFriend.Friend {
            var __typename: String? = null
            var _firstAppearsIn: Episode? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> _firstAppearsIn = Episode_ResponseAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.CharacterSearch.HumanFriend.Friend(
              __typename = __typename ?: missingField(reader, "__typename"),
              firstAppearsIn = _firstAppearsIn ?: missingField(reader, "firstAppearsIn")
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.CharacterSearch.HumanFriend.Friend,
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            writer.name("firstAppearsIn")
            Episode_ResponseAdapter.toJson(writer, customScalarAdapters, value.firstAppearsIn)
          }
        }
      }

      public object DroidFriend {
        public val RESPONSE_NAMES: List<String> =
            listOf("__typename", "name", "primaryFunction", "friends")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.DroidFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _primaryFunction: String? = null
          var _friends: List<TestQuery.Data.CharacterSearch.DroidFriend.Friend?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.DroidFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            primaryFunction = _primaryFunction,
            friends = _friends
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.DroidFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
        }

        private object Friend : Adapter<TestQuery.Data.CharacterSearch.DroidFriend.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("id")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.CharacterSearch.DroidFriend.Friend {
            var _id: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.CharacterSearch.DroidFriend.Friend(
              id = _id ?: missingField(reader, "id")
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.CharacterSearch.DroidFriend.Friend,
          ) {
            writer.name("id")
            StringAdapter.toJson(writer, customScalarAdapters, value.id)
          }
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.OtherFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name")
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.OtherFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    public object StarshipSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.StarshipSearch {
        var __typename: String? = typename
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.StarshipSearch(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.StarshipSearch,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }

    public object OtherSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherSearch {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherSearch(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherSearch,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
