//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.union_inline_fragments.TestQuery
import com.example.union_inline_fragments.type.Episode
import com.example.union_inline_fragments.type.adapter.Episode_ResponseAdapter
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj().nullable().list().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("search")
      Search.obj().nullable().list().nullable().toJson(writer, scalarAdapters, value.search)
    }

    private object Search : ApolloAdapter<TestQuery.Data.Search> {
      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Search {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterSearch.fromJson(reader, scalarAdapters, __typename)
          "Starship",
          -> StarshipSearch.fromJson(reader, scalarAdapters, __typename)
          else
          -> OtherSearch.fromJson(reader, scalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Search,
      ): Unit {
        when(value) {
          is TestQuery.Data.CharacterSearch -> CharacterSearch.toJson(writer, scalarAdapters, value)
          is TestQuery.Data.StarshipSearch -> StarshipSearch.toJson(writer, scalarAdapters, value)
          is TestQuery.Data.OtherSearch -> OtherSearch.toJson(writer, scalarAdapters, value)
        }
      }
    }

    public object CharacterSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "friends")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.CharacterSearch {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _friends: List<TestQuery.Data.CharacterSearch.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.CharacterSearch(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!,
          friends = _friends
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.CharacterSearch,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("id")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.id)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, scalarAdapters, value.friends)
      }

      private object Friend : ApolloAdapter<TestQuery.Data.CharacterSearch.Friend> {
        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.CharacterSearch.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Human",
            -> HumanFriend.fromJson(reader, scalarAdapters, __typename)
            "Droid",
            -> DroidFriend.fromJson(reader, scalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, scalarAdapters, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.Friend,
        ): Unit {
          when(value) {
            is TestQuery.Data.CharacterSearch.HumanFriend -> HumanFriend.toJson(writer,
                scalarAdapters, value)
            is TestQuery.Data.CharacterSearch.DroidFriend -> DroidFriend.toJson(writer,
                scalarAdapters, value)
            is TestQuery.Data.CharacterSearch.OtherFriend -> OtherFriend.toJson(writer,
                scalarAdapters, value)
          }
        }
      }

      public object HumanFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "homePlanet",
            "friends")

        public fun fromJson(
          reader: JsonReader,
          scalarAdapters: ScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.HumanFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _homePlanet: String? = null
          var _friends: List<TestQuery.Data.CharacterSearch.HumanFriend.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
              1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
              2 -> _homePlanet = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
              3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                  scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.HumanFriend(
            __typename = __typename!!,
            name = _name!!,
            homePlanet = _homePlanet,
            friends = _friends
          )
        }

        public fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.HumanFriend,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

          writer.name("name")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

          writer.name("homePlanet")
          NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.homePlanet)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, scalarAdapters, value.friends)
        }

        private object Friend : ApolloAdapter<TestQuery.Data.CharacterSearch.HumanFriend.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename", "firstAppearsIn")

          public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
              TestQuery.Data.CharacterSearch.HumanFriend.Friend {
            var __typename: String? = null
            var _firstAppearsIn: Episode? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
                1 -> _firstAppearsIn = Episode_ResponseAdapter.fromJson(reader, scalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.CharacterSearch.HumanFriend.Friend(
              __typename = __typename!!,
              firstAppearsIn = _firstAppearsIn!!
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            scalarAdapters: ScalarAdapters,
            `value`: TestQuery.Data.CharacterSearch.HumanFriend.Friend,
          ): Unit {
            writer.name("__typename")
            StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

            writer.name("firstAppearsIn")
            Episode_ResponseAdapter.toJson(writer, scalarAdapters, value.firstAppearsIn)
          }
        }
      }

      public object DroidFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction",
            "friends")

        public fun fromJson(
          reader: JsonReader,
          scalarAdapters: ScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.DroidFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _primaryFunction: String? = null
          var _friends: List<TestQuery.Data.CharacterSearch.DroidFriend.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
              1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
              2 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
              3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader,
                  scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.DroidFriend(
            __typename = __typename!!,
            name = _name!!,
            primaryFunction = _primaryFunction,
            friends = _friends
          )
        }

        public fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.DroidFriend,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

          writer.name("name")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

          writer.name("primaryFunction")
          NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.primaryFunction)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().toJson(writer, scalarAdapters, value.friends)
        }

        private object Friend : ApolloAdapter<TestQuery.Data.CharacterSearch.DroidFriend.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("id")

          public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
              TestQuery.Data.CharacterSearch.DroidFriend.Friend {
            var _id: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.CharacterSearch.DroidFriend.Friend(
              id = _id!!
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            scalarAdapters: ScalarAdapters,
            `value`: TestQuery.Data.CharacterSearch.DroidFriend.Friend,
          ): Unit {
            writer.name("id")
            StringApolloAdapter.toJson(writer, scalarAdapters, value.id)
          }
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public fun fromJson(
          reader: JsonReader,
          scalarAdapters: ScalarAdapters,
          typename: String,
        ): TestQuery.Data.CharacterSearch.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
              1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.CharacterSearch.OtherFriend(
            __typename = __typename!!,
            name = _name!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.CharacterSearch.OtherFriend,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

          writer.name("name")
          StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
        }
      }
    }

    public object StarshipSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.StarshipSearch {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.StarshipSearch(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.StarshipSearch,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
      }
    }

    public object OtherSearch {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherSearch {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherSearch(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.OtherSearch,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)
      }
    }
  }
}
