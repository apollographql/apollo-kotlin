//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_spread_with_include_directive.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.BooleanAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableBooleanAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.present
import com.example.fragment_spread_with_include_directive.TestQuery
import kotlin.IllegalStateException
import kotlin.Unit

public object TestQuery_VariablesAdapter : Adapter<TestQuery> {
  public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      TestQuery = throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: TestQuery,
  ): Unit {
    writer.name("withDetails")
    BooleanAdapter.toJson(writer, customScalarAdapters, value.withDetails)
    writer.name("skipHumanDetails")
    BooleanAdapter.toJson(writer, customScalarAdapters, value.skipHumanDetails)
    if (value.optionalWithDefaultFalse is Optional.Present) {
      writer.name("optionalWithDefaultFalse")
      NullableBooleanAdapter.present().toJson(writer, customScalarAdapters,
          value.optionalWithDefaultFalse)
    }
    else if (customScalarAdapters.adapterContext.serializeVariablesWithDefaultBooleanValues) {
      writer.name("optionalWithDefaultFalse")
      BooleanAdapter.toJson(writer, customScalarAdapters, false)
    }
    if (value.optionalWithDefaultTrue is Optional.Present) {
      writer.name("optionalWithDefaultTrue")
      NullableBooleanAdapter.present().toJson(writer, customScalarAdapters,
          value.optionalWithDefaultTrue)
    }
    else if (customScalarAdapters.adapterContext.serializeVariablesWithDefaultBooleanValues) {
      writer.name("optionalWithDefaultTrue")
      BooleanAdapter.toJson(writer, customScalarAdapters, true)
    }
    if (value.optionalWithNoDefault is Optional.Present) {
      writer.name("optionalWithNoDefault")
      NullableBooleanAdapter.present().toJson(writer, customScalarAdapters,
          value.optionalWithNoDefault)
    }
  }
}
