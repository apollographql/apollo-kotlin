//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_spread_with_include_directive

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Optional
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.fragment_spread_with_include_directive.adapter.TestQuery_ResponseAdapter
import com.example.fragment_spread_with_include_directive.adapter.TestQuery_VariablesAdapter
import com.example.fragment_spread_with_include_directive.fragment.DroidDetails
import com.example.fragment_spread_with_include_directive.fragment.HeroDetails
import com.example.fragment_spread_with_include_directive.fragment.HumanDetails
import com.example.fragment_spread_with_include_directive.fragment.OtherDroidDetails
import com.example.fragment_spread_with_include_directive.selections.TestQuerySelections
import kotlin.Boolean
import kotlin.String
import com.example.fragment_spread_with_include_directive.type.Query as CompiledQuery

public data class TestQuery(
  public val withDetails: Boolean,
  public val skipHumanDetails: Boolean,
  public val optionalWithDefaultFalse: Optional<Boolean?> = Optional.Absent,
  public val optionalWithDefaultTrue: Optional<Boolean?> = Optional.Absent,
  public val optionalWithNoDefault: Optional<Boolean?> = Optional.Absent,
) : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    TestQuery_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
    public val getBoolean: Boolean?,
  ) : Query.Data {
    public data class Hero(
      public val __typename: String,
      /**
       * The ID of the character
       */
      public val id: String,
      /**
       * Synthetic field for 'HeroDetails'
       */
      public val heroDetails: HeroDetails?,
      /**
       * Synthetic field for 'HumanDetails'
       */
      public val humanDetails: HumanDetails?,
      /**
       * Synthetic field for 'DroidDetails'
       */
      public val droidDetails: DroidDetails?,
      /**
       * Synthetic field for 'OtherDroidDetails'
       */
      public val otherDroidDetails: OtherDroidDetails?,
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "c028b2bef2e87616481fc4e418cdde6d31d6c4a48d669d7c8ac4c5ac0145ec07"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery($withDetails: Boolean!, $skipHumanDetails: Boolean!, $optionalWithDefaultFalse: Boolean = false , $optionalWithDefaultTrue: Boolean = true , $optionalWithNoDefault: Boolean) {
     *   hero {
     *     __typename
     *     id
     *     ...HeroDetails @include(if: $withDetails) @skip(if: $skipHumanDetails)
     *     ...HumanDetails @include(if: $withDetails)
     *     ...DroidDetails @skip(if: $optionalWithDefaultTrue)
     *     ...OtherDroidDetails @include(if: $optionalWithDefaultTrue)
     *   }
     *   getBoolean(booleanArg: $optionalWithNoDefault)
     * }
     *
     * fragment HeroDetails on Character {
     *   name
     * }
     *
     * fragment HumanDetails on Human {
     *   homePlanet
     * }
     *
     * fragment DroidDetails on Droid {
     *   primaryFunction
     * }
     *
     * fragment OtherDroidDetails on Droid {
     *   id
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery(${'$'}withDetails: Boolean!, ${'$'}skipHumanDetails: Boolean!, ${'$'}optionalWithDefaultFalse: Boolean = false , ${'$'}optionalWithDefaultTrue: Boolean = true , ${'$'}optionalWithNoDefault: Boolean) { hero { __typename id ...HeroDetails @include(if: ${'$'}withDetails) @skip(if: ${'$'}skipHumanDetails) ...HumanDetails @include(if: ${'$'}withDetails) ...DroidDetails @skip(if: ${'$'}optionalWithDefaultTrue) ...OtherDroidDetails @include(if: ${'$'}optionalWithDefaultTrue) } getBoolean(booleanArg: ${'$'}optionalWithNoDefault) }  fragment HeroDetails on Character { name }  fragment HumanDetails on Human { homePlanet }  fragment DroidDetails on Droid { primaryFunction }  fragment OtherDroidDetails on Droid { id }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
