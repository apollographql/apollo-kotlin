//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_inside_inline_fragment.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestQuery.Data {
      var _search: List<TestQuery.Data.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().fromJson(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, value.search, context)
    }

    private object Search : ApolloAdapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Search {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onCharacter: TestQuery.Data.Search.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onCharacter = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.fromJson(reader,
              context)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onCharacter = _onCharacter
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Search,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        if (value.onCharacter != null) {
          com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.toJson(writer,
              value.onCharacter, context)
        }
      }

      private object OnCharacter : ApolloAdapter<TestQuery.Data.Search.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Search.OnCharacter {
          var __typename: String? = null
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              1 -> _name = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onHuman: TestQuery.Data.Search.OnCharacter.OnHuman? = null
          if (possibleTypes("Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onHuman = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnHuman.fromJson(reader,
                context)
          }

          var _onDroid: TestQuery.Data.Search.OnCharacter.OnDroid? = null
          if (possibleTypes("Droid").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onDroid = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnDroid.fromJson(reader,
                context)
          }

          return TestQuery.Data.Search.OnCharacter(
            __typename = __typename,
            name = _name!!,
            onHuman = _onHuman,
            onDroid = _onDroid
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Search.OnCharacter,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)

          if (value.onHuman != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnHuman.toJson(writer,
                value.onHuman, context)
          }

          if (value.onDroid != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnDroid.toJson(writer,
                value.onDroid, context)
          }
        }

        private object OnHuman : ApolloAdapter<TestQuery.Data.Search.OnCharacter.OnHuman> {
          public val RESPONSE_NAMES: List<String> = listOf("homePlanet")

          public override fun fromJson(reader: JsonReader,
              context: ApolloAdapter.DataDeserializeContext):
              TestQuery.Data.Search.OnCharacter.OnHuman {
            var _homePlanet: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _homePlanet = NullableStringApolloAdapter.fromJson(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Search.OnCharacter.OnHuman(
              homePlanet = _homePlanet
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Search.OnCharacter.OnHuman,
            context: ApolloAdapter.DataSerializeContext,
          ): Unit {
            writer.name("homePlanet")
            NullableStringApolloAdapter.toJson(writer, value.homePlanet, context)
          }
        }

        private object OnDroid : ApolloAdapter<TestQuery.Data.Search.OnCharacter.OnDroid> {
          public val RESPONSE_NAMES: List<String> = listOf("primaryFunction")

          public override fun fromJson(reader: JsonReader,
              context: ApolloAdapter.DataDeserializeContext):
              TestQuery.Data.Search.OnCharacter.OnDroid {
            var _primaryFunction: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Search.OnCharacter.OnDroid(
              primaryFunction = _primaryFunction
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Search.OnCharacter.OnDroid,
            context: ApolloAdapter.DataSerializeContext,
          ): Unit {
            writer.name("primaryFunction")
            NullableStringApolloAdapter.toJson(writer, value.primaryFunction, context)
          }
        }
      }
    }
  }
}
