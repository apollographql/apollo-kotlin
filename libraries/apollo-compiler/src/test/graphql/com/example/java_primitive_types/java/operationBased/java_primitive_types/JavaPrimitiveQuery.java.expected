//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.CompiledField;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.Optional;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_ResponseAdapter;
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_VariablesAdapter;
import com.example.java_primitive_types.selections.JavaPrimitiveQuerySelections;
import com.example.java_primitive_types.type.MyInput;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public class JavaPrimitiveQuery implements Query<JavaPrimitiveQuery.Data> {
  public static final String OPERATION_ID = "955e634c34cd7cd1d999806876aec12f800dbb9d36cc914e313b7a0050342605";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query JavaPrimitiveQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = {
   *   nonNullableInt: 4
   * }
   *  ) {
   *   nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   *   nonNullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query JavaPrimitiveQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = { nonNullableInt: 4 } ) { nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nullableMyType { nullableInt nonNullableInt } nonNullableMyType { nullableInt nonNullableInt } }";

  public static final String OPERATION_NAME = "JavaPrimitiveQuery";

  public final Optional<Integer> nullableInt;

  public final int nonNullableInt;

  public final Optional<Integer> nonNullableIntWithDefault;

  public final Optional<MyInput> nullableInput;

  public final MyInput nonNullableInput;

  public final Optional<MyInput> nonNullableInputWithDefault;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public JavaPrimitiveQuery(Optional<Integer> nullableInt, int nonNullableInt,
      Optional<Integer> nonNullableIntWithDefault, Optional<MyInput> nullableInput,
      MyInput nonNullableInput, Optional<MyInput> nonNullableInputWithDefault) {
    this.nullableInt = nullableInt;
    this.nonNullableInt = nonNullableInt;
    this.nonNullableIntWithDefault = nonNullableIntWithDefault;
    this.nullableInput = nullableInput;
    this.nonNullableInput = nonNullableInput;
    this.nonNullableInputWithDefault = nonNullableInputWithDefault;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof JavaPrimitiveQuery) {
      JavaPrimitiveQuery that = (JavaPrimitiveQuery) o;
      return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
       &&this.nonNullableInt == that.nonNullableInt
       &&((this.nonNullableIntWithDefault == null) ? (that.nonNullableIntWithDefault == null) : this.nonNullableIntWithDefault.equals(that.nonNullableIntWithDefault))
       &&((this.nullableInput == null) ? (that.nullableInput == null) : this.nullableInput.equals(that.nullableInput))
       &&((this.nonNullableInput == null) ? (that.nonNullableInput == null) : this.nonNullableInput.equals(that.nonNullableInput))
       &&((this.nonNullableInputWithDefault == null) ? (that.nonNullableInputWithDefault == null) : this.nonNullableInputWithDefault.equals(that.nonNullableInputWithDefault));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
      __h *= 1000003;
      __h ^= nonNullableInt;
      __h *= 1000003;
      __h ^= (nonNullableIntWithDefault == null) ? 0 : nonNullableIntWithDefault.hashCode();
      __h *= 1000003;
      __h ^= (nullableInput == null) ? 0 : nullableInput.hashCode();
      __h *= 1000003;
      __h ^= (nonNullableInput == null) ? 0 : nonNullableInput.hashCode();
      __h *= 1000003;
      __h ^= (nonNullableInputWithDefault == null) ? 0 : nonNullableInputWithDefault.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "JavaPrimitiveQuery{"
        + "nullableInt=" + nullableInt + ", "
        + "nonNullableInt=" + nonNullableInt + ", "
        + "nonNullableIntWithDefault=" + nonNullableIntWithDefault + ", "
        + "nullableInput=" + nullableInput + ", "
        + "nonNullableInput=" + nonNullableInput + ", "
        + "nonNullableInputWithDefault=" + nonNullableInputWithDefault
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
      boolean withDefaultValues) throws IOException {
    JavaPrimitiveQuery_VariablesAdapter.INSTANCE.serializeVariables(writer, this, customScalarAdapters, withDefaultValues);
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(JavaPrimitiveQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.java_primitive_types.type.Query.type
    )
    .selections(JavaPrimitiveQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Optional<Integer> nullableInt = Optional.absent();

    private int nonNullableInt;

    private Optional<Integer> nonNullableIntWithDefault = Optional.absent();

    private Optional<MyInput> nullableInput = Optional.absent();

    private MyInput nonNullableInput;

    private Optional<MyInput> nonNullableInputWithDefault = Optional.absent();

    Builder() {
    }

    public Builder nullableInt(Integer nullableInt) {
      this.nullableInt = Optional.present(nullableInt);
      return this;
    }

    public Builder nonNullableInt(int nonNullableInt) {
      this.nonNullableInt = nonNullableInt;
      return this;
    }

    public Builder nonNullableIntWithDefault(Integer nonNullableIntWithDefault) {
      this.nonNullableIntWithDefault = Optional.present(nonNullableIntWithDefault);
      return this;
    }

    public Builder nullableInput(MyInput nullableInput) {
      this.nullableInput = Optional.present(nullableInput);
      return this;
    }

    public Builder nonNullableInput(MyInput nonNullableInput) {
      this.nonNullableInput = nonNullableInput;
      return this;
    }

    public Builder nonNullableInputWithDefault(MyInput nonNullableInputWithDefault) {
      this.nonNullableInputWithDefault = Optional.present(nonNullableInputWithDefault);
      return this;
    }

    public JavaPrimitiveQuery build() {
      return new JavaPrimitiveQuery(nullableInt, nonNullableInt, nonNullableIntWithDefault, nullableInput, nonNullableInput, nonNullableInputWithDefault);
    }
  }

  public static class Data implements Query.Data {
    public Integer nullableInt;

    public int nonNullableInt;

    public NullableMyType nullableMyType;

    public NonNullableMyType nonNullableMyType;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(Integer nullableInt, int nonNullableInt, NullableMyType nullableMyType,
        NonNullableMyType nonNullableMyType) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
      this.nullableMyType = nullableMyType;
      this.nonNullableMyType = nonNullableMyType;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt
         &&((this.nullableMyType == null) ? (that.nullableMyType == null) : this.nullableMyType.equals(that.nullableMyType))
         &&((this.nonNullableMyType == null) ? (that.nonNullableMyType == null) : this.nonNullableMyType.equals(that.nonNullableMyType));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        __h *= 1000003;
        __h ^= nonNullableInt;
        __h *= 1000003;
        __h ^= (nullableMyType == null) ? 0 : nullableMyType.hashCode();
        __h *= 1000003;
        __h ^= (nonNullableMyType == null) ? 0 : nonNullableMyType.hashCode();
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt + ", "
          + "nullableMyType=" + nullableMyType + ", "
          + "nonNullableMyType=" + nonNullableMyType
          + "}";
      }
      return $toString;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      builder.nullableMyType = nullableMyType;
      builder.nonNullableMyType = nonNullableMyType;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      private NullableMyType nullableMyType;

      private NonNullableMyType nonNullableMyType;

      Builder() {
      }

      public Builder nullableInt(Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public Builder nullableMyType(NullableMyType nullableMyType) {
        this.nullableMyType = nullableMyType;
        return this;
      }

      public Builder nonNullableMyType(NonNullableMyType nonNullableMyType) {
        this.nonNullableMyType = nonNullableMyType;
        return this;
      }

      public Data build() {
        return new Data(nullableInt, nonNullableInt, nullableMyType, nonNullableMyType);
      }
    }
  }

  public static class NullableMyType {
    public Integer nullableInt;

    public int nonNullableInt;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public NullableMyType(Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof NullableMyType) {
        NullableMyType that = (NullableMyType) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt;
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        __h *= 1000003;
        __h ^= nonNullableInt;
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "NullableMyType{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt
          + "}";
      }
      return $toString;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      Builder() {
      }

      public Builder nullableInt(Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public NullableMyType build() {
        return new NullableMyType(nullableInt, nonNullableInt);
      }
    }
  }

  public static class NonNullableMyType {
    public Integer nullableInt;

    public int nonNullableInt;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public NonNullableMyType(Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof NonNullableMyType) {
        NonNullableMyType that = (NonNullableMyType) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt;
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int __h = 1;
        __h *= 1000003;
        __h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        __h *= 1000003;
        __h ^= nonNullableInt;
        $hashCode = __h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "NonNullableMyType{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt
          + "}";
      }
      return $toString;
    }

    public Builder toBuilder() {
      Builder builder = new Builder();
      builder.nullableInt = nullableInt;
      builder.nonNullableInt = nonNullableInt;
      return builder;
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Integer nullableInt;

      private int nonNullableInt;

      Builder() {
      }

      public Builder nullableInt(Integer nullableInt) {
        this.nullableInt = nullableInt;
        return this;
      }

      public Builder nonNullableInt(int nonNullableInt) {
        this.nonNullableInt = nonNullableInt;
        return this;
      }

      public NonNullableMyType build() {
        return new NonNullableMyType(nullableInt, nonNullableInt);
      }
    }
  }
}
