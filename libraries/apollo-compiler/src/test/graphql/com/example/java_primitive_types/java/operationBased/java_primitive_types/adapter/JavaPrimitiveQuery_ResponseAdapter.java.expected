//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_primitive_types.JavaPrimitiveQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class JavaPrimitiveQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<JavaPrimitiveQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt", "nullableMyType", "nonNullableMyType");

    @Override
    public JavaPrimitiveQuery.Data fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;
      JavaPrimitiveQuery.NullableMyType _nullableMyType = null;
      JavaPrimitiveQuery.NonNullableMyType _nonNullableMyType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          case 2: _nullableMyType = new NullableAdapter<>(new ObjectAdapter<JavaPrimitiveQuery.NullableMyType>(NullableMyType.INSTANCE, false)).fromJson(reader, context); break;
          case 3: _nonNullableMyType = new ObjectAdapter<JavaPrimitiveQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");
      Assertions.checkFieldNotMissing(_nonNullableMyType, "nonNullableMyType");

      return new JavaPrimitiveQuery.Data(
        _nullableInt,
        _nonNullableInt,
        _nullableMyType,
        _nonNullableMyType
      );
    }

    @Override
    public void toJson(JsonWriter writer, JavaPrimitiveQuery.Data value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);

      writer.name("nullableMyType");
      new NullableAdapter<>(new ObjectAdapter<JavaPrimitiveQuery.NullableMyType>(NullableMyType.INSTANCE, false)).toJson(writer, value.nullableMyType, context);

      writer.name("nonNullableMyType");
      new ObjectAdapter<JavaPrimitiveQuery.NonNullableMyType>(NonNullableMyType.INSTANCE, false).toJson(writer, value.nonNullableMyType, context);
    }
  }

  public enum NullableMyType implements ApolloAdapter<JavaPrimitiveQuery.NullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public JavaPrimitiveQuery.NullableMyType fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new JavaPrimitiveQuery.NullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, JavaPrimitiveQuery.NullableMyType value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);
    }
  }

  public enum NonNullableMyType implements ApolloAdapter<JavaPrimitiveQuery.NonNullableMyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public JavaPrimitiveQuery.NonNullableMyType fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntApolloAdapter.fromJson(reader, context); break;
          case 1: _nonNullableInt = Adapters.IntApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new JavaPrimitiveQuery.NonNullableMyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, JavaPrimitiveQuery.NonNullableMyType value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntApolloAdapter.toJson(writer, value.nullableInt, context);

      writer.name("nonNullableInt");
      Adapters.IntApolloAdapter.toJson(writer, value.nonNullableInt, context);
    }
  }
}
