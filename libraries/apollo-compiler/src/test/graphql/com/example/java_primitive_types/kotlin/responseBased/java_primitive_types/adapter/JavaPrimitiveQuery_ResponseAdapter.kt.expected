//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.IntDataAdapter
import com.apollographql.apollo3.api.NullableIntDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.java_primitive_types.JavaPrimitiveQuery
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object JavaPrimitiveQuery_ResponseAdapter {
  public object Data : DataAdapter<JavaPrimitiveQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("nullableInt", "nonNullableInt",
        "nullableMyType", "nonNullableMyType")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): JavaPrimitiveQuery.Data {
      var _nullableInt: Int? = null
      var _nonNullableInt: Int? = null
      var _nullableMyType: JavaPrimitiveQuery.Data.NullableMyType? = null
      var _nonNullableMyType: JavaPrimitiveQuery.Data.NonNullableMyType? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _nullableInt = NullableIntDataAdapter.deserializeData(reader, context)
          1 -> _nonNullableInt = IntDataAdapter.deserializeData(reader, context)
          2 -> _nullableMyType = NullableMyType.obj().nullable().deserializeData(reader, context)
          3 -> _nonNullableMyType = NonNullableMyType.obj().deserializeData(reader, context)
          else -> break
        }
      }

      return JavaPrimitiveQuery.Data(
        nullableInt = _nullableInt,
        nonNullableInt = _nonNullableInt!!,
        nullableMyType = _nullableMyType,
        nonNullableMyType = _nonNullableMyType!!
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: JavaPrimitiveQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("nullableInt")
      NullableIntDataAdapter.serializeData(writer, value.nullableInt, context)

      writer.name("nonNullableInt")
      IntDataAdapter.serializeData(writer, value.nonNullableInt, context)

      writer.name("nullableMyType")
      NullableMyType.obj().nullable().serializeData(writer, value.nullableMyType, context)

      writer.name("nonNullableMyType")
      NonNullableMyType.obj().serializeData(writer, value.nonNullableMyType, context)
    }

    private object NullableMyType : DataAdapter<JavaPrimitiveQuery.Data.NullableMyType> {
      public val RESPONSE_NAMES: List<String> = listOf("nullableInt", "nonNullableInt")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): JavaPrimitiveQuery.Data.NullableMyType {
        var _nullableInt: Int? = null
        var _nonNullableInt: Int? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _nullableInt = NullableIntDataAdapter.deserializeData(reader, context)
            1 -> _nonNullableInt = IntDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return JavaPrimitiveQuery.Data.NullableMyType(
          nullableInt = _nullableInt,
          nonNullableInt = _nonNullableInt!!
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: JavaPrimitiveQuery.Data.NullableMyType,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("nullableInt")
        NullableIntDataAdapter.serializeData(writer, value.nullableInt, context)

        writer.name("nonNullableInt")
        IntDataAdapter.serializeData(writer, value.nonNullableInt, context)
      }
    }

    private object NonNullableMyType : DataAdapter<JavaPrimitiveQuery.Data.NonNullableMyType> {
      public val RESPONSE_NAMES: List<String> = listOf("nullableInt", "nonNullableInt")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): JavaPrimitiveQuery.Data.NonNullableMyType {
        var _nullableInt: Int? = null
        var _nonNullableInt: Int? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _nullableInt = NullableIntDataAdapter.deserializeData(reader, context)
            1 -> _nonNullableInt = IntDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return JavaPrimitiveQuery.Data.NonNullableMyType(
          nullableInt = _nullableInt,
          nonNullableInt = _nonNullableInt!!
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: JavaPrimitiveQuery.Data.NonNullableMyType,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("nullableInt")
        NullableIntDataAdapter.serializeData(writer, value.nullableInt, context)

        writer.name("nonNullableInt")
        IntDataAdapter.serializeData(writer, value.nonNullableInt, context)
      }
    }
  }
}
