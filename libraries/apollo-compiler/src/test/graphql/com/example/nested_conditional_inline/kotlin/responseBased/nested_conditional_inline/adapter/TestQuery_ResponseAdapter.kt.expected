//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableDoubleDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_conditional_inline.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("hero")
      Hero.obj().nullable().serializeData(writer, value.hero, context)
    }

    private object Hero : DataAdapter<TestQuery.Data.Hero> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanHero.deserializeData(reader, context, __typename)
          "Droid",
          -> DroidHero.deserializeData(reader, context, __typename)
          else
          -> OtherHero.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.serializeData(writer, value, context)
          is TestQuery.Data.DroidHero -> DroidHero.serializeData(writer, value, context)
          is TestQuery.Data.OtherHero -> OtherHero.serializeData(writer, value, context)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestQuery.Data.HumanHero.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _friends = Friend.obj().nullable().list().nullable().deserializeData(reader,
                context)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = _name!!,
          friends = _friends
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanHero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().serializeData(writer, value.friends, context)
      }

      private object Friend : DataAdapter<TestQuery.Data.HumanHero.Friend> {
        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.HumanHero.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Human",
            -> HumanFriend.deserializeData(reader, context, __typename)
            else
            -> OtherFriend.deserializeData(reader, context, __typename)
          }
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.HumanHero.Friend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          when(value) {
            is TestQuery.Data.HumanHero.HumanFriend -> HumanFriend.serializeData(writer, value,
                context)
            is TestQuery.Data.HumanHero.OtherFriend -> OtherFriend.serializeData(writer, value,
                context)
          }
        }
      }

      public object HumanFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.HumanHero.HumanFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              2 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.HumanFriend(
            __typename = __typename!!,
            name = _name!!,
            height = _height
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.HumanHero.HumanFriend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)

          writer.name("height")
          NullableDoubleDataAdapter.serializeData(writer, value.height, context)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.HumanHero.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.OtherFriend(
            __typename = __typename!!,
            name = _name!!
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.HumanHero.OtherFriend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)
        }
      }
    }

    public object DroidHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var _name: String? = null
        var _friends: List<TestQuery.Data.DroidHero.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _friends = Friend.obj().nullable().list().nullable().deserializeData(reader,
                context)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename!!,
          name = _name!!,
          friends = _friends
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.DroidHero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().serializeData(writer, value.friends, context)
      }

      private object Friend : DataAdapter<TestQuery.Data.DroidHero.Friend> {
        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.DroidHero.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Human",
            -> HumanFriend.deserializeData(reader, context, __typename)
            else
            -> OtherFriend.deserializeData(reader, context, __typename)
          }
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.DroidHero.Friend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          when(value) {
            is TestQuery.Data.DroidHero.HumanFriend -> HumanFriend.serializeData(writer, value,
                context)
            is TestQuery.Data.DroidHero.OtherFriend -> OtherFriend.serializeData(writer, value,
                context)
          }
        }
      }

      public object HumanFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.DroidHero.HumanFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              2 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.HumanFriend(
            __typename = __typename!!,
            name = _name!!,
            height = _height
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.DroidHero.HumanFriend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)

          writer.name("height")
          NullableDoubleDataAdapter.serializeData(writer, value.height, context)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.DroidHero.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.OtherFriend(
            __typename = __typename!!,
            name = _name!!
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.DroidHero.OtherFriend,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)
        }
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherHero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)
      }
    }
  }
}
