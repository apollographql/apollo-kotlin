//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.selections

import com.apollographql.apollo.api.CompiledArgument
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CompiledFragment
import com.apollographql.apollo.api.CompiledSelection
import com.apollographql.apollo.api.CompiledVariable
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.notNull
import com.example.nested_conditional_inline.type.Character
import com.example.nested_conditional_inline.type.GraphQLFloat
import com.example.nested_conditional_inline.type.GraphQLString
import com.example.nested_conditional_inline.type.Human
import com.example.nested_conditional_inline.type.Query
import kotlin.collections.List

public object TestQuerySelections {
  private val __onHuman1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "height",
          type = GraphQLFloat.type
        ).arguments(listOf(
          CompiledArgument.Builder(Human.__height_unit).value("FOOT").build()
        ))
        .build()
      )

  private val __friends: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = listOf("Human")
        ).selections(__onHuman1)
        .build()
      )

  private val __onHuman: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "friends",
          type = Character.type.list()
        ).selections(__friends)
        .build()
      )

  private val __onHuman2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "height",
          type = GraphQLFloat.type
        ).arguments(listOf(
          CompiledArgument.Builder(Human.__height_unit).value("METER").build()
        ))
        .build()
      )

  private val __friends1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = listOf("Human")
        ).selections(__onHuman2)
        .build()
      )

  private val __onDroid: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "friends",
          type = Character.type.list()
        ).selections(__friends1)
        .build()
      )

  private val __hero: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = listOf("Human")
        ).selections(__onHuman)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Droid",
          possibleTypes = listOf("Droid")
        ).selections(__onDroid)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "hero",
          type = Character.type
        ).arguments(listOf(
          CompiledArgument.Builder(Query.__hero_episode).value(CompiledVariable("episode")).build()
        ))
        .selections(__hero)
        .build()
      )
}
