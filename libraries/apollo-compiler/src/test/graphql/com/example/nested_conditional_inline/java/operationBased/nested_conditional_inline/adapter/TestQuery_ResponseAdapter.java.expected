//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.BPossibleTypes;
import com.apollographql.apollo.api.BTerm;
import com.apollographql.apollo.api.BooleanExpression;
import com.apollographql.apollo.api.BooleanExpressions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.nested_conditional_inline.TestQuery;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).toJson(writer, customScalarAdapters, value.hero);
    }
  }

  public enum Hero implements Adapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnHuman _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onHuman = com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      TestQuery.OnDroid _onDroid = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onDroid = com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnDroid.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Hero(
        __typename,
        _name,
        _onHuman,
        _onDroid
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Hero value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      if (value.onHuman != null) {
        com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.toJson(writer, customScalarAdapters, value.onHuman);
      }

      if (value.onDroid != null) {
        com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnDroid.INSTANCE.toJson(writer, customScalarAdapters, value.onDroid);
      }
    }
  }

  public enum OnHuman implements Adapter<TestQuery.OnHuman> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("friends");

    @Override
    public TestQuery.OnHuman fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      List<TestQuery.Friend> _friends = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _friends = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Friend>(Friend.INSTANCE, true)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHuman(
        _friends
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnHuman value) throws IOException {
      writer.name("friends");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Friend>(Friend.INSTANCE, true)))).toJson(writer, customScalarAdapters, value.friends);
    }
  }

  public enum Friend implements Adapter<TestQuery.Friend> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name");

    @Override
    public TestQuery.Friend fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnHuman1 _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onHuman = com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Friend(
        __typename,
        _name,
        _onHuman
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Friend value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      if (value.onHuman != null) {
        com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman1.INSTANCE.toJson(writer, customScalarAdapters, value.onHuman);
      }
    }
  }

  public enum OnHuman1 implements Adapter<TestQuery.OnHuman1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("height");

    @Override
    public TestQuery.OnHuman1 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Double _height = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _height = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHuman1(
        _height
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnHuman1 value) throws IOException {
      writer.name("height");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height);
    }
  }

  public enum OnDroid implements Adapter<TestQuery.OnDroid> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("friends");

    @Override
    public TestQuery.OnDroid fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      List<TestQuery.Friend1> _friends = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _friends = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Friend1>(Friend1.INSTANCE, true)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnDroid(
        _friends
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnDroid value) throws IOException {
      writer.name("friends");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Friend1>(Friend1.INSTANCE, true)))).toJson(writer, customScalarAdapters, value.friends);
    }
  }

  public enum Friend1 implements Adapter<TestQuery.Friend1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name");

    @Override
    public TestQuery.Friend1 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnHuman2 _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onHuman = com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman2.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Friend1(
        __typename,
        _name,
        _onHuman
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Friend1 value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      if (value.onHuman != null) {
        com.example.nested_conditional_inline.adapter.TestQuery_ResponseAdapter.OnHuman2.INSTANCE.toJson(writer, customScalarAdapters, value.onHuman);
      }
    }
  }

  public enum OnHuman2 implements Adapter<TestQuery.OnHuman2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("height");

    @Override
    public TestQuery.OnHuman2 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Double _height = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _height = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHuman2(
        _height
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnHuman2 value) throws IOException {
      writer.name("height");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height);
    }
  }
}
