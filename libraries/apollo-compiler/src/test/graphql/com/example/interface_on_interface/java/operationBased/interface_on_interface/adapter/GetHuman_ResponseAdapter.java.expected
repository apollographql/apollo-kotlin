//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.interface_on_interface.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.BPossibleTypes;
import com.apollographql.apollo.api.BTerm;
import com.apollographql.apollo.api.BooleanExpression;
import com.apollographql.apollo.api.BooleanExpressions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.interface_on_interface.GetHuman;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class GetHuman_ResponseAdapter {
  public enum Data implements Adapter<GetHuman.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("human", "node");

    @Override
    public GetHuman.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      GetHuman.Human _human = null;
      GetHuman.Node _node = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _human = new ObjectAdapter<GetHuman.Human>(Human.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: _node = new ObjectAdapter<GetHuman.Node>(Node.INSTANCE, true).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_human, "human");
      Assertions.checkFieldNotMissing(_node, "node");

      return new GetHuman.Data(
        _human,
        _node
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        GetHuman.Data value) throws IOException {
      writer.name("human");
      new ObjectAdapter<GetHuman.Human>(Human.INSTANCE, false).toJson(writer, customScalarAdapters, value.human);

      writer.name("node");
      new ObjectAdapter<GetHuman.Node>(Node.INSTANCE, true).toJson(writer, customScalarAdapters, value.node);
    }
  }

  public enum Human implements Adapter<GetHuman.Human> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "height");

    @Override
    public GetHuman.Human fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _id = null;
      String _name = null;
      Double _height = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _height = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_height, "height");

      return new GetHuman.Human(
        _id,
        _name,
        _height
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        GetHuman.Human value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("height");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.height);
    }
  }

  public enum Node implements Adapter<GetHuman.Node> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public GetHuman.Node fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      GetHuman.OnHuman _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onHuman = com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.OnHuman.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new GetHuman.Node(
        __typename,
        _onHuman
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        GetHuman.Node value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onHuman != null) {
        com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.OnHuman.INSTANCE.toJson(writer, customScalarAdapters, value.onHuman);
      }
    }
  }

  public enum OnHuman implements Adapter<GetHuman.OnHuman> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("height");

    @Override
    public GetHuman.OnHuman fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Double _height = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _height = Adapters.DoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_height, "height");

      return new GetHuman.OnHuman(
        _height
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        GetHuman.OnHuman value) throws IOException {
      writer.name("height");
      Adapters.DoubleAdapter.toJson(writer, customScalarAdapters, value.height);
    }
  }
}
