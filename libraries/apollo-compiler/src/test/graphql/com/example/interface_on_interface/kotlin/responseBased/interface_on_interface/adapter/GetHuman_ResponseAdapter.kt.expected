//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.DoubleApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.example.interface_on_interface.GetHuman
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetHuman_ResponseAdapter {
  public object Data : ApolloAdapter<GetHuman.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("human", "node")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        GetHuman.Data {
      var _human: GetHuman.Data.Human? = null
      var _node: GetHuman.Data.Node? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _human = Human.obj().fromJson(reader, scalarAdapters)
          1 -> _node = Node.obj().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return GetHuman.Data(
        human = _human!!,
        node = _node!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: GetHuman.Data,
    ): Unit {
      writer.name("human")
      Human.obj().toJson(writer, scalarAdapters, value.human)

      writer.name("node")
      Node.obj().toJson(writer, scalarAdapters, value.node)
    }

    private object Human : ApolloAdapter<GetHuman.Data.Human> {
      public val RESPONSE_NAMES: List<String> = listOf("id", "name", "height")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          GetHuman.Data.Human {
        var _id: String? = null
        var _name: String? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _height = DoubleApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return GetHuman.Data.Human(
          id = _id!!,
          name = _name!!,
          height = _height!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: GetHuman.Data.Human,
      ): Unit {
        writer.name("id")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.id)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("height")
        DoubleApolloAdapter.toJson(writer, scalarAdapters, value.height)
      }
    }

    private object Node : ApolloAdapter<GetHuman.Data.Node> {
      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          GetHuman.Data.Node {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanNode.fromJson(reader, scalarAdapters, __typename)
          else
          -> OtherNode.fromJson(reader, scalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: GetHuman.Data.Node,
      ): Unit {
        when(value) {
          is GetHuman.Data.HumanNode -> HumanNode.toJson(writer, scalarAdapters, value)
          is GetHuman.Data.OtherNode -> OtherNode.toJson(writer, scalarAdapters, value)
        }
      }
    }

    public object HumanNode {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "height")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): GetHuman.Data.HumanNode {
        var __typename: String? = typename
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _height = DoubleApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return GetHuman.Data.HumanNode(
          __typename = __typename!!,
          height = _height!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: GetHuman.Data.HumanNode,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("height")
        DoubleApolloAdapter.toJson(writer, scalarAdapters, value.height)
      }
    }

    public object OtherNode {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): GetHuman.Data.OtherNode {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return GetHuman.Data.OtherNode(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: GetHuman.Data.OtherNode,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)
      }
    }
  }
}
