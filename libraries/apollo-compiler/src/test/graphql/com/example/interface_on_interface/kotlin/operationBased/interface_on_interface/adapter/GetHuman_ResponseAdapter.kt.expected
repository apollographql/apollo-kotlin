//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.interface_on_interface.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.interface_on_interface.GetHuman
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetHuman_ResponseAdapter {
  public object Data : Adapter<GetHuman.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("human", "node")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetHuman.Data {
      var _human: GetHuman.Data.Human? = null
      var _node: GetHuman.Data.Node? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _human = Human.obj().fromJson(reader, customScalarAdapters)
          1 -> _node = Node.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetHuman.Data(
        human = _human!!,
        node = _node!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetHuman.Data,
    ): Unit {
      writer.name("human")
      Human.obj().toJson(writer, customScalarAdapters, value.human)

      writer.name("node")
      Node.obj(true).toJson(writer, customScalarAdapters, value.node)
    }

    private object Human : Adapter<GetHuman.Data.Human> {
      public val RESPONSE_NAMES: List<String> = listOf("id", "name", "height")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          GetHuman.Data.Human {
        var _id: String? = null
        var _name: String? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _height = DoubleAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetHuman.Data.Human(
          id = _id!!,
          name = _name!!,
          height = _height!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetHuman.Data.Human,
      ): Unit {
        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("height")
        DoubleAdapter.toJson(writer, customScalarAdapters, value.height)
      }
    }

    private object Node : Adapter<GetHuman.Data.Node> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          GetHuman.Data.Node {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: GetHuman.Data.Node.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.Data.Node.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        return GetHuman.Data.Node(
          __typename = __typename,
          onHuman = _onHuman
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetHuman.Data.Node,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onHuman != null) {
          com.example.interface_on_interface.adapter.GetHuman_ResponseAdapter.Data.Node.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }
      }

      private object OnHuman : Adapter<GetHuman.Data.Node.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("height")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): GetHuman.Data.Node.OnHuman {
          var _height: Double? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _height = DoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetHuman.Data.Node.OnHuman(
            height = _height!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetHuman.Data.Node.OnHuman,
        ): Unit {
          writer.name("height")
          DoubleAdapter.toJson(writer, customScalarAdapters, value.height)
        }
      }
    }
  }
}
