//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_type_condition.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fragments_with_type_condition.TestQuery;
import com.example.fragments_with_type_condition.fragment.DroidDetails;
import com.example.fragments_with_type_condition.fragment.HumanDetails;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("r2", "luke");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      TestQuery.R2 _r2 = null;
      TestQuery.Luke _luke = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _r2 = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.R2>(R2.INSTANCE, true)).fromJson(reader, adapterContext); break;
          case 1: _luke = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Luke>(Luke.INSTANCE, true)).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _r2,
        _luke
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("r2");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.R2>(R2.INSTANCE, true)).toJson(writer, value.r2, adapterContext);

      writer.name("luke");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Luke>(Luke.INSTANCE, true)).toJson(writer, value.luke, adapterContext);
    }
  }

  public enum R2 implements CompositeAdapter<TestQuery.R2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.R2 fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      HumanDetails _humanDetails = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _humanDetails = com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.INSTANCE.fromJson(reader, adapterContext);
      }

      DroidDetails _droidDetails = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _droidDetails = com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.INSTANCE.fromJson(reader, adapterContext);
      }

      return new TestQuery.R2(
        __typename,
        _humanDetails,
        _droidDetails
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.R2 value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      if (value.humanDetails != null) {
        com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.INSTANCE.toJson(writer, value.humanDetails, adapterContext);
      }

      if (value.droidDetails != null) {
        com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.INSTANCE.toJson(writer, value.droidDetails, adapterContext);
      }
    }
  }

  public enum Luke implements CompositeAdapter<TestQuery.Luke> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Luke fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      HumanDetails _humanDetails = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _humanDetails = com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.INSTANCE.fromJson(reader, adapterContext);
      }

      DroidDetails _droidDetails = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _droidDetails = com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.INSTANCE.fromJson(reader, adapterContext);
      }

      return new TestQuery.Luke(
        __typename,
        _humanDetails,
        _droidDetails
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Luke value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      if (value.humanDetails != null) {
        com.example.fragments_with_type_condition.fragment.HumanDetailsImpl_ResponseAdapter.HumanDetails.INSTANCE.toJson(writer, value.humanDetails, adapterContext);
      }

      if (value.droidDetails != null) {
        com.example.fragments_with_type_condition.fragment.DroidDetailsImpl_ResponseAdapter.DroidDetails.INSTANCE.toJson(writer, value.droidDetails, adapterContext);
      }
    }
  }
}
