//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_type_condition.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.fragments_with_type_condition.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _r2: TestQuery.Data.R2? = null
      var _luke: TestQuery.Data.Luke? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _r2 = R2.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> _luke = Luke.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        r2 = _r2,
        luke = _luke
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("r2")
      R2.obj().nullable().toJson(writer, customScalarAdapters, value.r2)

      writer.name("luke")
      Luke.obj().nullable().toJson(writer, customScalarAdapters, value.luke)
    }

    private object R2 : Adapter<TestQuery.Data.R2> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.R2 {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanR2.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidR2.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherR2.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.R2,
      ) {
        when(value) {
          is TestQuery.Data.HumanR2 -> HumanR2.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.DroidR2 -> DroidR2.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherR2 -> OtherR2.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object HumanR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.HumanR2 {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HumanR2(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          height = _height
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.HumanR2,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("height")
        NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
      }
    }

    public object DroidR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.DroidR2 {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.DroidR2(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          primaryFunction = _primaryFunction
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.DroidR2,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("primaryFunction")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
      }
    }

    public object OtherR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherR2 {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherR2(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherR2,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }

    private object Luke : Adapter<TestQuery.Data.Luke> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Luke {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanLuke.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidLuke.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherLuke.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Luke,
      ) {
        when(value) {
          is TestQuery.Data.HumanLuke -> HumanLuke.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.DroidLuke -> DroidLuke.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherLuke -> OtherLuke.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object HumanLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.HumanLuke {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HumanLuke(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          height = _height
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.HumanLuke,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("height")
        NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
      }
    }

    public object DroidLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.DroidLuke {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.DroidLuke(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          primaryFunction = _primaryFunction
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.DroidLuke,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("primaryFunction")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
      }
    }

    public object OtherLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherLuke {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherLuke(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherLuke,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
