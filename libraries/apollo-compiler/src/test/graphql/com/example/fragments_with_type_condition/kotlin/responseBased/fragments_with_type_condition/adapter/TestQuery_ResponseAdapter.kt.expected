//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_type_condition.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableDoubleDataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragments_with_type_condition.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("r2", "luke")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _r2: TestQuery.Data.R2? = null
      var _luke: TestQuery.Data.Luke? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _r2 = R2.obj().nullable().deserializeData(reader, context)
          1 -> _luke = Luke.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        r2 = _r2,
        luke = _luke
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("r2")
      R2.obj().nullable().serializeData(writer, value.r2, context)

      writer.name("luke")
      Luke.obj().nullable().serializeData(writer, value.luke, context)
    }

    private object R2 : DataAdapter<TestQuery.Data.R2> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.R2 {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanR2.deserializeData(reader, context, __typename)
          "Droid",
          -> DroidR2.deserializeData(reader, context, __typename)
          else
          -> OtherR2.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.R2,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanR2 -> HumanR2.serializeData(writer, value, context)
          is TestQuery.Data.DroidR2 -> DroidR2.serializeData(writer, value, context)
          is TestQuery.Data.OtherR2 -> OtherR2.serializeData(writer, value, context)
        }
      }
    }

    public object HumanR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.HumanR2 {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.HumanR2(
          __typename = __typename!!,
          name = _name!!,
          height = _height
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanR2,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("height")
        NullableDoubleDataAdapter.serializeData(writer, value.height, context)
      }
    }

    public object DroidR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.DroidR2 {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.DroidR2(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.DroidR2,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("primaryFunction")
        NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)
      }
    }

    public object OtherR2 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherR2 {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherR2(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherR2,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)
      }
    }

    private object Luke : DataAdapter<TestQuery.Data.Luke> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Luke {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanLuke.deserializeData(reader, context, __typename)
          "Droid",
          -> DroidLuke.deserializeData(reader, context, __typename)
          else
          -> OtherLuke.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Luke,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanLuke -> HumanLuke.serializeData(writer, value, context)
          is TestQuery.Data.DroidLuke -> DroidLuke.serializeData(writer, value, context)
          is TestQuery.Data.OtherLuke -> OtherLuke.serializeData(writer, value, context)
        }
      }
    }

    public object HumanLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.HumanLuke {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.HumanLuke(
          __typename = __typename!!,
          name = _name!!,
          height = _height
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanLuke,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("height")
        NullableDoubleDataAdapter.serializeData(writer, value.height, context)
      }
    }

    public object DroidLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.DroidLuke {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.DroidLuke(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.DroidLuke,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("primaryFunction")
        NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)
      }
    }

    public object OtherLuke {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherLuke {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherLuke(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherLuke,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)
      }
    }
  }
}
