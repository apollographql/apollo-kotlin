//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.mutation_create_review.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

/**
 * The input object sent when passing in a color
 */
public class ColorInput {
  public final Optional<Integer> red;

  public final Optional<Double> green;

  public final Optional<Double> blue;

  public final Optional<Episode> enumWithDefaultValue;

  public final Optional<ReviewRefInput> reviewRefInput;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public ColorInput(Optional<Integer> red, Optional<Double> green, Optional<Double> blue,
      Optional<Episode> enumWithDefaultValue, Optional<ReviewRefInput> reviewRefInput) {
    this.red = red;
    this.green = green;
    this.blue = blue;
    this.enumWithDefaultValue = enumWithDefaultValue;
    this.reviewRefInput = reviewRefInput;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ColorInput) {
      ColorInput that = (ColorInput) o;
      return ((this.red == null) ? (that.red == null) : this.red.equals(that.red))
       &&((this.green == null) ? (that.green == null) : this.green.equals(that.green))
       &&((this.blue == null) ? (that.blue == null) : this.blue.equals(that.blue))
       &&((this.enumWithDefaultValue == null) ? (that.enumWithDefaultValue == null) : this.enumWithDefaultValue.equals(that.enumWithDefaultValue))
       &&((this.reviewRefInput == null) ? (that.reviewRefInput == null) : this.reviewRefInput.equals(that.reviewRefInput));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (red == null) ? 0 : red.hashCode();
      __h *= 1000003;
      __h ^= (green == null) ? 0 : green.hashCode();
      __h *= 1000003;
      __h ^= (blue == null) ? 0 : blue.hashCode();
      __h *= 1000003;
      __h ^= (enumWithDefaultValue == null) ? 0 : enumWithDefaultValue.hashCode();
      __h *= 1000003;
      __h ^= (reviewRefInput == null) ? 0 : reviewRefInput.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "ColorInput{"
        + "red=" + red + ", "
        + "green=" + green + ", "
        + "blue=" + blue + ", "
        + "enumWithDefaultValue=" + enumWithDefaultValue + ", "
        + "reviewRefInput=" + reviewRefInput
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Optional<Integer> red = Optional.absent();

    private Optional<Double> green = Optional.absent();

    private Optional<Double> blue = Optional.absent();

    private Optional<Episode> enumWithDefaultValue = Optional.absent();

    private Optional<ReviewRefInput> reviewRefInput = Optional.absent();

    Builder() {
    }

    /**
     * A description with a dollar sign: $10
     */
    public Builder red(Integer red) {
      this.red = Optional.present(red);
      return this;
    }

    /**
     * Green color
     */
    public Builder green(Double green) {
      this.green = Optional.present(green);
      return this;
    }

    /**
     * Blue color
     */
    public Builder blue(Double blue) {
      this.blue = Optional.present(blue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder enumWithDefaultValue(Episode enumWithDefaultValue) {
      this.enumWithDefaultValue = Optional.present(enumWithDefaultValue);
      return this;
    }

    /**
     * Circle ref to review input
     */
    public Builder reviewRefInput(ReviewRefInput reviewRefInput) {
      this.reviewRefInput = Optional.present(reviewRefInput);
      return this;
    }

    public ColorInput build() {
      return new ColorInput(red, green, blue, enumWithDefaultValue, reviewRefInput);
    }
  }
}
