//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.input_object_type

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Mutation
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.input_object_type.adapter.TestQuery_ResponseAdapter
import com.example.input_object_type.adapter.TestQuery_VariablesAdapter
import com.example.input_object_type.selections.TestQuerySelections
import com.example.input_object_type.type.Episode
import com.example.input_object_type.type.ReviewInput
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import com.example.input_object_type.type.Mutation as CompiledMutation

public data class TestQuery(
  public val ep: Episode,
  public val review: ReviewInput,
) : Mutation<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    TestQuery_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledMutation.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  public class Builder {
    private var ep: Episode? = null

    private var review: ReviewInput? = null

    public fun ep(ep: Episode): Builder {
      this.ep = ep
      return this
    }

    public fun review(review: ReviewInput): Builder {
      this.review = review
      return this
    }

    public fun build(): TestQuery = TestQuery(
      ep = ep ?: error("missing value for ep"),
      review = review ?: error("missing value for review"),
    )
  }

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val createReview: CreateReview?,
  ) : Mutation.Data {
    public data class CreateReview(
      /**
       * The number of stars this review gave, 1-5
       */
      public val stars: Int,
      /**
       * Comment about the movie
       */
      public val commentary: String?,
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "2a1de6af8435bb9169562d78714566aaf26a9741ef16b72f49955dc615237b09"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * mutation TestQuery($ep: Episode!, $review: ReviewInput!) {
     *   createReview(episode: $ep, review: $review) {
     *     stars
     *     commentary
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "mutation TestQuery(${'$'}ep: Episode!, ${'$'}review: ReviewInput!) { createReview(episode: ${'$'}ep, review: ${'$'}review) { stars commentary } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
