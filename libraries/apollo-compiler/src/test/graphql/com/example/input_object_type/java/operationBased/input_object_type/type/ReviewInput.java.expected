//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.input_object_type.type;

import com.apollographql.apollo.api.Optional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Date;
import java.util.List;

/**
 * The input object sent when someone is creating a new review
 */
public class ReviewInput {
  public final Integer stars;

  public final Optional<Integer> nullableIntFieldWithDefaultValue;

  public final Optional<String> commentary;

  public final ColorInput favoriteColor;

  public final Optional<Episode> enumWithDefaultValue;

  public final Optional<Episode> nonNullableEnumWithDefaultValue;

  public final Optional<Episode> nullableEnum;

  public final Optional<List<Date>> listOfCustomScalar;

  public final Optional<Date> customScalar;

  public final Optional<List<Episode>> listOfEnums;

  public final Optional<List<Integer>> listOfInt;

  public final Optional<List<String>> listOfString;

  public final List<String> listOfStringNonOptional;

  public final Optional<List<ColorInput>> listOfInputTypes;

  public final Optional<Boolean> booleanWithDefaultValue;

  public final Optional<Boolean> booleanNonOptional;

  public final Optional<List<List<String>>> listOfListOfString;

  public final Optional<List<List<Episode>>> listOfListOfEnum;

  public final Optional<List<List<Date>>> listOfListOfCustom;

  public final Optional<List<List<ColorInput>>> listOfListOfObject;

  public final Optional<String> CapitalizedField;

  public final Optional<Integer> CapitalizedInt;

  public final Optional<String> in;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public ReviewInput(Integer stars, Optional<Integer> nullableIntFieldWithDefaultValue,
      Optional<String> commentary, ColorInput favoriteColor, Optional<Episode> enumWithDefaultValue,
      Optional<Episode> nonNullableEnumWithDefaultValue, Optional<Episode> nullableEnum,
      Optional<List<Date>> listOfCustomScalar, Optional<Date> customScalar,
      Optional<List<Episode>> listOfEnums, Optional<List<Integer>> listOfInt,
      Optional<List<String>> listOfString, List<String> listOfStringNonOptional,
      Optional<List<ColorInput>> listOfInputTypes, Optional<Boolean> booleanWithDefaultValue,
      Optional<Boolean> booleanNonOptional, Optional<List<List<String>>> listOfListOfString,
      Optional<List<List<Episode>>> listOfListOfEnum, Optional<List<List<Date>>> listOfListOfCustom,
      Optional<List<List<ColorInput>>> listOfListOfObject, Optional<String> CapitalizedField,
      Optional<Integer> CapitalizedInt, Optional<String> in) {
    this.stars = stars;
    this.nullableIntFieldWithDefaultValue = nullableIntFieldWithDefaultValue;
    this.commentary = commentary;
    this.favoriteColor = favoriteColor;
    this.enumWithDefaultValue = enumWithDefaultValue;
    this.nonNullableEnumWithDefaultValue = nonNullableEnumWithDefaultValue;
    this.nullableEnum = nullableEnum;
    this.listOfCustomScalar = listOfCustomScalar;
    this.customScalar = customScalar;
    this.listOfEnums = listOfEnums;
    this.listOfInt = listOfInt;
    this.listOfString = listOfString;
    this.listOfStringNonOptional = listOfStringNonOptional;
    this.listOfInputTypes = listOfInputTypes;
    this.booleanWithDefaultValue = booleanWithDefaultValue;
    this.booleanNonOptional = booleanNonOptional;
    this.listOfListOfString = listOfListOfString;
    this.listOfListOfEnum = listOfListOfEnum;
    this.listOfListOfCustom = listOfListOfCustom;
    this.listOfListOfObject = listOfListOfObject;
    this.CapitalizedField = CapitalizedField;
    this.CapitalizedInt = CapitalizedInt;
    this.in = in;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ReviewInput) {
      ReviewInput that = (ReviewInput) o;
      return ((this.stars == null) ? (that.stars == null) : this.stars.equals(that.stars))
       &&((this.nullableIntFieldWithDefaultValue == null) ? (that.nullableIntFieldWithDefaultValue == null) : this.nullableIntFieldWithDefaultValue.equals(that.nullableIntFieldWithDefaultValue))
       &&((this.commentary == null) ? (that.commentary == null) : this.commentary.equals(that.commentary))
       &&((this.favoriteColor == null) ? (that.favoriteColor == null) : this.favoriteColor.equals(that.favoriteColor))
       &&((this.enumWithDefaultValue == null) ? (that.enumWithDefaultValue == null) : this.enumWithDefaultValue.equals(that.enumWithDefaultValue))
       &&((this.nonNullableEnumWithDefaultValue == null) ? (that.nonNullableEnumWithDefaultValue == null) : this.nonNullableEnumWithDefaultValue.equals(that.nonNullableEnumWithDefaultValue))
       &&((this.nullableEnum == null) ? (that.nullableEnum == null) : this.nullableEnum.equals(that.nullableEnum))
       &&((this.listOfCustomScalar == null) ? (that.listOfCustomScalar == null) : this.listOfCustomScalar.equals(that.listOfCustomScalar))
       &&((this.customScalar == null) ? (that.customScalar == null) : this.customScalar.equals(that.customScalar))
       &&((this.listOfEnums == null) ? (that.listOfEnums == null) : this.listOfEnums.equals(that.listOfEnums))
       &&((this.listOfInt == null) ? (that.listOfInt == null) : this.listOfInt.equals(that.listOfInt))
       &&((this.listOfString == null) ? (that.listOfString == null) : this.listOfString.equals(that.listOfString))
       &&((this.listOfStringNonOptional == null) ? (that.listOfStringNonOptional == null) : this.listOfStringNonOptional.equals(that.listOfStringNonOptional))
       &&((this.listOfInputTypes == null) ? (that.listOfInputTypes == null) : this.listOfInputTypes.equals(that.listOfInputTypes))
       &&((this.booleanWithDefaultValue == null) ? (that.booleanWithDefaultValue == null) : this.booleanWithDefaultValue.equals(that.booleanWithDefaultValue))
       &&((this.booleanNonOptional == null) ? (that.booleanNonOptional == null) : this.booleanNonOptional.equals(that.booleanNonOptional))
       &&((this.listOfListOfString == null) ? (that.listOfListOfString == null) : this.listOfListOfString.equals(that.listOfListOfString))
       &&((this.listOfListOfEnum == null) ? (that.listOfListOfEnum == null) : this.listOfListOfEnum.equals(that.listOfListOfEnum))
       &&((this.listOfListOfCustom == null) ? (that.listOfListOfCustom == null) : this.listOfListOfCustom.equals(that.listOfListOfCustom))
       &&((this.listOfListOfObject == null) ? (that.listOfListOfObject == null) : this.listOfListOfObject.equals(that.listOfListOfObject))
       &&((this.CapitalizedField == null) ? (that.CapitalizedField == null) : this.CapitalizedField.equals(that.CapitalizedField))
       &&((this.CapitalizedInt == null) ? (that.CapitalizedInt == null) : this.CapitalizedInt.equals(that.CapitalizedInt))
       &&((this.in == null) ? (that.in == null) : this.in.equals(that.in));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int __h = 1;
      __h *= 1000003;
      __h ^= (stars == null) ? 0 : stars.hashCode();
      __h *= 1000003;
      __h ^= (nullableIntFieldWithDefaultValue == null) ? 0 : nullableIntFieldWithDefaultValue.hashCode();
      __h *= 1000003;
      __h ^= (commentary == null) ? 0 : commentary.hashCode();
      __h *= 1000003;
      __h ^= (favoriteColor == null) ? 0 : favoriteColor.hashCode();
      __h *= 1000003;
      __h ^= (enumWithDefaultValue == null) ? 0 : enumWithDefaultValue.hashCode();
      __h *= 1000003;
      __h ^= (nonNullableEnumWithDefaultValue == null) ? 0 : nonNullableEnumWithDefaultValue.hashCode();
      __h *= 1000003;
      __h ^= (nullableEnum == null) ? 0 : nullableEnum.hashCode();
      __h *= 1000003;
      __h ^= (listOfCustomScalar == null) ? 0 : listOfCustomScalar.hashCode();
      __h *= 1000003;
      __h ^= (customScalar == null) ? 0 : customScalar.hashCode();
      __h *= 1000003;
      __h ^= (listOfEnums == null) ? 0 : listOfEnums.hashCode();
      __h *= 1000003;
      __h ^= (listOfInt == null) ? 0 : listOfInt.hashCode();
      __h *= 1000003;
      __h ^= (listOfString == null) ? 0 : listOfString.hashCode();
      __h *= 1000003;
      __h ^= (listOfStringNonOptional == null) ? 0 : listOfStringNonOptional.hashCode();
      __h *= 1000003;
      __h ^= (listOfInputTypes == null) ? 0 : listOfInputTypes.hashCode();
      __h *= 1000003;
      __h ^= (booleanWithDefaultValue == null) ? 0 : booleanWithDefaultValue.hashCode();
      __h *= 1000003;
      __h ^= (booleanNonOptional == null) ? 0 : booleanNonOptional.hashCode();
      __h *= 1000003;
      __h ^= (listOfListOfString == null) ? 0 : listOfListOfString.hashCode();
      __h *= 1000003;
      __h ^= (listOfListOfEnum == null) ? 0 : listOfListOfEnum.hashCode();
      __h *= 1000003;
      __h ^= (listOfListOfCustom == null) ? 0 : listOfListOfCustom.hashCode();
      __h *= 1000003;
      __h ^= (listOfListOfObject == null) ? 0 : listOfListOfObject.hashCode();
      __h *= 1000003;
      __h ^= (CapitalizedField == null) ? 0 : CapitalizedField.hashCode();
      __h *= 1000003;
      __h ^= (CapitalizedInt == null) ? 0 : CapitalizedInt.hashCode();
      __h *= 1000003;
      __h ^= (in == null) ? 0 : in.hashCode();
      $hashCode = __h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "ReviewInput{"
        + "stars=" + stars + ", "
        + "nullableIntFieldWithDefaultValue=" + nullableIntFieldWithDefaultValue + ", "
        + "commentary=" + commentary + ", "
        + "favoriteColor=" + favoriteColor + ", "
        + "enumWithDefaultValue=" + enumWithDefaultValue + ", "
        + "nonNullableEnumWithDefaultValue=" + nonNullableEnumWithDefaultValue + ", "
        + "nullableEnum=" + nullableEnum + ", "
        + "listOfCustomScalar=" + listOfCustomScalar + ", "
        + "customScalar=" + customScalar + ", "
        + "listOfEnums=" + listOfEnums + ", "
        + "listOfInt=" + listOfInt + ", "
        + "listOfString=" + listOfString + ", "
        + "listOfStringNonOptional=" + listOfStringNonOptional + ", "
        + "listOfInputTypes=" + listOfInputTypes + ", "
        + "booleanWithDefaultValue=" + booleanWithDefaultValue + ", "
        + "booleanNonOptional=" + booleanNonOptional + ", "
        + "listOfListOfString=" + listOfListOfString + ", "
        + "listOfListOfEnum=" + listOfListOfEnum + ", "
        + "listOfListOfCustom=" + listOfListOfCustom + ", "
        + "listOfListOfObject=" + listOfListOfObject + ", "
        + "CapitalizedField=" + CapitalizedField + ", "
        + "CapitalizedInt=" + CapitalizedInt + ", "
        + "in=" + in
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Integer stars;

    private Optional<Integer> nullableIntFieldWithDefaultValue = Optional.absent();

    private Optional<String> commentary = Optional.absent();

    private ColorInput favoriteColor;

    private Optional<Episode> enumWithDefaultValue = Optional.absent();

    private Optional<Episode> nonNullableEnumWithDefaultValue = Optional.absent();

    private Optional<Episode> nullableEnum = Optional.absent();

    private Optional<List<Date>> listOfCustomScalar = Optional.absent();

    private Optional<Date> customScalar = Optional.absent();

    private Optional<List<Episode>> listOfEnums = Optional.absent();

    private Optional<List<Integer>> listOfInt = Optional.absent();

    private Optional<List<String>> listOfString = Optional.absent();

    private List<String> listOfStringNonOptional;

    private Optional<List<ColorInput>> listOfInputTypes = Optional.absent();

    private Optional<Boolean> booleanWithDefaultValue = Optional.absent();

    private Optional<Boolean> booleanNonOptional = Optional.absent();

    private Optional<List<List<String>>> listOfListOfString = Optional.absent();

    private Optional<List<List<Episode>>> listOfListOfEnum = Optional.absent();

    private Optional<List<List<Date>>> listOfListOfCustom = Optional.absent();

    private Optional<List<List<ColorInput>>> listOfListOfObject = Optional.absent();

    private Optional<String> CapitalizedField = Optional.absent();

    private Optional<Integer> CapitalizedInt = Optional.absent();

    private Optional<String> in = Optional.absent();

    Builder() {
    }

    /**
     * 0-5 stars
     */
    public Builder stars(Integer stars) {
      this.stars = stars;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nullableIntFieldWithDefaultValue(Integer nullableIntFieldWithDefaultValue) {
      this.nullableIntFieldWithDefaultValue = Optional.present(nullableIntFieldWithDefaultValue);
      return this;
    }

    /**
     * Comment about the movie, optional
     */
    public Builder commentary(String commentary) {
      this.commentary = Optional.present(commentary);
      return this;
    }

    /**
     * Favorite color, optional
     */
    public Builder favoriteColor(ColorInput favoriteColor) {
      this.favoriteColor = favoriteColor;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder enumWithDefaultValue(Episode enumWithDefaultValue) {
      this.enumWithDefaultValue = Optional.present(enumWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nonNullableEnumWithDefaultValue(Episode nonNullableEnumWithDefaultValue) {
      this.nonNullableEnumWithDefaultValue = Optional.present(nonNullableEnumWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder nullableEnum(Episode nullableEnum) {
      this.nullableEnum = Optional.present(nullableEnum);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfCustomScalar(List<Date> listOfCustomScalar) {
      this.listOfCustomScalar = Optional.present(listOfCustomScalar);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder customScalar(Date customScalar) {
      this.customScalar = Optional.present(customScalar);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfEnums(List<Episode> listOfEnums) {
      this.listOfEnums = Optional.present(listOfEnums);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfInt(List<Integer> listOfInt) {
      this.listOfInt = Optional.present(listOfInt);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfString(List<String> listOfString) {
      this.listOfString = Optional.present(listOfString);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfStringNonOptional(List<String> listOfStringNonOptional) {
      this.listOfStringNonOptional = listOfStringNonOptional;
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfInputTypes(List<ColorInput> listOfInputTypes) {
      this.listOfInputTypes = Optional.present(listOfInputTypes);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder booleanWithDefaultValue(Boolean booleanWithDefaultValue) {
      this.booleanWithDefaultValue = Optional.present(booleanWithDefaultValue);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder booleanNonOptional(Boolean booleanNonOptional) {
      this.booleanNonOptional = Optional.present(booleanNonOptional);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfString(List<List<String>> listOfListOfString) {
      this.listOfListOfString = Optional.present(listOfListOfString);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfEnum(List<List<Episode>> listOfListOfEnum) {
      this.listOfListOfEnum = Optional.present(listOfListOfEnum);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfCustom(List<List<Date>> listOfListOfCustom) {
      this.listOfListOfCustom = Optional.present(listOfListOfCustom);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder listOfListOfObject(List<List<ColorInput>> listOfListOfObject) {
      this.listOfListOfObject = Optional.present(listOfListOfObject);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder CapitalizedField(String CapitalizedField) {
      this.CapitalizedField = Optional.present(CapitalizedField);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder CapitalizedInt(Integer CapitalizedInt) {
      this.CapitalizedInt = Optional.present(CapitalizedInt);
      return this;
    }

    /**
     * for test purpose only
     */
    public Builder in(String in) {
      this.in = Optional.present(in);
      return this;
    }

    public ReviewInput build() {
      return new ReviewInput(stars, nullableIntFieldWithDefaultValue, commentary, favoriteColor, enumWithDefaultValue, nonNullableEnumWithDefaultValue, nullableEnum, listOfCustomScalar, customScalar, listOfEnums, listOfInt, listOfString, listOfStringNonOptional, listOfInputTypes, booleanWithDefaultValue, booleanNonOptional, listOfListOfString, listOfListOfEnum, listOfListOfCustom, listOfListOfObject, CapitalizedField, CapitalizedInt, in);
    }
  }
}
