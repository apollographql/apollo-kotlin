//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.decapitalized_fields.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.decapitalized_fields.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("Horse")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _Horse: TestQuery.Data.Horse? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _Horse = Horse.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        horse = _Horse
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("Horse")
      Horse.obj().nullable().toJson(writer, scalarAdapters, value.horse)
    }

    private object Horse : Adapter<TestQuery.Data.Horse> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "Donkey", "Cow")

      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Horse {
        var __typename: String? = null
        var _Donkey: String? = null
        var _Cow: TestQuery.Data.Horse.Cow? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _Donkey = NullableStringAdapter.fromJson(reader, scalarAdapters)
            2 -> _Cow = Cow.obj().nullable().fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Horse(
          __typename = __typename!!,
          donkey = _Donkey,
          cow = _Cow
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Horse,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("Donkey")
        NullableStringAdapter.toJson(writer, scalarAdapters, value.donkey)

        writer.name("Cow")
        Cow.obj().nullable().toJson(writer, scalarAdapters, value.cow)
      }

      private object Cow : Adapter<TestQuery.Data.Horse.Cow> {
        public val RESPONSE_NAMES: List<String> = listOf("Moo")

        public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
            TestQuery.Data.Horse.Cow {
          var _Moo: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _Moo = NullableStringAdapter.fromJson(reader, scalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Horse.Cow(
            moo = _Moo
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          scalarAdapters: ScalarAdapters,
          `value`: TestQuery.Data.Horse.Cow,
        ): Unit {
          writer.name("Moo")
          NullableStringAdapter.toJson(writer, scalarAdapters, value.moo)
        }
      }
    }
  }
}
