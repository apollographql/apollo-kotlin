//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.decapitalized_fields.adapter

import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.decapitalized_fields.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("Horse")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _Horse: TestQuery.Data.Horse? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _Horse = Horse.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        horse = _Horse
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("Horse")
      Horse.obj(true).nullable().serializeData(writer, value.horse, context)
    }

    private object Horse : DataAdapter<TestQuery.Data.Horse> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "Donkey")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Horse {
        var __typename: String? = null
        var _Donkey: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _Donkey = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        reader.rewind()
        val _onHorse = com.example.decapitalized_fields.adapter.TestQuery_ResponseAdapter.Data.Horse.OnHorse.deserializeData(reader,
            context)

        reader.rewind()
        val _horseFragment = com.example.decapitalized_fields.fragment.HorseFragmentImpl_ResponseAdapter.HorseFragment.deserializeData(reader,
            context)

        return TestQuery.Data.Horse(
          __typename = __typename!!,
          donkey = _Donkey,
          onHorse = _onHorse,
          horseFragment = _horseFragment
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Horse,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("Donkey")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.donkey)

        com.example.decapitalized_fields.adapter.TestQuery_ResponseAdapter.Data.Horse.OnHorse.serializeData(writer,
            value.onHorse, context)

        com.example.decapitalized_fields.fragment.HorseFragmentImpl_ResponseAdapter.HorseFragment.serializeData(writer,
            value.horseFragment, context)
      }

      private object OnHorse : DataAdapter<TestQuery.Data.Horse.OnHorse> {
        public val RESPONSE_NAMES: List<String> = listOf("Cow")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Horse.OnHorse {
          var _Cow: TestQuery.Data.Horse.OnHorse.Cow? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _Cow = Cow.obj().nullable().deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Horse.OnHorse(
            cow = _Cow
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Horse.OnHorse,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("Cow")
          Cow.obj().nullable().serializeData(writer, value.cow, context)
        }

        private object Cow : DataAdapter<TestQuery.Data.Horse.OnHorse.Cow> {
          public val RESPONSE_NAMES: List<String> = listOf("Moo")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.Horse.OnHorse.Cow {
            var _Moo: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _Moo = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            return TestQuery.Data.Horse.OnHorse.Cow(
              moo = _Moo
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Horse.OnHorse.Cow,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("Moo")
            NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.moo)
          }
        }
      }
    }
  }
}
