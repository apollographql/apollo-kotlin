//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragments_with_friends.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableDoubleDataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragments_with_friends.TestQuery
import com.example.inline_fragments_with_friends.type.Episode
import com.example.inline_fragments_with_friends.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().serializeData(writer, value.hero, context)
    }

    private object Hero : DataAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero {
        var __typename: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestQuery.Data.Hero.OnHuman? = null
        if (possibleTypes("Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onHuman = com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.deserializeData(reader,
              context)
        }

        var _onDroid: TestQuery.Data.Hero.OnDroid? = null
        if (possibleTypes("Droid").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onDroid = com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.deserializeData(reader,
              context)
        }

        return TestQuery.Data.Hero(
          __typename = __typename,
          name = _name!!,
          onHuman = _onHuman,
          onDroid = _onDroid
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        if (value.onHuman != null) {
          com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnHuman.serializeData(writer,
              value.onHuman, context)
        }

        if (value.onDroid != null) {
          com.example.inline_fragments_with_friends.adapter.TestQuery_ResponseAdapter.Data.Hero.OnDroid.serializeData(writer,
              value.onDroid, context)
        }
      }

      private object OnHuman : DataAdapter<TestQuery.Data.Hero.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("height", "friends")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnHuman {
          var _height: Double? = null
          var _friends: List<TestQuery.Data.Hero.OnHuman.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
              1 -> _friends = Friend.obj().nullable().list().nullable().deserializeData(reader,
                  context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnHuman(
            height = _height,
            friends = _friends
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnHuman,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("height")
          NullableDoubleDataAdapter.serializeData(writer, value.height, context)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().serializeData(writer, value.friends, context)
        }

        private object Friend : DataAdapter<TestQuery.Data.Hero.OnHuman.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("appearsIn")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnHuman.Friend {
            var _appearsIn: List<Episode?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _appearsIn = Episode_ResponseAdapter.nullable().list().deserializeData(reader,
                    context)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnHuman.Friend(
              appearsIn = _appearsIn!!
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.OnHuman.Friend,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("appearsIn")
            Episode_ResponseAdapter.nullable().list().serializeData(writer, value.appearsIn,
                context)
          }
        }
      }

      private object OnDroid : DataAdapter<TestQuery.Data.Hero.OnDroid> {
        public val RESPONSE_NAMES: List<String> = listOf("primaryFunction", "friends")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnDroid {
          var _primaryFunction: String? = null
          var _friends: List<TestQuery.Data.Hero.OnDroid.Friend?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
              1 -> _friends = Friend.obj().nullable().list().nullable().deserializeData(reader,
                  context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnDroid(
            primaryFunction = _primaryFunction,
            friends = _friends
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnDroid,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("primaryFunction")
          NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)

          writer.name("friends")
          Friend.obj().nullable().list().nullable().serializeData(writer, value.friends, context)
        }

        private object Friend : DataAdapter<TestQuery.Data.Hero.OnDroid.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("id")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnDroid.Friend {
            var _id: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _id = StringDataAdapter.deserializeData(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnDroid.Friend(
              id = _id!!
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.OnDroid.Friend,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("id")
            StringDataAdapter.serializeData(writer, value.id, context)
          }
        }
      }
    }
  }
}
