//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_for_non_optional_field.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.inline_fragment_for_non_optional_field.TestQuery;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nonOptionalHero");

    @Override
    public TestQuery.Data deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      TestQuery.NonOptionalHero _nonOptionalHero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nonOptionalHero = new ObjectCompositeAdapter<TestQuery.NonOptionalHero>(NonOptionalHero.INSTANCE, true).deserializeComposite(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonOptionalHero, "nonOptionalHero");

      return new TestQuery.Data(
        _nonOptionalHero
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.Data value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("nonOptionalHero");
      new ObjectCompositeAdapter<TestQuery.NonOptionalHero>(NonOptionalHero.INSTANCE, true).serializeComposite(writer, value.nonOptionalHero, context);
    }
  }

  public enum NonOptionalHero implements CompositeAdapter<TestQuery.NonOptionalHero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name");

    @Override
    public TestQuery.NonOptionalHero deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      String __typename = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnHuman _onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onHuman = com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.deserializeComposite(reader, context);
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.NonOptionalHero(
        __typename,
        _name,
        _onHuman
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.NonOptionalHero value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);

      if (value.onHuman != null) {
        com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.OnHuman.INSTANCE.serializeComposite(writer, value.onHuman, context);
      }
    }
  }

  public enum OnHuman implements CompositeAdapter<TestQuery.OnHuman> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("height");

    @Override
    public TestQuery.OnHuman deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      Double _height = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _height = Adapters.NullableDoubleAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHuman(
        _height
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.OnHuman value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("height");
      Adapters.NullableDoubleAdapter.toJson(writer, CustomScalarAdapters.Empty, value.height);
    }
  }
}
