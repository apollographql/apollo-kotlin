//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_for_non_optional_field.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_for_non_optional_field.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("nonOptionalHero")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data {
      var _nonOptionalHero: TestQuery.Data.NonOptionalHero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _nonOptionalHero = NonOptionalHero.obj().deserializeComposite(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        nonOptionalHero = _nonOptionalHero!!
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("nonOptionalHero")
      NonOptionalHero.obj().serializeComposite(writer, value.nonOptionalHero, context)
    }

    private object NonOptionalHero : CompositeAdapter<TestQuery.Data.NonOptionalHero> {
      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.NonOptionalHero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanNonOptionalHero.deserializeComposite(reader, context, __typename)
          else
          -> OtherNonOptionalHero.deserializeComposite(reader, context, __typename)
        }
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.NonOptionalHero,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanNonOptionalHero -> HumanNonOptionalHero.serializeComposite(writer,
              value, context)
          is TestQuery.Data.OtherNonOptionalHero -> OtherNonOptionalHero.serializeComposite(writer,
              value, context)
        }
      }
    }

    public object HumanNonOptionalHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.HumanNonOptionalHero {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _height = NullableDoubleAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.HumanNonOptionalHero(
          __typename = __typename!!,
          name = _name!!,
          height = _height
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanNonOptionalHero,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("height")
        NullableDoubleAdapter.toJson(writer, CustomScalarAdapters.Empty, value.height)
      }
    }

    public object OtherNonOptionalHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.OtherNonOptionalHero {
        var __typename: String? = typename
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherNonOptionalHero(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherNonOptionalHero,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
      }
    }
  }
}
