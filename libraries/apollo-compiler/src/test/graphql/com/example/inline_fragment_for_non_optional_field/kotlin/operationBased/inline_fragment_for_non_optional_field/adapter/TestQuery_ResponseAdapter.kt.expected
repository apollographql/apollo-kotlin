//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_for_non_optional_field.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_for_non_optional_field.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("nonOptionalHero")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _nonOptionalHero: TestQuery.Data.NonOptionalHero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _nonOptionalHero = NonOptionalHero.obj(true).fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        nonOptionalHero = _nonOptionalHero ?: missingField(reader, "nonOptionalHero")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("nonOptionalHero")
      NonOptionalHero.obj(true).toJson(writer, value.nonOptionalHero, adapterContext)
    }

    private object NonOptionalHero : CompositeAdapter<TestQuery.Data.NonOptionalHero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.NonOptionalHero {
        var __typename: String? = null
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestQuery.Data.NonOptionalHero.OnHuman? = null
        if (possibleTypes("Human").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onHuman = com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.Data.NonOptionalHero.OnHuman.fromJson(reader,
              adapterContext)
        }

        return TestQuery.Data.NonOptionalHero(
          __typename = __typename,
          name = _name ?: missingField(reader, "name"),
          onHuman = _onHuman
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.NonOptionalHero,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        if (value.onHuman != null) {
          com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.Data.NonOptionalHero.OnHuman.toJson(writer,
              value.onHuman, adapterContext)
        }
      }

      private object OnHuman : CompositeAdapter<TestQuery.Data.NonOptionalHero.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("height")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.NonOptionalHero.OnHuman {
          var _height: Double? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _height = NullableDoubleAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.NonOptionalHero.OnHuman(
            height = _height
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.NonOptionalHero.OnHuman,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("height")
          NullableDoubleAdapter.toJson(writer, CustomScalarAdapters.Empty, value.height)
        }
      }
    }
  }
}
