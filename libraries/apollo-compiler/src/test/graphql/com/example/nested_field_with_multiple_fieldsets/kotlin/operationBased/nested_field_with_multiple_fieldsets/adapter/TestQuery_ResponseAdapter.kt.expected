//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("iface1")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _iface1: TestQuery.Data.Iface1? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _iface1 = Iface1.obj(true).nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        iface1 = _iface1
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("iface1")
      Iface1.obj(true).nullable().toJson(writer, value.iface1, adapterContext)
    }

    private object Iface1 : CompositeAdapter<TestQuery.Data.Iface1> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Iface1 {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onIface1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.fromJson(reader,
            adapterContext)

        var _onImpl1: TestQuery.Data.Iface1.OnImpl1? = null
        if (possibleTypes("Impl1").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onImpl1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.fromJson(reader,
              adapterContext)
        }

        return TestQuery.Data.Iface1(
          __typename = __typename,
          onIface1 = _onIface1,
          onImpl1 = _onImpl1
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Iface1,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.toJson(writer,
            value.onIface1, adapterContext)

        if (value.onImpl1 != null) {
          com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.toJson(writer,
              value.onImpl1, adapterContext)
        }
      }

      private object OnIface1 : CompositeAdapter<TestQuery.Data.Iface1.OnIface1> {
        public val RESPONSE_NAMES: List<String> = listOf("iface2")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Iface1.OnIface1 {
          var _iface2: TestQuery.Data.Iface1.OnIface1.Iface2? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _iface2 = Iface2.obj(true).nullable().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return TestQuery.Data.Iface1.OnIface1(
            iface2 = _iface2
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Iface1.OnIface1,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("iface2")
          Iface2.obj(true).nullable().toJson(writer, value.iface2, adapterContext)
        }

        private object Iface2 : CompositeAdapter<TestQuery.Data.Iface1.OnIface1.Iface2> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              TestQuery.Data.Iface1.OnIface1.Iface2 {
            var __typename: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.Iface2.OnIface2.fromJson(reader,
                adapterContext)

            var _onImpl2: TestQuery.Data.Iface1.OnIface1.Iface2.OnImpl2? = null
            if (possibleTypes("Impl2").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
              reader.rewind()
              _onImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.Iface2.OnImpl2.fromJson(reader,
                  adapterContext)
            }

            return TestQuery.Data.Iface1.OnIface1.Iface2(
              __typename = __typename,
              onIface2 = _onIface2,
              onImpl2 = _onImpl2
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Iface1.OnIface1.Iface2,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

            com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.Iface2.OnIface2.toJson(writer,
                value.onIface2, adapterContext)

            if (value.onImpl2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnIface1.Iface2.OnImpl2.toJson(writer,
                  value.onImpl2, adapterContext)
            }
          }

          private object OnIface2 : CompositeAdapter<TestQuery.Data.Iface1.OnIface1.Iface2.OnIface2>
              {
            public val RESPONSE_NAMES: List<String> = listOf("scalar1")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Iface1.OnIface1.Iface2.OnIface2 {
              var _scalar1: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _scalar1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.Iface1.OnIface1.Iface2.OnIface2(
                scalar1 = _scalar1
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Iface1.OnIface1.Iface2.OnIface2,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("scalar1")
              NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar1)
            }
          }

          private object OnImpl2 : CompositeAdapter<TestQuery.Data.Iface1.OnIface1.Iface2.OnImpl2> {
            public val RESPONSE_NAMES: List<String> = listOf("scalar2")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Iface1.OnIface1.Iface2.OnImpl2 {
              var _scalar2: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _scalar2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.Iface1.OnIface1.Iface2.OnImpl2(
                scalar2 = _scalar2
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Iface1.OnIface1.Iface2.OnImpl2,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("scalar2")
              NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar2)
            }
          }
        }
      }

      private object OnImpl1 : CompositeAdapter<TestQuery.Data.Iface1.OnImpl1> {
        public val RESPONSE_NAMES: List<String> = listOf("iface2")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Iface1.OnImpl1 {
          var _iface2: TestQuery.Data.Iface1.OnImpl1.Iface2? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _iface2 = Iface2.obj(true).nullable().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return TestQuery.Data.Iface1.OnImpl1(
            iface2 = _iface2
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Iface1.OnImpl1,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("iface2")
          Iface2.obj(true).nullable().toJson(writer, value.iface2, adapterContext)
        }

        private object Iface2 : CompositeAdapter<TestQuery.Data.Iface1.OnImpl1.Iface2> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              TestQuery.Data.Iface1.OnImpl1.Iface2 {
            var __typename: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            reader.rewind()
            val _onIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.Iface2.OnIface2.fromJson(reader,
                adapterContext)

            var _onImpl2: TestQuery.Data.Iface1.OnImpl1.Iface2.OnImpl2? = null
            if (possibleTypes("Impl2").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
              reader.rewind()
              _onImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.Iface2.OnImpl2.fromJson(reader,
                  adapterContext)
            }

            return TestQuery.Data.Iface1.OnImpl1.Iface2(
              __typename = __typename,
              onIface2 = _onIface2,
              onImpl2 = _onImpl2
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Iface1.OnImpl1.Iface2,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

            com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.Iface2.OnIface2.toJson(writer,
                value.onIface2, adapterContext)

            if (value.onImpl2 != null) {
              com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.Data.Iface1.OnImpl1.Iface2.OnImpl2.toJson(writer,
                  value.onImpl2, adapterContext)
            }
          }

          private object OnIface2 : CompositeAdapter<TestQuery.Data.Iface1.OnImpl1.Iface2.OnIface2>
              {
            public val RESPONSE_NAMES: List<String> = listOf("scalar3")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Iface1.OnImpl1.Iface2.OnIface2 {
              var _scalar3: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _scalar3 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.Iface1.OnImpl1.Iface2.OnIface2(
                scalar3 = _scalar3
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Iface1.OnImpl1.Iface2.OnIface2,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("scalar3")
              NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar3)
            }
          }

          private object OnImpl2 : CompositeAdapter<TestQuery.Data.Iface1.OnImpl1.Iface2.OnImpl2> {
            public val RESPONSE_NAMES: List<String> = listOf("scalar4")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Iface1.OnImpl1.Iface2.OnImpl2 {
              var _scalar4: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _scalar4 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.Iface1.OnImpl1.Iface2.OnImpl2(
                scalar4 = _scalar4
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Iface1.OnImpl1.Iface2.OnImpl2,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("scalar4")
              NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar4)
            }
          }
        }
      }
    }
  }
}
