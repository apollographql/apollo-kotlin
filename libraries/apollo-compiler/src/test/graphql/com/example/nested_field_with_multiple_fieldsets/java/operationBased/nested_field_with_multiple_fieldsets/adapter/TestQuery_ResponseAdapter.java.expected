//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.nested_field_with_multiple_fieldsets.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("iface1");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Iface1 _iface1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _iface1 = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface1>(Iface1.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _iface1
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("iface1");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface1>(Iface1.INSTANCE, true)).serializeData(writer, value.iface1, context);
    }
  }

  public enum Iface1 implements DataAdapter<TestQuery.Iface1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Iface1 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnIface1 _onIface1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface1.INSTANCE.deserializeData(reader, context);

      TestQuery.OnImpl1 _onImpl1 = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Impl1")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onImpl1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl1.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.Iface1(
        __typename,
        _onIface1,
        _onImpl1
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Iface1 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface1.INSTANCE.serializeData(writer, value.onIface1, context);

      if (value.onImpl1 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl1.INSTANCE.serializeData(writer, value.onImpl1, context);
      }
    }
  }

  public enum OnIface1 implements DataAdapter<TestQuery.OnIface1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("iface2");

    @Override
    public TestQuery.OnIface1 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Iface2 _iface2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _iface2 = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface2>(Iface2.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnIface1(
        _iface2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnIface1 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("iface2");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface2>(Iface2.INSTANCE, true)).serializeData(writer, value.iface2, context);
    }
  }

  public enum Iface2 implements DataAdapter<TestQuery.Iface2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Iface2 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnIface2 _onIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface2.INSTANCE.deserializeData(reader, context);

      TestQuery.OnImpl2 _onImpl2 = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Impl2")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl2.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.Iface2(
        __typename,
        _onIface2,
        _onImpl2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Iface2 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface2.INSTANCE.serializeData(writer, value.onIface2, context);

      if (value.onImpl2 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl2.INSTANCE.serializeData(writer, value.onImpl2, context);
      }
    }
  }

  public enum OnIface2 implements DataAdapter<TestQuery.OnIface2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("scalar1");

    @Override
    public TestQuery.OnIface2 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _scalar1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _scalar1 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnIface2(
        _scalar1
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnIface2 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("scalar1");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.scalar1, context);
    }
  }

  public enum OnImpl2 implements DataAdapter<TestQuery.OnImpl2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("scalar2");

    @Override
    public TestQuery.OnImpl2 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _scalar2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _scalar2 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnImpl2(
        _scalar2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnImpl2 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("scalar2");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.scalar2, context);
    }
  }

  public enum OnImpl1 implements DataAdapter<TestQuery.OnImpl1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("iface2");

    @Override
    public TestQuery.OnImpl1 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Iface21 _iface2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _iface2 = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface21>(Iface21.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnImpl1(
        _iface2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnImpl1 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("iface2");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Iface21>(Iface21.INSTANCE, true)).serializeData(writer, value.iface2, context);
    }
  }

  public enum Iface21 implements DataAdapter<TestQuery.Iface21> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Iface21 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnIface21 _onIface2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface21.INSTANCE.deserializeData(reader, context);

      TestQuery.OnImpl21 _onImpl2 = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Impl2")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl21.INSTANCE.deserializeData(reader, context);
      }

      return new TestQuery.Iface21(
        __typename,
        _onIface2,
        _onImpl2
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Iface21 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnIface21.INSTANCE.serializeData(writer, value.onIface2, context);

      if (value.onImpl2 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.OnImpl21.INSTANCE.serializeData(writer, value.onImpl2, context);
      }
    }
  }

  public enum OnIface21 implements DataAdapter<TestQuery.OnIface21> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("scalar3");

    @Override
    public TestQuery.OnIface21 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _scalar3 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _scalar3 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnIface21(
        _scalar3
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnIface21 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("scalar3");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.scalar3, context);
    }
  }

  public enum OnImpl21 implements DataAdapter<TestQuery.OnImpl21> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("scalar4");

    @Override
    public TestQuery.OnImpl21 deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _scalar4 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _scalar4 = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnImpl21(
        _scalar4
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnImpl21 value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("scalar4");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.scalar4, context);
    }
  }
}
