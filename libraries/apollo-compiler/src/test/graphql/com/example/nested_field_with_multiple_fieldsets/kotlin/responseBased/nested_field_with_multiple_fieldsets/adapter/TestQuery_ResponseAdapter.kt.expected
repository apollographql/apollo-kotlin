//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("iface1")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _iface1: TestQuery.Data.Iface1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _iface1 = Iface1.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        iface1 = _iface1
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("iface1")
      Iface1.obj().nullable().serializeData(writer, value.iface1, context)
    }

    private object Iface1 : DataAdapter<TestQuery.Data.Iface1> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Iface1 {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Impl1",
          -> Impl1Iface1.deserializeData(reader, context, __typename)
          else
          -> OtherIface1.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Iface1,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.Impl1Iface1 -> Impl1Iface1.serializeData(writer, value, context)
          is TestQuery.Data.OtherIface1 -> OtherIface1.serializeData(writer, value, context)
        }
      }
    }

    public object Impl1Iface1 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.Impl1Iface1 {
        var __typename: String? = typename
        var _iface2: TestQuery.Data.Impl1Iface1.Iface2? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _iface2 = Iface2.obj().nullable().deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.Impl1Iface1(
          __typename = __typename!!,
          iface2 = _iface2
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Impl1Iface1,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("iface2")
        Iface2.obj().nullable().serializeData(writer, value.iface2, context)
      }

      private object Iface2 : DataAdapter<TestQuery.Data.Impl1Iface1.Iface2> {
        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Impl1Iface1.Iface2 {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.deserializeData(reader, context, __typename)
            else
            -> OtherIface2.deserializeData(reader, context, __typename)
          }
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.Iface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          when(value) {
            is TestQuery.Data.Impl1Iface1.Impl2Iface2 -> Impl2Iface2.serializeData(writer, value,
                context)
            is TestQuery.Data.Impl1Iface1.OtherIface2 -> OtherIface2.serializeData(writer, value,
                context)
          }
        }
      }

      public object Impl2Iface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2",
            "scalar3", "scalar4")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.Impl1Iface1.Impl2Iface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar2: String? = null
          var _scalar3: String? = null
          var _scalar4: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _scalar1 = NullableStringDataAdapter.deserializeData(reader, context)
              2 -> _scalar2 = NullableStringDataAdapter.deserializeData(reader, context)
              3 -> _scalar3 = NullableStringDataAdapter.deserializeData(reader, context)
              4 -> _scalar4 = NullableStringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Impl1Iface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = _scalar1,
            scalar2 = _scalar2,
            scalar3 = _scalar3,
            scalar4 = _scalar4
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.Impl2Iface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("scalar1")
          NullableStringDataAdapter.serializeData(writer, value.scalar1, context)

          writer.name("scalar2")
          NullableStringDataAdapter.serializeData(writer, value.scalar2, context)

          writer.name("scalar3")
          NullableStringDataAdapter.serializeData(writer, value.scalar3, context)

          writer.name("scalar4")
          NullableStringDataAdapter.serializeData(writer, value.scalar4, context)
        }
      }

      public object OtherIface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.Impl1Iface1.OtherIface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar3: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _scalar1 = NullableStringDataAdapter.deserializeData(reader, context)
              2 -> _scalar3 = NullableStringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Impl1Iface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = _scalar1,
            scalar3 = _scalar3
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.OtherIface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("scalar1")
          NullableStringDataAdapter.serializeData(writer, value.scalar1, context)

          writer.name("scalar3")
          NullableStringDataAdapter.serializeData(writer, value.scalar3, context)
        }
      }
    }

    public object OtherIface1 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherIface1 {
        var __typename: String? = typename
        var _iface2: TestQuery.Data.OtherIface1.Iface2? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _iface2 = Iface2.obj().nullable().deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherIface1(
          __typename = __typename!!,
          iface2 = _iface2
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherIface1,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("iface2")
        Iface2.obj().nullable().serializeData(writer, value.iface2, context)
      }

      private object Iface2 : DataAdapter<TestQuery.Data.OtherIface1.Iface2> {
        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.OtherIface1.Iface2 {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.deserializeData(reader, context, __typename)
            else
            -> OtherIface2.deserializeData(reader, context, __typename)
          }
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.Iface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          when(value) {
            is TestQuery.Data.OtherIface1.Impl2Iface2 -> Impl2Iface2.serializeData(writer, value,
                context)
            is TestQuery.Data.OtherIface1.OtherIface2 -> OtherIface2.serializeData(writer, value,
                context)
          }
        }
      }

      public object Impl2Iface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.OtherIface1.Impl2Iface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar2: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _scalar1 = NullableStringDataAdapter.deserializeData(reader, context)
              2 -> _scalar2 = NullableStringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.OtherIface1.Impl2Iface2(
            __typename = __typename!!,
            scalar1 = _scalar1,
            scalar2 = _scalar2
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.Impl2Iface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("scalar1")
          NullableStringDataAdapter.serializeData(writer, value.scalar1, context)

          writer.name("scalar2")
          NullableStringDataAdapter.serializeData(writer, value.scalar2, context)
        }
      }

      public object OtherIface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1")

        public fun deserializeData(
          reader: JsonReader,
          context: DataAdapter.DeserializeDataContext,
          typename: String,
        ): TestQuery.Data.OtherIface1.OtherIface2 {
          var __typename: String? = typename
          var _scalar1: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _scalar1 = NullableStringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.OtherIface1.OtherIface2(
            __typename = __typename!!,
            scalar1 = _scalar1
          )
        }

        public fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.OtherIface2,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("scalar1")
          NullableStringDataAdapter.serializeData(writer, value.scalar1, context)
        }
      }
    }
  }
}
