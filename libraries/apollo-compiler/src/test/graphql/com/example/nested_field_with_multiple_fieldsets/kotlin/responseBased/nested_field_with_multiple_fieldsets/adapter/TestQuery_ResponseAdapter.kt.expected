//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("iface1")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _iface1: TestQuery.Data.Iface1? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _iface1 = Iface1.obj().nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        iface1 = _iface1
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("iface1")
      Iface1.obj().nullable().toJson(writer, value.iface1, adapterContext)
    }

    private object Iface1 : CompositeAdapter<TestQuery.Data.Iface1> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Iface1 {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Impl1",
          -> Impl1Iface1.fromJson(reader, adapterContext, __typename)
          else
          -> OtherIface1.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Iface1,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is TestQuery.Data.Impl1Iface1 -> Impl1Iface1.toJson(writer, value, adapterContext)
          is TestQuery.Data.OtherIface1 -> OtherIface1.toJson(writer, value, adapterContext)
        }
      }
    }

    public object Impl1Iface1 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.Impl1Iface1 {
        var __typename: String? = typename
        var _iface2: TestQuery.Data.Impl1Iface1.Iface2? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _iface2 = Iface2.obj().nullable().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return TestQuery.Data.Impl1Iface1(
          __typename = __typename ?: missingField(reader, "__typename"),
          iface2 = _iface2
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Impl1Iface1,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("iface2")
        Iface2.obj().nullable().toJson(writer, value.iface2, adapterContext)
      }

      private object Iface2 : CompositeAdapter<TestQuery.Data.Impl1Iface1.Iface2> {
        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Impl1Iface1.Iface2 {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromJson(reader, adapterContext, __typename)
            else
            -> OtherIface2.fromJson(reader, adapterContext, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.Iface2,
          adapterContext: CompositeAdapterContext,
        ) {
          when(value) {
            is TestQuery.Data.Impl1Iface1.Impl2Iface2 -> Impl2Iface2.toJson(writer, value,
                adapterContext)
            is TestQuery.Data.Impl1Iface1.OtherIface2 -> OtherIface2.toJson(writer, value,
                adapterContext)
          }
        }
      }

      public object Impl2Iface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2",
            "scalar3", "scalar4")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): TestQuery.Data.Impl1Iface1.Impl2Iface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar2: String? = null
          var _scalar3: String? = null
          var _scalar4: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _scalar1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              2 -> _scalar2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              3 -> _scalar3 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              4 -> _scalar4 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Impl1Iface1.Impl2Iface2(
            __typename = __typename ?: missingField(reader, "__typename"),
            scalar1 = _scalar1,
            scalar2 = _scalar2,
            scalar3 = _scalar3,
            scalar4 = _scalar4
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.Impl2Iface2,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar1)

          writer.name("scalar2")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar2)

          writer.name("scalar3")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar3)

          writer.name("scalar4")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar4)
        }
      }

      public object OtherIface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): TestQuery.Data.Impl1Iface1.OtherIface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar3: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _scalar1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              2 -> _scalar3 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Impl1Iface1.OtherIface2(
            __typename = __typename ?: missingField(reader, "__typename"),
            scalar1 = _scalar1,
            scalar3 = _scalar3
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Impl1Iface1.OtherIface2,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar1)

          writer.name("scalar3")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar3)
        }
      }
    }

    public object OtherIface1 {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.OtherIface1 {
        var __typename: String? = typename
        var _iface2: TestQuery.Data.OtherIface1.Iface2? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _iface2 = Iface2.obj().nullable().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return TestQuery.Data.OtherIface1(
          __typename = __typename ?: missingField(reader, "__typename"),
          iface2 = _iface2
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherIface1,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("iface2")
        Iface2.obj().nullable().toJson(writer, value.iface2, adapterContext)
      }

      private object Iface2 : CompositeAdapter<TestQuery.Data.OtherIface1.Iface2> {
        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.OtherIface1.Iface2 {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Impl2",
            -> Impl2Iface2.fromJson(reader, adapterContext, __typename)
            else
            -> OtherIface2.fromJson(reader, adapterContext, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.Iface2,
          adapterContext: CompositeAdapterContext,
        ) {
          when(value) {
            is TestQuery.Data.OtherIface1.Impl2Iface2 -> Impl2Iface2.toJson(writer, value,
                adapterContext)
            is TestQuery.Data.OtherIface1.OtherIface2 -> OtherIface2.toJson(writer, value,
                adapterContext)
          }
        }
      }

      public object Impl2Iface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): TestQuery.Data.OtherIface1.Impl2Iface2 {
          var __typename: String? = typename
          var _scalar1: String? = null
          var _scalar2: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _scalar1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              2 -> _scalar2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.OtherIface1.Impl2Iface2(
            __typename = __typename ?: missingField(reader, "__typename"),
            scalar1 = _scalar1,
            scalar2 = _scalar2
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.Impl2Iface2,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar1)

          writer.name("scalar2")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar2)
        }
      }

      public object OtherIface2 {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): TestQuery.Data.OtherIface1.OtherIface2 {
          var __typename: String? = typename
          var _scalar1: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _scalar1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.OtherIface1.OtherIface2(
            __typename = __typename ?: missingField(reader, "__typename"),
            scalar1 = _scalar1
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.OtherIface1.OtherIface2,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("scalar1")
          NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.scalar1)
        }
      }
    }
  }
}
