//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.nested_field_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("iface1")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _iface1: TestQuery.Iface1? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _iface1 = Iface1.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        iface1 = _iface1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("iface1")
      Iface1.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface1)
    }
  }

  public object Iface1 : Adapter<TestQuery.Iface1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Iface1 {
      var __typename: String? = null
      var _iface2: TestQuery.Iface21? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _iface2 = Iface21.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asImpl1: TestQuery.AsImpl1? = null
      if (possibleTypes("Impl1").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asImpl1 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl1.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Iface1(
        __typename = __typename,
        iface2 = _iface2,
        asImpl1 = _asImpl1
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Iface1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("iface2")
      Iface21.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface2)

      if (value.asImpl1 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl1.toJson(writer,
            customScalarAdapters, value.asImpl1)
      }
    }
  }

  public object Iface21 : Adapter<TestQuery.Iface21> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Iface21 {
      var __typename: String? = null
      var _scalar1: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asImpl21: TestQuery.AsImpl21? = null
      if (possibleTypes("Impl2").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asImpl21 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl21.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Iface21(
        __typename = __typename,
        scalar1 = _scalar1,
        asImpl21 = _asImpl21
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Iface21,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("scalar1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)

      if (value.asImpl21 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl21.toJson(writer,
            customScalarAdapters, value.asImpl21)
      }
    }
  }

  public object AsImpl21 : Adapter<TestQuery.AsImpl21> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsImpl21 {
      var __typename: String? = null
      var _scalar1: String? = null
      var _scalar2: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _scalar2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsImpl21(
        __typename = __typename!!,
        scalar1 = _scalar1,
        scalar2 = _scalar2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsImpl21,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("scalar1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)

      writer.name("scalar2")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar2)
    }
  }

  public object AsImpl1 : Adapter<TestQuery.AsImpl1> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "iface2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsImpl1 {
      var __typename: String? = null
      var _iface2: TestQuery.Iface2? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _iface2 = Iface2.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsImpl1(
        __typename = __typename!!,
        iface2 = _iface2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsImpl1,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("iface2")
      Iface2.obj(true).nullable().toJson(writer, customScalarAdapters, value.iface2)
    }
  }

  public object Iface2 : Adapter<TestQuery.Iface2> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Iface2 {
      var __typename: String? = null
      var _scalar1: String? = null
      var _scalar3: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _scalar3 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asImpl2: TestQuery.AsImpl2? = null
      if (possibleTypes("Impl2").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asImpl2 = com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl2.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Iface2(
        __typename = __typename,
        scalar1 = _scalar1,
        scalar3 = _scalar3,
        asImpl2 = _asImpl2
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Iface2,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("scalar1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)

      writer.name("scalar3")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar3)

      if (value.asImpl2 != null) {
        com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter.AsImpl2.toJson(writer,
            customScalarAdapters, value.asImpl2)
      }
    }
  }

  public object AsImpl2 : Adapter<TestQuery.AsImpl2> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "scalar1", "scalar3", "scalar2",
        "scalar4")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsImpl2 {
      var __typename: String? = null
      var _scalar1: String? = null
      var _scalar3: String? = null
      var _scalar2: String? = null
      var _scalar4: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _scalar1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _scalar3 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _scalar2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _scalar4 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsImpl2(
        __typename = __typename!!,
        scalar1 = _scalar1,
        scalar3 = _scalar3,
        scalar2 = _scalar2,
        scalar4 = _scalar4
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsImpl2,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("scalar1")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar1)

      writer.name("scalar3")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar3)

      writer.name("scalar2")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar2)

      writer.name("scalar4")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.scalar4)
    }
  }
}
