//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_field_with_multiple_fieldsets

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.nested_field_with_multiple_fieldsets.adapter.TestQuery_ResponseAdapter
import com.example.nested_field_with_multiple_fieldsets.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import com.example.nested_field_with_multiple_fieldsets.type.Query as CompiledQuery

public class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val iface1: Iface1?,
  ) : Query.Data {
    public sealed interface Iface1 {
      public val __typename: String

      public val iface2: Iface2?

      public sealed interface Iface2 {
        public val __typename: String

        public val scalar1: String?

        public companion object {
          @Suppress("USELESS_CAST")
          public fun Iface2.asImpl2(): Impl2Iface2? = this as? Impl2Iface2
        }
      }

      public sealed interface Impl2Iface2 : Iface2 {
        override val __typename: String

        override val scalar1: String?

        public val scalar2: String?
      }

      public companion object {
        @Suppress("USELESS_CAST")
        public fun Iface1.asImpl1(): Impl1Iface1? = this as? Impl1Iface1
      }
    }

    public data class Impl1Iface1(
      override val __typename: String,
      override val iface2: Iface2?,
    ) : Iface1 {
      public sealed interface Iface2 : Iface1.Iface2 {
        override val __typename: String

        override val scalar1: String?

        public val scalar3: String?

        public companion object {
          @Suppress("USELESS_CAST")
          public fun Iface2.asImpl2(): Impl2Iface2? = this as? Impl2Iface2
        }
      }

      public data class Impl2Iface2(
        override val __typename: String,
        override val scalar1: String?,
        override val scalar2: String?,
        override val scalar3: String?,
        public val scalar4: String?,
      ) : Iface2,
          Iface1.Impl2Iface2

      public data class OtherIface2(
        override val __typename: String,
        override val scalar1: String?,
        override val scalar3: String?,
      ) : Iface2,
          Iface1.Iface2
    }

    public data class OtherIface1(
      override val __typename: String,
      override val iface2: Iface2?,
    ) : Iface1 {
      public sealed interface Iface2 : Iface1.Iface2 {
        override val __typename: String

        override val scalar1: String?

        public companion object {
          @Suppress("USELESS_CAST")
          public fun Iface2.asImpl2(): Impl2Iface2? = this as? Impl2Iface2
        }
      }

      public data class Impl2Iface2(
        override val __typename: String,
        override val scalar1: String?,
        override val scalar2: String?,
      ) : Iface2,
          Iface1.Impl2Iface2

      public data class OtherIface2(
        override val __typename: String,
        override val scalar1: String?,
      ) : Iface2,
          Iface1.Iface2
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "39e196d404a902ae82f38401080d30922ca3eadf8fd6dc53ef53d4673c6af264"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   iface1 {
     *     __typename
     *     ... on Iface1 {
     *       iface2 {
     *         __typename
     *         ... on Iface2 {
     *           scalar1
     *         }
     *         ... on Impl2 {
     *           scalar2
     *         }
     *       }
     *     }
     *     ... on Impl1 {
     *       iface2 {
     *         __typename
     *         ... on Iface2 {
     *           scalar3
     *         }
     *         ... on Impl2 {
     *           scalar4
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { iface1 { __typename ... on Iface1 { iface2 { __typename ... on Iface2 { scalar1 } ... on Impl2 { scalar2 } } } ... on Impl1 { iface2 { __typename ... on Iface2 { scalar3 } ... on Impl2 { scalar4 } } } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
