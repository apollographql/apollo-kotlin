//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_with_multiple_fieldsets.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.fragment_with_multiple_fieldsets.TestQuery;
import com.example.fragment_with_multiple_fieldsets.fragment.IFragment;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("i");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.I _i = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _i = new NullableAdapter<>(new ObjectAdapter<TestQuery.I>(I.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _i
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("i");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.I>(I.INSTANCE, true)).toJson(writer, customScalarAdapters, value.i);
    }
  }

  public enum I implements Adapter<TestQuery.I> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.I fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) throws
        IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      reader.rewind();
      IFragment _iFragment = com.example.fragment_with_multiple_fieldsets.fragment.IFragmentImpl_ResponseAdapter.IFragment.INSTANCE.fromJson(reader, customScalarAdapters);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestQuery.I(
        __typename,
        _iFragment
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.I value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      com.example.fragment_with_multiple_fieldsets.fragment.IFragmentImpl_ResponseAdapter.IFragment.INSTANCE.toJson(writer, customScalarAdapters, value.iFragment);
    }
  }
}
