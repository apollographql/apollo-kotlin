//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragment_with_multiple_fieldsets.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.fragment_with_multiple_fieldsets.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("i")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _i: TestQuery.Data.I? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _i = I.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        i = _i
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("i")
      I.obj().nullable().toJson(writer, scalarAdapters, value.i)
    }

    private object I : Adapter<TestQuery.Data.I> {
      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.I {
        val __typename = reader.readTypename()
        return when(__typename) {
          "A",
          -> AI.fromJson(reader, scalarAdapters, __typename)
          else
          -> OtherI.fromJson(reader, scalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.I,
      ): Unit {
        when(value) {
          is TestQuery.Data.AI -> AI.toJson(writer, scalarAdapters, value)
          is TestQuery.Data.OtherI -> OtherI.toJson(writer, scalarAdapters, value)
        }
      }
    }

    public object AI {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.AI {
        var __typename: String? = typename
        var _fieldA: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            1 -> _fieldA = NullableStringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.AI(
          __typename = __typename!!,
          fieldA = _fieldA
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.AI,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("fieldA")
        NullableStringAdapter.toJson(writer, scalarAdapters, value.fieldA)
      }
    }

    public object OtherI {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherI {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherI(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.OtherI,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, scalarAdapters, value.__typename)
      }
    }
  }
}
