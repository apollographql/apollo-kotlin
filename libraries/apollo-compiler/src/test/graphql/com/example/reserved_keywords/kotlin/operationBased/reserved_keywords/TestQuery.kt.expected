//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter
import com.example.reserved_keywords.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import com.example.reserved_keywords.type.Query as CompiledQuery

public class TestQuery() : Query<TestQuery.Data> {
  override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  override fun hashCode(): Int = this::class.hashCode()

  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    // This operation doesn't have any variable
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val `yield`: Yield?,
    public val objects: List<Object?>?,
  ) : Query.Data {
    public fun objectsFilterNotNull(): List<Object>? = objects?.filterNotNull()

    public data class Yield(
      /**
       * The ID of the character
       */
      public val `while`: String,
      /**
       * The name of the character
       */
      public val it: String,
    )

    public data class Object(
      public val __typename: String,
      /**
       * Synthetic field for inline fragment on Character
       */
      public val onCharacter: OnCharacter?,
    ) {
      public data class OnCharacter(
        /**
         * The name of the character
         */
        public val name: String,
      )
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "d2f555fdc0bd9ea0a928c39aa7818ac66b0c0a0870772b1fb57387c3c3cf8577"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery {
     *   yield: hero {
     *     while: id
     *     it: name
     *   }
     *   objects: search(text: "abc") {
     *     __typename
     *     ... on Character {
     *       name
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery { yield: hero { while: id it: name } objects: search(text: \"abc\") { __typename ... on Character { name } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
