//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _yield: TestQuery.Data.Yield? = null
      var _objects: List<TestQuery.Data.Object?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _yield = Yield.obj().nullable().fromJson(reader, adapterContext)
          1 -> _objects = Object.obj().nullable().list().nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        `yield` = _yield,
        objects = _objects
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("yield")
      Yield.obj().nullable().toJson(writer, value.`yield`, adapterContext)

      writer.name("objects")
      Object.obj().nullable().list().nullable().toJson(writer, value.objects, adapterContext)
    }

    private object Yield : CompositeAdapter<TestQuery.Data.Yield> {
      public val RESPONSE_NAMES: List<String> = listOf("while", "it")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Yield {
        var _while: String? = null
        var _it: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _while = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _it = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          `while` = _while ?: missingField(reader, "while"),
          it = _it ?: missingField(reader, "it")
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Yield,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("while")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.`while`)

        writer.name("it")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.it)
      }
    }

    private object Object : CompositeAdapter<TestQuery.Data.Object> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Object {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterObject.fromJson(reader, adapterContext, __typename)
          else
          -> OtherObject.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Object,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is TestQuery.Data.CharacterObject -> CharacterObject.toJson(writer, value, adapterContext)
          is TestQuery.Data.OtherObject -> OtherObject.toJson(writer, value, adapterContext)
        }
      }
    }

    public object CharacterObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.CharacterObject {
        var __typename: String? = typename
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.CharacterObject(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.CharacterObject,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
      }
    }

    public object OtherObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.OtherObject {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherObject(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherObject,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
