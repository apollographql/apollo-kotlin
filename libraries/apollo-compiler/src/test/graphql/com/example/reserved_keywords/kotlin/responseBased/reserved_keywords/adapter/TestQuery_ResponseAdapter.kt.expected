//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _yield: TestQuery.Data.Yield? = null
      var _objects: List<TestQuery.Data.Object?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _yield = Yield.obj().nullable().deserializeData(reader, context)
          1 -> _objects = Object.obj().nullable().list().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        `yield` = _yield,
        objects = _objects
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("yield")
      Yield.obj().nullable().serializeData(writer, value.`yield`, context)

      writer.name("objects")
      Object.obj().nullable().list().nullable().serializeData(writer, value.objects, context)
    }

    private object Yield : DataAdapter<TestQuery.Data.Yield> {
      public val RESPONSE_NAMES: List<String> = listOf("while", "it")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Yield {
        var _while: String? = null
        var _it: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _while = StringDataAdapter.deserializeData(reader, context)
            1 -> _it = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          `while` = _while!!,
          it = _it!!
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Yield,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("while")
        StringDataAdapter.serializeData(writer, value.`while`, context)

        writer.name("it")
        StringDataAdapter.serializeData(writer, value.it, context)
      }
    }

    private object Object : DataAdapter<TestQuery.Data.Object> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Object {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterObject.deserializeData(reader, context, __typename)
          else
          -> OtherObject.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Object,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.CharacterObject -> CharacterObject.serializeData(writer, value, context)
          is TestQuery.Data.OtherObject -> OtherObject.serializeData(writer, value, context)
        }
      }
    }

    public object CharacterObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.CharacterObject {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.CharacterObject(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.CharacterObject,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)
      }
    }

    public object OtherObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherObject {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherObject(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherObject,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)
      }
    }
  }
}
