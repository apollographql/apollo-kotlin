//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListCompositeAdapter;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.reserved_keywords.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("yield", "objects");

    @Override
    public TestQuery.Data deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      TestQuery.Yield _yield = null;
      List<TestQuery.Object> _objects = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _yield = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Yield>(Yield.INSTANCE, false)).deserializeComposite(reader, context); break;
          case 1: _objects = new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Object>(Object.INSTANCE, true)))).deserializeComposite(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _yield,
        _objects
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.Data value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("yield");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Yield>(Yield.INSTANCE, false)).serializeComposite(writer, value.yield, context);

      writer.name("objects");
      new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Object>(Object.INSTANCE, true)))).serializeComposite(writer, value.objects, context);
    }
  }

  public enum Yield implements CompositeAdapter<TestQuery.Yield> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("while", "it");

    @Override
    public TestQuery.Yield deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      String _while = null;
      String _it = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _while = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _it = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_while, "while");
      Assertions.checkFieldNotMissing(_it, "it");

      return new TestQuery.Yield(
        _while,
        _it
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.Yield value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("while");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.while_);

      writer.name("it");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.it);
    }
  }

  public enum Object implements CompositeAdapter<TestQuery.Object> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Object deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnCharacter _onCharacter = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid","Human")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onCharacter = com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.deserializeComposite(reader, context);
      }

      return new TestQuery.Object(
        __typename,
        _onCharacter
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.Object value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      if (value.onCharacter != null) {
        com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.serializeComposite(writer, value.onCharacter, context);
      }
    }
  }

  public enum OnCharacter implements CompositeAdapter<TestQuery.OnCharacter> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.OnCharacter deserializeComposite(JsonReader reader,
        CompositeAdapter.DeserializeCompositeContext context) throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.OnCharacter(
        _name
      );
    }

    @Override
    public void serializeComposite(JsonWriter writer, TestQuery.OnCharacter value,
        CompositeAdapter.SerializeCompositeContext context) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);
    }
  }
}
