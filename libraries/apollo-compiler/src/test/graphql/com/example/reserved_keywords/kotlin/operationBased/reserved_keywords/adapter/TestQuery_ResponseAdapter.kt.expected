//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data {
      var _yield: TestQuery.Data.Yield? = null
      var _objects: List<TestQuery.Data.Object?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _yield = Yield.obj().nullable().deserializeComposite(reader, context)
          1 -> _objects = Object.obj(true).nullable().list().nullable().deserializeComposite(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        `yield` = _yield,
        objects = _objects
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("yield")
      Yield.obj().nullable().serializeComposite(writer, value.`yield`, context)

      writer.name("objects")
      Object.obj(true).nullable().list().nullable().serializeComposite(writer, value.objects,
          context)
    }

    private object Yield : CompositeAdapter<TestQuery.Data.Yield> {
      public val RESPONSE_NAMES: List<String> = listOf("while", "it")

      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.Yield {
        var _while: String? = null
        var _it: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _while = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _it = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          `while` = _while!!,
          it = _it!!
        )
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.Yield,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("while")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.`while`)

        writer.name("it")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.it)
      }
    }

    private object Object : CompositeAdapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.Object {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onCharacter: TestQuery.Data.Object.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onCharacter = com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.deserializeComposite(reader,
              context)
        }

        return TestQuery.Data.Object(
          __typename = __typename,
          onCharacter = _onCharacter
        )
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.Object,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        if (value.onCharacter != null) {
          com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.serializeComposite(writer,
              value.onCharacter, context)
        }
      }

      private object OnCharacter : CompositeAdapter<TestQuery.Data.Object.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun deserializeComposite(reader: JsonReader,
            context: CompositeAdapter.DeserializeCompositeContext):
            TestQuery.Data.Object.OnCharacter {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.Object.OnCharacter(
            name = _name!!
          )
        }

        public override fun serializeComposite(
          writer: JsonWriter,
          `value`: TestQuery.Data.Object.OnCharacter,
          context: CompositeAdapter.SerializeCompositeContext,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
        }
      }
    }
  }
}
