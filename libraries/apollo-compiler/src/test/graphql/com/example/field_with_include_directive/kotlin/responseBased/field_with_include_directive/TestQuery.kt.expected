//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.field_with_include_directive

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.field_with_include_directive.adapter.TestQuery_ResponseAdapter
import com.example.field_with_include_directive.adapter.TestQuery_VariablesAdapter
import com.example.field_with_include_directive.selections.TestQuerySelections
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import com.example.field_with_include_directive.type.Query as CompiledQuery

public data class TestQuery(
  public val includeName: Boolean,
  public val skipFriends: Boolean,
) : Query<TestQuery.Data> {
  override fun id(): String = OPERATION_ID

  override fun document(): String = OPERATION_DOCUMENT

  override fun name(): String = OPERATION_NAME

  override fun serializeVariables(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    withDefaultValues: Boolean,
  ) {
    TestQuery_VariablesAdapter.serializeVariables(writer, this, customScalarAdapters, withDefaultValues)
  }

  override fun adapter(): Adapter<Data> = TestQuery_ResponseAdapter.Data.obj()

  override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = CompiledQuery.type
  )
  .selections(selections = TestQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(TestQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val hero: Hero?,
  ) : Query.Data {
    public data class Hero(
      /**
       * The name of the character
       */
      public val name: String?,
      /**
       * The friends of the character exposed as a connection with edges
       */
      public val friendsConnection: FriendsConnection?,
    ) {
      public data class FriendsConnection(
        /**
         * The total number of friends
         */
        public val totalCount: Int?,
      )
    }
  }

  public companion object {
    public const val OPERATION_ID: String =
        "7d815b13df95ab484c7b20cb8059c07e3a8688d1ea0a251bff6d3f0b6fdb1cb7"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * ```
     * query TestQuery($includeName: Boolean!, $skipFriends: Boolean!) @operationDirective(dummy: "hello") {
     *   hero {
     *     name @include(if: $includeName)
     *     friendsConnection @skip(if: $skipFriends) {
     *       totalCount
     *     }
     *   }
     * }
     * ```
     */
    public val OPERATION_DOCUMENT: String
      get() = "query TestQuery(${'$'}includeName: Boolean!, ${'$'}skipFriends: Boolean!) @operationDirective(dummy: \"hello\") { hero { name @include(if: ${'$'}includeName) friendsConnection @skip(if: ${'$'}skipFriends) { totalCount } } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
