//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders

import com.apollographql.apollo.annotations.ApolloAdaptableWith
import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.DefaultFakeResolver
import com.apollographql.apollo.api.FakeResolver
import com.apollographql.apollo.api.GlobalBuilder
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.buildData
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.obj
import com.example.data_builders.adapter.AnimalQuery_ResponseAdapter
import com.example.data_builders.fragment.CatFragment
import com.example.data_builders.fragment.DogFragment
import com.example.data_builders.selections.AnimalQuerySelections
import com.example.data_builders.type.QueryBuilder
import com.example.data_builders.type.__CustomScalarAdapters
import com.example.data_builders.type.__Schema
import com.example.data_builders.type.buildQuery
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public class AnimalQuery() : Query<AnimalQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = AnimalQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.data_builders.type.Query.type
  )
  .selections(selections = AnimalQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(AnimalQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val animal: Animal,
  ) : Query.Data

  public data class Animal(
    public val __typename: String,
    /**
     * Synthetic field for grouping fragments
     */
    public val fragments: Fragments,
  ) {
    public data class Fragments(
      /**
       * Synthetic field for 'CatFragment'
       */
      public val catFragment: CatFragment?,
      /**
       * Synthetic field for 'DogFragment'
       */
      public val dogFragment: DogFragment?,
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "0a4d6f7c4de2a81e6247e9f2205b24b2b42e03c1f25fe7267e13fe1342d905d7"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query AnimalQuery {
     *   animal {
     *     __typename
     *     ...CatFragment
     *     ...DogFragment
     *   }
     * }
     *
     * fragment CatFragment on Cat {
     *   meow
     * }
     *
     * fragment DogFragment on Dog {
     *   woof
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query AnimalQuery { animal { __typename ...CatFragment ...DogFragment } }  fragment CatFragment on Cat { meow }  fragment DogFragment on Dog { woof }"

    public const val OPERATION_NAME: String = "AnimalQuery"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all),
        block: QueryBuilder.() -> Unit = {}): Data = buildData(
      AnimalQuery_ResponseAdapter.Data,
      AnimalQuerySelections.__root,
      "Query",
      GlobalBuilder.buildQuery(block),
      resolver,
      __CustomScalarAdapters,
    )
  }
}
