//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.example.data_builders.AnimalQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object AnimalQuery_ResponseAdapter {
  public object Data : CompositeAdapter<AnimalQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        AnimalQuery.Data {
      var _animal: AnimalQuery.Data.Animal? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return AnimalQuery.Data(
        animal = _animal ?: missingField(reader, "animal")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: AnimalQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("animal")
      Animal.obj().toJson(writer, value.animal, adapterContext)
    }

    private object Animal : CompositeAdapter<AnimalQuery.Data.Animal> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          AnimalQuery.Data.Animal {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> CatAnimal.fromJson(reader, adapterContext, __typename)
          "Dog",
          -> DogAnimal.fromJson(reader, adapterContext, __typename)
          else
          -> OtherAnimal.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.Animal,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is AnimalQuery.Data.CatAnimal -> CatAnimal.toJson(writer, value, adapterContext)
          is AnimalQuery.Data.DogAnimal -> DogAnimal.toJson(writer, value, adapterContext)
          is AnimalQuery.Data.OtherAnimal -> OtherAnimal.toJson(writer, value, adapterContext)
        }
      }
    }

    public object CatAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "meow")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalQuery.Data.CatAnimal {
        var __typename: String? = typename
        var _meow: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _meow = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.CatAnimal(
          __typename = __typename ?: missingField(reader, "__typename"),
          meow = _meow ?: missingField(reader, "meow")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.CatAnimal,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("meow")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.meow)
      }
    }

    public object DogAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "woof")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalQuery.Data.DogAnimal {
        var __typename: String? = typename
        var _woof: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _woof = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.DogAnimal(
          __typename = __typename ?: missingField(reader, "__typename"),
          woof = _woof ?: missingField(reader, "woof")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.DogAnimal,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("woof")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.woof)
      }
    }

    public object OtherAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): AnimalQuery.Data.OtherAnimal {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.OtherAnimal(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.OtherAnimal,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
