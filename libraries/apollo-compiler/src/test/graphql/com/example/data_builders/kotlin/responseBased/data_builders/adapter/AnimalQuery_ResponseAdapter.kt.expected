//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.example.data_builders.AnimalQuery
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object AnimalQuery_ResponseAdapter {
  public object Data : CompositeAdapter<AnimalQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): AnimalQuery.Data {
      var _animal: AnimalQuery.Data.Animal? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj().deserializeComposite(reader, context)
          else -> break
        }
      }

      return AnimalQuery.Data(
        animal = _animal!!
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: AnimalQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("animal")
      Animal.obj().serializeComposite(writer, value.animal, context)
    }

    private object Animal : CompositeAdapter<AnimalQuery.Data.Animal> {
      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): AnimalQuery.Data.Animal {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> CatAnimal.deserializeComposite(reader, context, __typename)
          "Dog",
          -> DogAnimal.deserializeComposite(reader, context, __typename)
          else
          -> OtherAnimal.deserializeComposite(reader, context, __typename)
        }
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.Animal,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        when(value) {
          is AnimalQuery.Data.CatAnimal -> CatAnimal.serializeComposite(writer, value, context)
          is AnimalQuery.Data.DogAnimal -> DogAnimal.serializeComposite(writer, value, context)
          is AnimalQuery.Data.OtherAnimal -> OtherAnimal.serializeComposite(writer, value, context)
        }
      }
    }

    public object CatAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "meow")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): AnimalQuery.Data.CatAnimal {
        var __typename: String? = typename
        var _meow: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _meow = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.CatAnimal(
          __typename = __typename!!,
          meow = _meow!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.CatAnimal,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("meow")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.meow)
      }
    }

    public object DogAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "woof")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): AnimalQuery.Data.DogAnimal {
        var __typename: String? = typename
        var _woof: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _woof = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.DogAnimal(
          __typename = __typename!!,
          woof = _woof!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.DogAnimal,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("woof")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.woof)
      }
    }

    public object OtherAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): AnimalQuery.Data.OtherAnimal {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return AnimalQuery.Data.OtherAnimal(
          __typename = __typename!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: AnimalQuery.Data.OtherAnimal,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
