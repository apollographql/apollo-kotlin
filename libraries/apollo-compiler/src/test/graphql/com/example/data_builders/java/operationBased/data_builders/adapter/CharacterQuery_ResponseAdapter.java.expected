//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.data_builders.CharacterQuery;
import com.example.data_builders.fragment.DroidFragment;
import com.example.data_builders.fragment.HumanFragment;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class CharacterQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<CharacterQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("character");

    @Override
    public CharacterQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      CharacterQuery.Character _character = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _character = new ObjectCompositeAdapter<CharacterQuery.Character>(Character.INSTANCE, true).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_character, "character");

      return new CharacterQuery.Data(
        _character
      );
    }

    @Override
    public void toJson(JsonWriter writer, CharacterQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("character");
      new ObjectCompositeAdapter<CharacterQuery.Character>(Character.INSTANCE, true).toJson(writer, value.character, adapterContext);
    }
  }

  public enum Character implements CompositeAdapter<CharacterQuery.Character> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "id", "name");

    @Override
    public CharacterQuery.Character fromJson(JsonReader reader,
        CompositeAdapterContext adapterContext) throws IOException {
      String __typename = null;
      String _id = null;
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _id = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 2: _name = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      HumanFragment _humanFragment = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _humanFragment = com.example.data_builders.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.INSTANCE.fromJson(reader, adapterContext);
      }

      DroidFragment _droidFragment = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")), adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _droidFragment = com.example.data_builders.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.INSTANCE.fromJson(reader, adapterContext);
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new CharacterQuery.Character(
        __typename,
        _id,
        _name,
        _humanFragment,
        _droidFragment
      );
    }

    @Override
    public void toJson(JsonWriter writer, CharacterQuery.Character value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      writer.name("id");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name);

      if (value.humanFragment != null) {
        com.example.data_builders.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.INSTANCE.toJson(writer, value.humanFragment, adapterContext);
      }

      if (value.droidFragment != null) {
        com.example.data_builders.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.INSTANCE.toJson(writer, value.droidFragment, adapterContext);
      }
    }
  }
}
