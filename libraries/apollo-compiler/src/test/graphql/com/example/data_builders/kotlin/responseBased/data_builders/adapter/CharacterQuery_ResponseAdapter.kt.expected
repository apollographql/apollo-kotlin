//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.example.data_builders.CharacterQuery
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object CharacterQuery_ResponseAdapter {
  public object Data : CompositeAdapter<CharacterQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("character")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): CharacterQuery.Data {
      var _character: CharacterQuery.Data.Character? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _character = Character.obj().deserializeComposite(reader, context)
          else -> break
        }
      }

      return CharacterQuery.Data(
        character = _character!!
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: CharacterQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("character")
      Character.obj().serializeComposite(writer, value.character, context)
    }

    private object Character : CompositeAdapter<CharacterQuery.Data.Character> {
      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): CharacterQuery.Data.Character {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanCharacter.deserializeComposite(reader, context, __typename)
          "Droid",
          -> DroidCharacter.deserializeComposite(reader, context, __typename)
          else
          -> OtherCharacter.deserializeComposite(reader, context, __typename)
        }
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.Character,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        when(value) {
          is CharacterQuery.Data.HumanCharacter -> HumanCharacter.serializeComposite(writer, value,
              context)
          is CharacterQuery.Data.DroidCharacter -> DroidCharacter.serializeComposite(writer, value,
              context)
          is CharacterQuery.Data.OtherCharacter -> OtherCharacter.serializeComposite(writer, value,
              context)
        }
      }
    }

    public object HumanCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "homePlanet")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): CharacterQuery.Data.HumanCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _homePlanet: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            3 -> _homePlanet = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return CharacterQuery.Data.HumanCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!,
          homePlanet = _homePlanet!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.HumanCharacter,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("homePlanet")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.homePlanet)
      }
    }

    public object DroidCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name",
          "primaryFunction")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): CharacterQuery.Data.DroidCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _primaryFunction: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            3 -> _primaryFunction = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return CharacterQuery.Data.DroidCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!,
          primaryFunction = _primaryFunction!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.DroidCharacter,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("primaryFunction")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.primaryFunction)
      }
    }

    public object OtherCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): CharacterQuery.Data.OtherCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return CharacterQuery.Data.OtherCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.OtherCharacter,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
      }
    }
  }
}
