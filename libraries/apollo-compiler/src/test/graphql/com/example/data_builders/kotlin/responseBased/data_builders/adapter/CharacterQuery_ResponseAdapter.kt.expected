//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.example.data_builders.CharacterQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object CharacterQuery_ResponseAdapter {
  public object Data : Adapter<CharacterQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("character")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): CharacterQuery.Data {
      var _character: CharacterQuery.Data.Character? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _character = Character.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CharacterQuery.Data(
        character = _character ?: missingField(reader, "character")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CharacterQuery.Data,
    ) {
      writer.name("character")
      Character.obj().toJson(writer, customScalarAdapters, value.character)
    }

    private object Character : Adapter<CharacterQuery.Data.Character> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): CharacterQuery.Data.Character {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanCharacter.fromJson(reader, customScalarAdapters, __typename)
          "Droid",
          -> DroidCharacter.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherCharacter.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: CharacterQuery.Data.Character,
      ) {
        when(value) {
          is CharacterQuery.Data.HumanCharacter -> HumanCharacter.toJson(writer, customScalarAdapters, value)
          is CharacterQuery.Data.DroidCharacter -> DroidCharacter.toJson(writer, customScalarAdapters, value)
          is CharacterQuery.Data.OtherCharacter -> OtherCharacter.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object HumanCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "homePlanet")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): CharacterQuery.Data.HumanCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _homePlanet: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            3 -> _homePlanet = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CharacterQuery.Data.HumanCharacter(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          name = _name ?: missingField(reader, "name"),
          homePlanet = _homePlanet ?: missingField(reader, "homePlanet")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: CharacterQuery.Data.HumanCharacter,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("homePlanet")
        StringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)
      }
    }

    public object DroidCharacter {
      public val RESPONSE_NAMES: List<String> =
          listOf("__typename", "id", "name", "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): CharacterQuery.Data.DroidCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _primaryFunction: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            3 -> _primaryFunction = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CharacterQuery.Data.DroidCharacter(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          name = _name ?: missingField(reader, "name"),
          primaryFunction = _primaryFunction ?: missingField(reader, "primaryFunction")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: CharacterQuery.Data.DroidCharacter,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("primaryFunction")
        StringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
      }
    }

    public object OtherCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): CharacterQuery.Data.OtherCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CharacterQuery.Data.OtherCharacter(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          name = _name ?: missingField(reader, "name")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: CharacterQuery.Data.OtherCharacter,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }
  }
}
