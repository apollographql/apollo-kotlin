//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.obj
import com.example.data_builders.CharacterQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object CharacterQuery_ResponseAdapter {
  public object Data : ApolloAdapter<CharacterQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("character")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        CharacterQuery.Data {
      var _character: CharacterQuery.Data.Character? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _character = Character.obj().fromJson(reader, context)
          else -> break
        }
      }

      return CharacterQuery.Data(
        character = _character!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: CharacterQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("character")
      Character.obj().toJson(writer, value.character, context)
    }

    private object Character : ApolloAdapter<CharacterQuery.Data.Character> {
      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): CharacterQuery.Data.Character {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanCharacter.fromJson(reader, context, __typename)
          "Droid",
          -> DroidCharacter.fromJson(reader, context, __typename)
          else
          -> OtherCharacter.fromJson(reader, context, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.Character,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        when(value) {
          is CharacterQuery.Data.HumanCharacter -> HumanCharacter.toJson(writer, value, context)
          is CharacterQuery.Data.DroidCharacter -> DroidCharacter.toJson(writer, value, context)
          is CharacterQuery.Data.OtherCharacter -> OtherCharacter.toJson(writer, value, context)
        }
      }
    }

    public object HumanCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "homePlanet")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): CharacterQuery.Data.HumanCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _homePlanet: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _id = StringApolloAdapter.fromJson(reader, context)
            2 -> _name = StringApolloAdapter.fromJson(reader, context)
            3 -> _homePlanet = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return CharacterQuery.Data.HumanCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!,
          homePlanet = _homePlanet!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.HumanCharacter,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("id")
        StringApolloAdapter.toJson(writer, value.id, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("homePlanet")
        StringApolloAdapter.toJson(writer, value.homePlanet, context)
      }
    }

    public object DroidCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name",
          "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): CharacterQuery.Data.DroidCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _id = StringApolloAdapter.fromJson(reader, context)
            2 -> _name = StringApolloAdapter.fromJson(reader, context)
            3 -> _primaryFunction = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return CharacterQuery.Data.DroidCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!,
          primaryFunction = _primaryFunction!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.DroidCharacter,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("id")
        StringApolloAdapter.toJson(writer, value.id, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("primaryFunction")
        StringApolloAdapter.toJson(writer, value.primaryFunction, context)
      }
    }

    public object OtherCharacter {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): CharacterQuery.Data.OtherCharacter {
        var __typename: String? = typename
        var _id: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _id = StringApolloAdapter.fromJson(reader, context)
            2 -> _name = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return CharacterQuery.Data.OtherCharacter(
          __typename = __typename!!,
          id = _id!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: CharacterQuery.Data.OtherCharacter,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("id")
        StringApolloAdapter.toJson(writer, value.id, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)
      }
    }
  }
}
