//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.builder

import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.DataBuilder
import com.apollographql.apollo.api.DataBuilderDsl
import com.apollographql.apollo.api.DataBuilderFactory
import com.apollographql.apollo.api.DataBuilderScope
import com.apollographql.apollo.api.DataMap
import com.apollographql.apollo.api.ExecutableDefinition
import com.apollographql.apollo.api.FakeResolver
import com.apollographql.apollo.api.buildData
import com.example.data_builders.type.Animal
import kotlin.String
import kotlin.Unit

@DataBuilderDsl
public class OtherAnimalBuilder(
  customScalarAdapters: CustomScalarAdapters,
) : DataBuilder<OtherAnimalMap>(customScalarAdapters) {
  override fun build(): OtherAnimalMap = OtherAnimalMap(__fields)

  public companion object : DataBuilderFactory<OtherAnimalBuilder> {
    override fun newBuilder(customScalarAdapters: CustomScalarAdapters): OtherAnimalBuilder = OtherAnimalBuilder(customScalarAdapters)
  }
}

public fun DataBuilderScope.buildOtherAnimal(typename: String, block: OtherAnimalBuilder.() -> Unit): OtherAnimalMap = OtherAnimalBuilder(customScalarAdapters)
.apply {
  __typename = typename
}.apply(block)
.build()

public fun <D : Animal.Data, Map, Builder : DataBuilder<Map>> ExecutableDefinition<D>.Data(
  factory: DataBuilderFactory<Builder>,
  customScalarAdapters: CustomScalarAdapters = CustomScalarAdapters.Empty,
  block: Builder.() -> Unit,
): D where Map : AnimalMap, Map : DataMap = buildData(
  ADAPTER,
  customScalarAdapters,
  factory.newBuilder(customScalarAdapters).apply(block).build(),
)

public fun <D : Animal.Data, Map, Builder : DataBuilder<Map>> ExecutableDefinition<D>.Data(
  factory: DataBuilderFactory<Builder>,
  resolver: FakeResolver,
  customScalarAdapters: CustomScalarAdapters = CustomScalarAdapters.Empty,
  block: Builder.() -> Unit = {},
): D where Map : AnimalMap, Map : DataMap = buildData(
  ADAPTER,
  customScalarAdapters,
  factory.newBuilder(customScalarAdapters).apply(block).build(),
  ROOT_FIELD.selections,
  "Animal",
  resolver,
)
