//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.example.data_builders.NodeQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object NodeQuery_ResponseAdapter {
  public object Data : CompositeAdapter<NodeQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("node")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        NodeQuery.Data {
      var _node: NodeQuery.Data.Node? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _node = Node.obj().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return NodeQuery.Data(
        node = _node ?: missingField(reader, "node")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: NodeQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("node")
      Node.obj().toJson(writer, value.node, adapterContext)
    }

    private object Node : CompositeAdapter<NodeQuery.Data.Node> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          NodeQuery.Data.Node {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanNode.fromJson(reader, adapterContext, __typename)
          "Droid",
          -> DroidNode.fromJson(reader, adapterContext, __typename)
          else
          -> OtherNode.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: NodeQuery.Data.Node,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is NodeQuery.Data.HumanNode -> HumanNode.toJson(writer, value, adapterContext)
          is NodeQuery.Data.DroidNode -> DroidNode.toJson(writer, value, adapterContext)
          is NodeQuery.Data.OtherNode -> OtherNode.toJson(writer, value, adapterContext)
        }
      }
    }

    public object HumanNode {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "homePlanet")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): NodeQuery.Data.HumanNode {
        var __typename: String? = typename
        var _id: String? = null
        var _homePlanet: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _homePlanet = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return NodeQuery.Data.HumanNode(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          homePlanet = _homePlanet ?: missingField(reader, "homePlanet")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: NodeQuery.Data.HumanNode,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        writer.name("homePlanet")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.homePlanet)
      }
    }

    public object DroidNode {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): NodeQuery.Data.DroidNode {
        var __typename: String? = typename
        var _id: String? = null
        var _primaryFunction: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _primaryFunction = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return NodeQuery.Data.DroidNode(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id"),
          primaryFunction = _primaryFunction ?: missingField(reader, "primaryFunction")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: NodeQuery.Data.DroidNode,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        writer.name("primaryFunction")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.primaryFunction)
      }
    }

    public object OtherNode {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): NodeQuery.Data.OtherNode {
        var __typename: String? = typename
        var _id: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return NodeQuery.Data.OtherNode(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: NodeQuery.Data.OtherNode,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)
      }
    }
  }
}
