//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.data_builders.NodeQuery
import com.example.data_builders.fragment.DroidFragment
import com.example.data_builders.fragment.HumanFragment
import kotlin.String
import kotlin.collections.List

public object NodeQuery_ResponseAdapter {
  public object Data : CompositeAdapter<NodeQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("node")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        NodeQuery.Data {
      var _node: NodeQuery.Data.Node? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _node = Node.obj(true).fromJson(reader, adapterContext)
          else -> break
        }
      }

      return NodeQuery.Data(
        node = _node!!
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: NodeQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("node")
      Node.obj(true).toJson(writer, value.node, adapterContext)
    }

    private object Node : CompositeAdapter<NodeQuery.Data.Node> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          NodeQuery.Data.Node {
        var __typename: String? = null
        var _id: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _id = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _humanFragment: HumanFragment? = null
        if (possibleTypes("Human").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _humanFragment = com.example.data_builders.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.fromJson(reader,
              adapterContext)
        }

        var _droidFragment: DroidFragment? = null
        if (possibleTypes("Droid").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _droidFragment = com.example.data_builders.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.fromJson(reader,
              adapterContext)
        }

        return NodeQuery.Data.Node(
          __typename = __typename,
          id = _id!!,
          humanFragment = _humanFragment,
          droidFragment = _droidFragment
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: NodeQuery.Data.Node,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id)

        if (value.humanFragment != null) {
          com.example.data_builders.fragment.HumanFragmentImpl_ResponseAdapter.HumanFragment.toJson(writer,
              value.humanFragment, adapterContext)
        }

        if (value.droidFragment != null) {
          com.example.data_builders.fragment.DroidFragmentImpl_ResponseAdapter.DroidFragment.toJson(writer,
              value.droidFragment, adapterContext)
        }
      }
    }
  }
}
