//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.data_builders

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DefaultFakeResolver
import com.apollographql.apollo3.api.FakeResolver
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.buildData
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.data_builders.adapter.NodeQuery_ResponseAdapter
import com.example.data_builders.fragment.DroidFragment
import com.example.data_builders.fragment.HumanFragment
import com.example.data_builders.schema.__Schema
import com.example.data_builders.selections.NodeQuerySelections
import com.example.data_builders.type.QueryBuilder
import com.example.data_builders.type.__CustomScalarAdapters
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public class NodeQuery() : Query<NodeQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> = NodeQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.data_builders.type.Query.type
  )
  .selections(selections = NodeQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(NodeQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val node: Node,
  ) : Query.Data {
    public sealed interface Node {
      public val __typename: String

      public val id: String

      public companion object {
        public fun Node.humanFragment() = this as? HumanFragment

        public fun Node.droidFragment() = this as? DroidFragment

        public fun Node.asHuman() = this as? HumanNode

        public fun Node.asDroid() = this as? DroidNode
      }
    }

    public data class HumanNode(
      public override val __typename: String,
      public override val id: String,
      public override val homePlanet: String,
    ) : Node, HumanFragment

    public data class DroidNode(
      public override val __typename: String,
      public override val id: String,
      public override val primaryFunction: String,
    ) : Node, DroidFragment

    public data class OtherNode(
      public override val __typename: String,
      public override val id: String,
    ) : Node
  }

  public companion object {
    public const val OPERATION_ID: String =
        "c91df108c7e22d226afdf25226288d452aad34224a2d09fc3b98e495f4903c4c"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query NodeQuery {
     *   node {
     *     __typename
     *     id
     *     ...HumanFragment
     *     ...DroidFragment
     *   }
     * }
     *
     * fragment HumanFragment on Human {
     *   homePlanet
     * }
     *
     * fragment DroidFragment on Droid {
     *   primaryFunction
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query NodeQuery { node { __typename id ...HumanFragment ...DroidFragment } }  fragment HumanFragment on Human { homePlanet }  fragment DroidFragment on Droid { primaryFunction }"

    public const val OPERATION_NAME: String = "NodeQuery"

    public fun Data(resolver: FakeResolver = DefaultFakeResolver(__Schema.all),
        block: QueryBuilder.() -> Unit = {}): Data = buildData(
      com.example.data_builders.type.Query,
      block,
      NodeQuery_ResponseAdapter.Data,
      NodeQuerySelections.__root,
      "Query",
      resolver,
      __CustomScalarAdapters,
    )
  }
}
