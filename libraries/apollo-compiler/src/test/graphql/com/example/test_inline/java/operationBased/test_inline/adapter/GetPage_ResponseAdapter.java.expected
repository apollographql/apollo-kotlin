//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.test_inline.GetPage;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class GetPage_ResponseAdapter {
  public enum Data implements ApolloAdapter<GetPage.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("collection");

    @Override
    public GetPage.Data fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      GetPage.Collection _collection = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _collection = new ObjectAdapter<GetPage.Collection>(Collection.INSTANCE, true).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_collection, "collection");

      return new GetPage.Data(
        _collection
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.Data value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("collection");
      new ObjectAdapter<GetPage.Collection>(Collection.INSTANCE, true).toJson(writer, value.collection, context);
    }
  }

  public enum Collection implements ApolloAdapter<GetPage.Collection> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "items");

    @Override
    public GetPage.Collection fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      String __typename = null;
      List<GetPage.Item> _items = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 1: _items = new ListAdapter<>(new ObjectAdapter<GetPage.Item>(Item.INSTANCE, false)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      GetPage.OnParticularCollection _onParticularCollection = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ParticularCollection")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onParticularCollection = com.example.test_inline.adapter.GetPage_ResponseAdapter.OnParticularCollection.INSTANCE.fromJson(reader, context);
      }

      Assertions.checkFieldNotMissing(_items, "items");

      return new GetPage.Collection(
        __typename,
        _items,
        _onParticularCollection
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.Collection value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("__typename");
      Adapters.StringApolloAdapter.toJson(writer, value.__typename, context);

      writer.name("items");
      new ListAdapter<>(new ObjectAdapter<GetPage.Item>(Item.INSTANCE, false)).toJson(writer, value.items, context);

      if (value.onParticularCollection != null) {
        com.example.test_inline.adapter.GetPage_ResponseAdapter.OnParticularCollection.INSTANCE.toJson(writer, value.onParticularCollection, context);
      }
    }
  }

  public enum Item implements ApolloAdapter<GetPage.Item> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("title");

    @Override
    public GetPage.Item fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      String _title = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _title = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_title, "title");

      return new GetPage.Item(
        _title
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.Item value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("title");
      Adapters.StringApolloAdapter.toJson(writer, value.title, context);
    }
  }

  public enum OnParticularCollection implements ApolloAdapter<GetPage.OnParticularCollection> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("items");

    @Override
    public GetPage.OnParticularCollection fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      List<GetPage.Item1> _items = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _items = new ListAdapter<>(new ObjectAdapter<GetPage.Item1>(Item1.INSTANCE, true)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_items, "items");

      return new GetPage.OnParticularCollection(
        _items
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.OnParticularCollection value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("items");
      new ListAdapter<>(new ObjectAdapter<GetPage.Item1>(Item1.INSTANCE, true)).toJson(writer, value.items, context);
    }
  }

  public enum Item1 implements ApolloAdapter<GetPage.Item1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public GetPage.Item1 fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      GetPage.OnParticularItem _onParticularItem = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ParticularItem")), context.falseBooleanVariables, __typename, context, null)) {
        reader.rewind();
        _onParticularItem = com.example.test_inline.adapter.GetPage_ResponseAdapter.OnParticularItem.INSTANCE.fromJson(reader, context);
      }

      return new GetPage.Item1(
        __typename,
        _onParticularItem
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.Item1 value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("__typename");
      Adapters.StringApolloAdapter.toJson(writer, value.__typename, context);

      if (value.onParticularItem != null) {
        com.example.test_inline.adapter.GetPage_ResponseAdapter.OnParticularItem.INSTANCE.toJson(writer, value.onParticularItem, context);
      }
    }
  }

  public enum OnParticularItem implements ApolloAdapter<GetPage.OnParticularItem> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("image");

    @Override
    public GetPage.OnParticularItem fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      String _image = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _image = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_image, "image");

      return new GetPage.OnParticularItem(
        _image
      );
    }

    @Override
    public void toJson(JsonWriter writer, GetPage.OnParticularItem value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("image");
      Adapters.StringApolloAdapter.toJson(writer, value.image, context);
    }
  }
}
