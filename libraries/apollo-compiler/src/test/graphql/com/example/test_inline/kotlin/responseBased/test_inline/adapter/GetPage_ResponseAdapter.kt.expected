//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object GetPage_ResponseAdapter {
  public object Data : CompositeAdapter<GetPage.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        GetPage.Data {
      var _collection: GetPage.Data.Collection? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _collection = Collection.obj().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return GetPage.Data(
        collection = _collection ?: missingField(reader, "collection")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: GetPage.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("collection")
      Collection.obj().toJson(writer, value.collection, adapterContext)
    }

    private object Collection : CompositeAdapter<GetPage.Data.Collection> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          GetPage.Data.Collection {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ParticularCollection",
          -> ParticularCollectionCollection.fromJson(reader, adapterContext, __typename)
          else
          -> OtherCollection.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.Collection,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is GetPage.Data.ParticularCollectionCollection ->
              ParticularCollectionCollection.toJson(writer, value, adapterContext)
          is GetPage.Data.OtherCollection -> OtherCollection.toJson(writer, value, adapterContext)
        }
      }
    }

    public object ParticularCollectionCollection {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): GetPage.Data.ParticularCollectionCollection {
        var __typename: String? = typename
        var _items: List<GetPage.Data.ParticularCollectionCollection.Item>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _items = Item.obj().list().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return GetPage.Data.ParticularCollectionCollection(
          __typename = __typename ?: missingField(reader, "__typename"),
          items = _items ?: missingField(reader, "items")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.ParticularCollectionCollection,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, value.items, adapterContext)
      }

      private object Item : CompositeAdapter<GetPage.Data.ParticularCollectionCollection.Item> {
        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            GetPage.Data.ParticularCollectionCollection.Item {
          val __typename = reader.readTypename()
          return when(__typename) {
            "ParticularItem",
            -> ParticularItemItem.fromJson(reader, adapterContext, __typename)
            else
            -> OtherItem.fromJson(reader, adapterContext, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.Item,
          adapterContext: CompositeAdapterContext,
        ) {
          when(value) {
            is GetPage.Data.ParticularCollectionCollection.ParticularItemItem ->
                ParticularItemItem.toJson(writer, value, adapterContext)
            is GetPage.Data.ParticularCollectionCollection.OtherItem -> OtherItem.toJson(writer,
                value, adapterContext)
          }
        }
      }

      public object ParticularItemItem {
        public val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): GetPage.Data.ParticularCollectionCollection.ParticularItemItem {
          var _title: String? = null
          var __typename: String? = typename
          var _image: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              2 -> _image = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.ParticularItemItem(
            title = _title ?: missingField(reader, "title"),
            __typename = __typename ?: missingField(reader, "__typename"),
            image = _image ?: missingField(reader, "image")
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.ParticularItemItem,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.title)

          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

          writer.name("image")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.image)
        }
      }

      public object OtherItem {
        public val RESPONSE_NAMES: List<String> = listOf("title", "__typename")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
          typename: String,
        ): GetPage.Data.ParticularCollectionCollection.OtherItem {
          var _title: String? = null
          var __typename: String? = typename

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.OtherItem(
            title = _title ?: missingField(reader, "title"),
            __typename = __typename ?: missingField(reader, "__typename")
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.OtherItem,
          @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.title)

          writer.name("__typename")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
        }
      }
    }

    public object OtherCollection {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): GetPage.Data.OtherCollection {
        var __typename: String? = typename
        var _items: List<GetPage.Data.OtherCollection.Item>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _items = Item.obj().list().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return GetPage.Data.OtherCollection(
          __typename = __typename ?: missingField(reader, "__typename"),
          items = _items ?: missingField(reader, "items")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.OtherCollection,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, value.items, adapterContext)
      }

      private object Item : CompositeAdapter<GetPage.Data.OtherCollection.Item> {
        public val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            GetPage.Data.OtherCollection.Item {
          var _title: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return GetPage.Data.OtherCollection.Item(
            title = _title ?: missingField(reader, "title")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.OtherCollection.Item,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.title)
        }
      }
    }
  }
}
