//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object GetPage_ResponseAdapter {
  public object Data : ApolloAdapter<GetPage.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("collection")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        GetPage.Data {
      var _collection: GetPage.Data.Collection? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _collection = Collection.obj().fromJson(reader, context)
          else -> break
        }
      }

      return GetPage.Data(
        collection = _collection!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: GetPage.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("collection")
      Collection.obj().toJson(writer, value.collection, context)
    }

    private object Collection : ApolloAdapter<GetPage.Data.Collection> {
      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): GetPage.Data.Collection {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ParticularCollection",
          -> ParticularCollectionCollection.fromJson(reader, context, __typename)
          else
          -> OtherCollection.fromJson(reader, context, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.Collection,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        when(value) {
          is GetPage.Data.ParticularCollectionCollection ->
              ParticularCollectionCollection.toJson(writer, value, context)
          is GetPage.Data.OtherCollection -> OtherCollection.toJson(writer, value, context)
        }
      }
    }

    public object ParticularCollectionCollection {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): GetPage.Data.ParticularCollectionCollection {
        var __typename: String? = typename
        var _items: List<GetPage.Data.ParticularCollectionCollection.Item>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _items = Item.obj().list().fromJson(reader, context)
            else -> break
          }
        }

        return GetPage.Data.ParticularCollectionCollection(
          __typename = __typename!!,
          items = _items!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.ParticularCollectionCollection,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("items")
        Item.obj().list().toJson(writer, value.items, context)
      }

      private object Item : ApolloAdapter<GetPage.Data.ParticularCollectionCollection.Item> {
        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext):
            GetPage.Data.ParticularCollectionCollection.Item {
          val __typename = reader.readTypename()
          return when(__typename) {
            "ParticularItem",
            -> ParticularItemItem.fromJson(reader, context, __typename)
            else
            -> OtherItem.fromJson(reader, context, __typename)
          }
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.Item,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          when(value) {
            is GetPage.Data.ParticularCollectionCollection.ParticularItemItem ->
                ParticularItemItem.toJson(writer, value, context)
            is GetPage.Data.ParticularCollectionCollection.OtherItem -> OtherItem.toJson(writer,
                value, context)
          }
        }
      }

      public object ParticularItemItem {
        public val RESPONSE_NAMES: List<String> = listOf("title", "__typename", "image")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): GetPage.Data.ParticularCollectionCollection.ParticularItemItem {
          var _title: String? = null
          var __typename: String? = typename
          var _image: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringApolloAdapter.fromJson(reader, context)
              1 -> __typename = StringApolloAdapter.fromJson(reader, context)
              2 -> _image = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.ParticularItemItem(
            title = _title!!,
            __typename = __typename!!,
            image = _image!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.ParticularItemItem,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("title")
          StringApolloAdapter.toJson(writer, value.title, context)

          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          writer.name("image")
          StringApolloAdapter.toJson(writer, value.image, context)
        }
      }

      public object OtherItem {
        public val RESPONSE_NAMES: List<String> = listOf("title", "__typename")

        public fun fromJson(
          reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext,
          typename: String,
        ): GetPage.Data.ParticularCollectionCollection.OtherItem {
          var _title: String? = null
          var __typename: String? = typename

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringApolloAdapter.fromJson(reader, context)
              1 -> __typename = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return GetPage.Data.ParticularCollectionCollection.OtherItem(
            title = _title!!,
            __typename = __typename!!
          )
        }

        public fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.ParticularCollectionCollection.OtherItem,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("title")
          StringApolloAdapter.toJson(writer, value.title, context)

          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)
        }
      }
    }

    public object OtherCollection {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): GetPage.Data.OtherCollection {
        var __typename: String? = typename
        var _items: List<GetPage.Data.OtherCollection.Item>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _items = Item.obj().list().fromJson(reader, context)
            else -> break
          }
        }

        return GetPage.Data.OtherCollection(
          __typename = __typename!!,
          items = _items!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.OtherCollection,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("items")
        Item.obj().list().toJson(writer, value.items, context)
      }

      private object Item : ApolloAdapter<GetPage.Data.OtherCollection.Item> {
        public val RESPONSE_NAMES: List<String> = listOf("title")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): GetPage.Data.OtherCollection.Item {
          var _title: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return GetPage.Data.OtherCollection.Item(
            title = _title!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.OtherCollection.Item,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("title")
          StringApolloAdapter.toJson(writer, value.title, context)
        }
      }
    }
  }
}
