//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.test_inline.GetPage
import kotlin.String
import kotlin.collections.List

public object GetPage_ResponseAdapter {
  public object Data : CompositeAdapter<GetPage.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("collection")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        GetPage.Data {
      var _collection: GetPage.Data.Collection? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _collection = Collection.obj(true).fromJson(reader, adapterContext)
          else -> break
        }
      }

      return GetPage.Data(
        collection = _collection ?: missingField(reader, "collection")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: GetPage.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("collection")
      Collection.obj(true).toJson(writer, value.collection, adapterContext)
    }

    private object Collection : CompositeAdapter<GetPage.Data.Collection> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "items")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          GetPage.Data.Collection {
        var __typename: String? = null
        var _items: List<GetPage.Data.Collection.Item>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _items = Item.obj().list().fromJson(reader, adapterContext)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onParticularCollection: GetPage.Data.Collection.OnParticularCollection? = null
        if (possibleTypes("ParticularCollection").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onParticularCollection = com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.fromJson(reader,
              adapterContext)
        }

        return GetPage.Data.Collection(
          __typename = __typename,
          items = _items ?: missingField(reader, "items"),
          onParticularCollection = _onParticularCollection
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: GetPage.Data.Collection,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("items")
        Item.obj().list().toJson(writer, value.items, adapterContext)

        if (value.onParticularCollection != null) {
          com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.toJson(writer,
              value.onParticularCollection, adapterContext)
        }
      }

      private object Item : CompositeAdapter<GetPage.Data.Collection.Item> {
        public val RESPONSE_NAMES: List<String> = listOf("title")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            GetPage.Data.Collection.Item {
          var _title: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _title = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return GetPage.Data.Collection.Item(
            title = _title ?: missingField(reader, "title")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.Collection.Item,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("title")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.title)
        }
      }

      private object OnParticularCollection :
          CompositeAdapter<GetPage.Data.Collection.OnParticularCollection> {
        public val RESPONSE_NAMES: List<String> = listOf("items")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            GetPage.Data.Collection.OnParticularCollection {
          var _items: List<GetPage.Data.Collection.OnParticularCollection.Item>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _items = Item.obj(true).list().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return GetPage.Data.Collection.OnParticularCollection(
            items = _items ?: missingField(reader, "items")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: GetPage.Data.Collection.OnParticularCollection,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("items")
          Item.obj(true).list().toJson(writer, value.items, adapterContext)
        }

        private object Item : CompositeAdapter<GetPage.Data.Collection.OnParticularCollection.Item>
            {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              GetPage.Data.Collection.OnParticularCollection.Item {
            var __typename: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            var _onParticularItem: GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem? = null
            if (possibleTypes("ParticularItem").evaluate(adapterContext.falseVariables, __typename, adapterContext.deferredFragmentIdentifiers, null)) {
              reader.rewind()
              _onParticularItem = com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.Item.OnParticularItem.fromJson(reader,
                  adapterContext)
            }

            return GetPage.Data.Collection.OnParticularCollection.Item(
              __typename = __typename,
              onParticularItem = _onParticularItem
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: GetPage.Data.Collection.OnParticularCollection.Item,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("__typename")
            StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

            if (value.onParticularItem != null) {
              com.example.test_inline.adapter.GetPage_ResponseAdapter.Data.Collection.OnParticularCollection.Item.OnParticularItem.toJson(writer,
                  value.onParticularItem, adapterContext)
            }
          }

          private object OnParticularItem :
              CompositeAdapter<GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem>
              {
            public val RESPONSE_NAMES: List<String> = listOf("image")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem {
              var _image: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _image = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem(
                image = _image ?: missingField(reader, "image")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: GetPage.Data.Collection.OnParticularCollection.Item.OnParticularItem,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("image")
              StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.image)
            }
          }
        }
      }
    }
  }
}
