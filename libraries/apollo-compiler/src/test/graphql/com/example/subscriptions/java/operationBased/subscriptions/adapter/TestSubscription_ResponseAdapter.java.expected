//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.subscriptions.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.subscriptions.TestSubscription;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestSubscription_ResponseAdapter {
  public enum Data implements DataAdapter<TestSubscription.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("commentAdded");

    @Override
    public TestSubscription.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestSubscription.CommentAdded _commentAdded = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _commentAdded = new NullableDataAdapter<>(new ObjectDataAdapter<TestSubscription.CommentAdded>(CommentAdded.INSTANCE, false)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestSubscription.Data(
        _commentAdded
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestSubscription.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("commentAdded");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestSubscription.CommentAdded>(CommentAdded.INSTANCE, false)).serializeData(writer, value.commentAdded, context);
    }
  }

  public enum CommentAdded implements DataAdapter<TestSubscription.CommentAdded> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "content");

    @Override
    public TestSubscription.CommentAdded deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      Integer _id = null;
      String _content = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = DataAdapters.IntDataAdapter.deserializeData(reader, context); break;
          case 1: _content = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_content, "content");

      return new TestSubscription.CommentAdded(
        _id,
        _content
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestSubscription.CommentAdded value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("id");
      DataAdapters.IntDataAdapter.serializeData(writer, value.id, context);

      writer.name("content");
      DataAdapters.StringDataAdapter.serializeData(writer, value.content, context);
    }
  }
}
