//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.subscriptions.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.subscriptions.TestSubscription;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestSubscription_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestSubscription.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("commentAdded");

    @Override
    public TestSubscription.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      TestSubscription.CommentAdded _commentAdded = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _commentAdded = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestSubscription.CommentAdded>(CommentAdded.INSTANCE, false)).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      return new TestSubscription.Data(
        _commentAdded
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestSubscription.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("commentAdded");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestSubscription.CommentAdded>(CommentAdded.INSTANCE, false)).toJson(writer, value.commentAdded, adapterContext);
    }
  }

  public enum CommentAdded implements CompositeAdapter<TestSubscription.CommentAdded> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "content");

    @Override
    public TestSubscription.CommentAdded fromJson(JsonReader reader,
        CompositeAdapterContext adapterContext) throws IOException {
      Integer _id = null;
      String _content = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.IntAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _content = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_content, "content");

      return new TestSubscription.CommentAdded(
        _id,
        _content
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestSubscription.CommentAdded value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("id");
      Adapters.IntAdapter.toJson(writer, CustomScalarAdapters.Empty, value.id);

      writer.name("content");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.content);
    }
  }
}
