//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.monomorphic.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cat");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Cat _cat = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _cat = new ObjectDataAdapter<TestQuery.Cat>(Cat.INSTANCE, true).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_cat, "cat");

      return new TestQuery.Data(
        _cat
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("cat");
      new ObjectDataAdapter<TestQuery.Cat>(Cat.INSTANCE, true).serializeData(writer, value.cat, context);
    }
  }

  public enum Cat implements DataAdapter<TestQuery.Cat> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Cat deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestQuery.OnNode _onNode = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.OnNode.INSTANCE.deserializeData(reader, context);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestQuery.Cat(
        __typename,
        _onNode
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Cat value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.monomorphic.adapter.TestQuery_ResponseAdapter.OnNode.INSTANCE.serializeData(writer, value.onNode, context);
    }
  }

  public enum OnNode implements DataAdapter<TestQuery.OnNode> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.OnNode deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestQuery.OnAnimal _onAnimal = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.OnAnimal.INSTANCE.deserializeData(reader, context);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestQuery.OnNode(
        __typename,
        _onAnimal
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnNode value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      com.example.monomorphic.adapter.TestQuery_ResponseAdapter.OnAnimal.INSTANCE.serializeData(writer, value.onAnimal, context);
    }
  }

  public enum OnAnimal implements DataAdapter<TestQuery.OnAnimal> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("species");

    @Override
    public TestQuery.OnAnimal deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _species = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _species = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_species, "species");

      return new TestQuery.OnAnimal(
        _species
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnAnimal value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("species");
      DataAdapters.StringDataAdapter.serializeData(writer, value.species, context);
    }
  }
}
