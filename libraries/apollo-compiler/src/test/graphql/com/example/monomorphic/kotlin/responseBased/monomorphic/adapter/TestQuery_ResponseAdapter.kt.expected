//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.example.monomorphic.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _cat: TestQuery.Data.Cat? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cat = Cat.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        cat = _cat ?: missingField(reader, "cat")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("cat")
      Cat.obj().toJson(writer, customScalarAdapters, value.cat)
    }

    private object Cat : Adapter<TestQuery.Data.Cat> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> AnimalNodeCat.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherCat.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Cat,
      ) {
        when(value) {
          is TestQuery.Data.AnimalNodeCat -> AnimalNodeCat.toJson(writer, customScalarAdapters, value)
          is TestQuery.Data.OtherCat -> OtherCat.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object AnimalNodeCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.AnimalNodeCat {
        var __typename: String? = typename
        var _species: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.AnimalNodeCat(
          __typename = __typename ?: missingField(reader, "__typename"),
          species = _species ?: missingField(reader, "species")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.AnimalNodeCat,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)
      }
    }

    public object OtherCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherCat {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherCat(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherCat,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
