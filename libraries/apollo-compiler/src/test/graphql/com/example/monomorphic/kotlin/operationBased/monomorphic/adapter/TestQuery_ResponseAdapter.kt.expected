//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.example.monomorphic.TestQuery
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _cat: TestQuery.Data.Cat? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cat = Cat.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        cat = _cat ?: missingField(reader, "cat")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("cat")
      Cat.obj(true).toJson(writer, customScalarAdapters, value.cat)
    }

    private object Cat : Adapter<TestQuery.Data.Cat> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val _onNode = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.fromJson(reader, customScalarAdapters)

        return TestQuery.Data.Cat(
          __typename = __typename ?: missingField(reader, "__typename"),
          onNode = _onNode
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Cat,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.toJson(writer, customScalarAdapters, value.onNode)
      }

      private object OnNode : Adapter<TestQuery.Data.Cat.OnNode> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat.OnNode {
          var __typename: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          reader.rewind()
          val _onAnimal = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.fromJson(reader, customScalarAdapters)

          return TestQuery.Data.Cat.OnNode(
            __typename = __typename ?: missingField(reader, "__typename"),
            onAnimal = _onAnimal
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Cat.OnNode,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.toJson(writer, customScalarAdapters, value.onAnimal)
        }

        private object OnAnimal : Adapter<TestQuery.Data.Cat.OnNode.OnAnimal> {
          public val RESPONSE_NAMES: List<String> = listOf("species")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat.OnNode.OnAnimal {
            var _species: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Cat.OnNode.OnAnimal(
              species = _species ?: missingField(reader, "species")
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Cat.OnNode.OnAnimal,
          ) {
            writer.name("species")
            StringAdapter.toJson(writer, customScalarAdapters, value.species)
          }
        }
      }
    }
  }
}
