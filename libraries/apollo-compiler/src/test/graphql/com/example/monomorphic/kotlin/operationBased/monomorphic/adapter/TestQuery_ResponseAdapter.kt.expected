//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.monomorphic.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _cat: TestQuery.Data.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cat = Cat.obj(true).deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        cat = _cat!!
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("cat")
      Cat.obj(true).serializeData(writer, value.cat, context)
    }

    private object Cat : DataAdapter<TestQuery.Data.Cat> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Cat {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        reader.rewind()
        val _onNode = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.deserializeData(reader,
            context)

        return TestQuery.Data.Cat(
          __typename = __typename!!,
          onNode = _onNode
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Cat,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.serializeData(writer,
            value.onNode, context)
      }

      private object OnNode : DataAdapter<TestQuery.Data.Cat.OnNode> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Cat.OnNode {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          reader.rewind()
          val _onAnimal = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.deserializeData(reader,
              context)

          return TestQuery.Data.Cat.OnNode(
            __typename = __typename!!,
            onAnimal = _onAnimal
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Cat.OnNode,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.serializeData(writer,
              value.onAnimal, context)
        }

        private object OnAnimal : DataAdapter<TestQuery.Data.Cat.OnNode.OnAnimal> {
          public val RESPONSE_NAMES: List<String> = listOf("species")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.Cat.OnNode.OnAnimal {
            var _species: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _species = StringDataAdapter.deserializeData(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Cat.OnNode.OnAnimal(
              species = _species!!
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Cat.OnNode.OnAnimal,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("species")
            StringDataAdapter.serializeData(writer, value.species, context)
          }
        }
      }
    }
  }
}
