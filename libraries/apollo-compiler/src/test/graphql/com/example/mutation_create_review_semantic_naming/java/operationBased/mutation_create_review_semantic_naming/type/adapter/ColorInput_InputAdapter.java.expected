//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.mutation_create_review_semantic_naming.type.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.ApolloOptionalAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.ScalarAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.mutation_create_review_semantic_naming.type.ColorInput;
import com.example.mutation_create_review_semantic_naming.type.ReviewRefInput;
import java.io.IOException;
import java.lang.IllegalStateException;
import java.lang.Override;

public enum ColorInput_InputAdapter implements ApolloAdapter<ColorInput> {
  INSTANCE;

  @Override
  public ColorInput fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws IOException {
    throw new IllegalStateException("Input type used in output position");
  }

  @Override
  public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, ColorInput value) throws
      IOException {
    if (value.red instanceof Optional.Present) {
      writer.name("red");
      new ApolloOptionalAdapter<>(Adapters.IntApolloAdapter).toJson(writer, scalarAdapters, value.red);
    }
    if (value.green instanceof Optional.Present) {
      writer.name("green");
      new ApolloOptionalAdapter<>(Adapters.NullableDoubleApolloAdapter).toJson(writer, scalarAdapters, value.green);
    }
    if (value.blue instanceof Optional.Present) {
      writer.name("blue");
      new ApolloOptionalAdapter<>(Adapters.DoubleApolloAdapter).toJson(writer, scalarAdapters, value.blue);
    }
    if (value.enumWithDefaultValue instanceof Optional.Present) {
      writer.name("enumWithDefaultValue");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(Episode_ResponseAdapter.INSTANCE)).toJson(writer, scalarAdapters, value.enumWithDefaultValue);
    }
    if (value.reviewRefInput instanceof Optional.Present) {
      writer.name("reviewRefInput");
      new ApolloOptionalAdapter<>(new NullableAdapter<>(new ObjectAdapter<ReviewRefInput>(ReviewRefInput_InputAdapter.INSTANCE, false))).toJson(writer, scalarAdapters, value.reviewRefInput);
    }
  }
}
