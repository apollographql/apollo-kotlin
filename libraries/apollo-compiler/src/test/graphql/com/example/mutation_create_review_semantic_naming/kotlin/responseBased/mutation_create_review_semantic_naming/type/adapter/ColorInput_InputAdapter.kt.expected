//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.mutation_create_review_semantic_naming.type.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.DoubleApolloAdapter
import com.apollographql.apollo3.api.IntApolloAdapter
import com.apollographql.apollo3.api.NullableDoubleApolloAdapter
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.present
import com.example.mutation_create_review_semantic_naming.type.ColorInput
import kotlin.IllegalStateException
import kotlin.Unit

public object ColorInput_InputAdapter : ApolloAdapter<ColorInput> {
  public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters): ColorInput =
      throw IllegalStateException("Input type used in output position")

  public override fun toJson(
    writer: JsonWriter,
    scalarAdapters: ScalarAdapters,
    `value`: ColorInput,
  ): Unit {
    if (value.red is Optional.Present) {
      writer.name("red")
      IntApolloAdapter.present().toJson(writer, scalarAdapters, value.red)
    }
    if (value.green is Optional.Present) {
      writer.name("green")
      NullableDoubleApolloAdapter.present().toJson(writer, scalarAdapters, value.green)
    }
    if (value.blue is Optional.Present) {
      writer.name("blue")
      DoubleApolloAdapter.present().toJson(writer, scalarAdapters, value.blue)
    }
    if (value.enumWithDefaultValue is Optional.Present) {
      writer.name("enumWithDefaultValue")
      Episode_ResponseAdapter.nullable().present().toJson(writer, scalarAdapters,
          value.enumWithDefaultValue)
    }
    if (value.reviewRefInput is Optional.Present) {
      writer.name("reviewRefInput")
      ReviewRefInput_InputAdapter.obj().nullable().present().toJson(writer, scalarAdapters,
          value.reviewRefInput)
    }
  }
}
