//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.starships.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.ListDataAdapter;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.starships.TestQuery;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("starship");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Starship _starship = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _starship = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Starship>(Starship.INSTANCE, false)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _starship
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("starship");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Starship>(Starship.INSTANCE, false)).serializeData(writer, value.starship, context);
    }
  }

  public enum Starship implements DataAdapter<TestQuery.Starship> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "coordinates");

    @Override
    public TestQuery.Starship deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _id = null;
      String _name = null;
      List<List<Double>> _coordinates = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _name = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 2: _coordinates = new NullableDataAdapter<>(new ListDataAdapter<>(new ListDataAdapter<>(DataAdapters.DoubleDataAdapter))).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Starship(
        _id,
        _name,
        _coordinates
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Starship value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("id");
      DataAdapters.StringDataAdapter.serializeData(writer, value.id, context);

      writer.name("name");
      DataAdapters.StringDataAdapter.serializeData(writer, value.name, context);

      writer.name("coordinates");
      new NullableDataAdapter<>(new ListDataAdapter<>(new ListDataAdapter<>(DataAdapters.DoubleDataAdapter))).serializeData(writer, value.coordinates, context);
    }
  }
}
