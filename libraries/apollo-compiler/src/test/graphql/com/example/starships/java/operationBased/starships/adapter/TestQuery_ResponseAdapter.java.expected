//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.starships.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.starships.TestQuery;
import java.io.IOException;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("starship");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      TestQuery.Starship _starship = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _starship = new NullableAdapter<>(new ObjectAdapter<TestQuery.Starship>(Starship.INSTANCE, false)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _starship
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("starship");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Starship>(Starship.INSTANCE, false)).toJson(writer, value.starship, context);
    }
  }

  public enum Starship implements ApolloAdapter<TestQuery.Starship> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "coordinates");

    @Override
    public TestQuery.Starship fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      String _id = null;
      String _name = null;
      List<List<Double>> _coordinates = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _id = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 1: _name = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 2: _coordinates = new NullableAdapter<>(new ListAdapter<>(new ListAdapter<>(Adapters.DoubleApolloAdapter))).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_id, "id");
      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Starship(
        _id,
        _name,
        _coordinates
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Starship value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("id");
      Adapters.StringApolloAdapter.toJson(writer, value.id, context);

      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, value.name, context);

      writer.name("coordinates");
      new NullableAdapter<>(new ListAdapter<>(new ListAdapter<>(Adapters.DoubleApolloAdapter))).toJson(writer, value.coordinates, context);
    }
  }
}
