//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableDoubleDataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var __typename: String? = null
      var _hero: TestQuery.Data.Hero? = null
      var _droid: TestQuery.Data.Droid? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringDataAdapter.deserializeData(reader, context)
          1 -> _hero = Hero.obj().nullable().deserializeData(reader, context)
          2 -> _droid = Droid.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        __typename = __typename!!,
        hero = _hero,
        droid = _droid
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("__typename")
      StringDataAdapter.serializeData(writer, value.__typename, context)

      writer.name("hero")
      Hero.obj().nullable().serializeData(writer, value.hero, context)

      writer.name("droid")
      Droid.obj().nullable().serializeData(writer, value.droid, context)
    }

    private object Hero : DataAdapter<TestQuery.Data.Hero> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanHero.deserializeData(reader, context, __typename)
          else
          -> OtherHero.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.serializeData(writer, value, context)
          is TestQuery.Data.OtherHero -> OtherHero.serializeData(writer, value, context)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn", "height")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _appearsIn: List<Episode?>? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().deserializeData(reader,
                context)
            3 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = _name!!,
          appearsIn = _appearsIn!!,
          height = _height
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanHero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("appearsIn")
        Episode_ResponseAdapter.nullable().list().serializeData(writer, value.appearsIn, context)

        writer.name("height")
        NullableDoubleDataAdapter.serializeData(writer, value.height, context)
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename
        var _name: String? = null
        var _appearsIn: List<Episode?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().deserializeData(reader,
                context)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!,
          name = _name!!,
          appearsIn = _appearsIn!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherHero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("appearsIn")
        Episode_ResponseAdapter.nullable().list().serializeData(writer, value.appearsIn, context)
      }
    }

    private object Droid : DataAdapter<TestQuery.Data.Droid> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Droid {
        var __typename: String? = null
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.Droid(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Droid,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("primaryFunction")
        NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)
      }
    }
  }
}
