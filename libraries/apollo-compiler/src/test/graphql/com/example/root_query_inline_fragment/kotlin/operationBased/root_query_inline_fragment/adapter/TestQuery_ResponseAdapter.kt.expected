//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var __typename: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _onQuery = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.fromJson(reader, customScalarAdapters)

      return TestQuery.Data(
        __typename = __typename ?: missingField(reader, "__typename"),
        onQuery = _onQuery
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.toJson(writer, customScalarAdapters, value.onQuery)
    }

    private object OnQuery : Adapter<TestQuery.Data.OnQuery> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OnQuery {
        var __typename: String? = null
        var _hero: TestQuery.Data.OnQuery.Hero? = null
        var _droid: TestQuery.Data.OnQuery.Droid? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
            2 -> _droid = Droid.obj(true).nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OnQuery(
          __typename = __typename ?: missingField(reader, "__typename"),
          hero = _hero,
          droid = _droid
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OnQuery,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("hero")
        Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)

        writer.name("droid")
        Droid.obj(true).nullable().toJson(writer, customScalarAdapters, value.droid)
      }

      private object Hero : Adapter<TestQuery.Data.OnQuery.Hero> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OnQuery.Hero {
          var __typename: String? = null
          var _name: String? = null
          var _appearsIn: List<Episode?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onHuman: TestQuery.Data.OnQuery.Hero.OnHuman? = null
          if (possibleTypes("Human").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
            reader.rewind()
            _onHuman = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Hero.OnHuman.fromJson(reader, customScalarAdapters)
          }

          return TestQuery.Data.OnQuery.Hero(
            __typename = __typename,
            name = _name ?: missingField(reader, "name"),
            appearsIn = _appearsIn ?: missingField(reader, "appearsIn"),
            onHuman = _onHuman
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.OnQuery.Hero,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters, value.appearsIn)

          if (value.onHuman != null) {
            com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Hero.OnHuman.toJson(writer, customScalarAdapters, value.onHuman)
          }
        }

        private object OnHuman : Adapter<TestQuery.Data.OnQuery.Hero.OnHuman> {
          public val RESPONSE_NAMES: List<String> = listOf("height")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OnQuery.Hero.OnHuman {
            var _height: Double? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.OnQuery.Hero.OnHuman(
              height = _height
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.OnQuery.Hero.OnHuman,
          ) {
            writer.name("height")
            NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
          }
        }
      }

      private object Droid : Adapter<TestQuery.Data.OnQuery.Droid> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OnQuery.Droid {
          var __typename: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          reader.rewind()
          val _onDroid = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Droid.OnDroid.fromJson(reader, customScalarAdapters)

          return TestQuery.Data.OnQuery.Droid(
            __typename = __typename ?: missingField(reader, "__typename"),
            onDroid = _onDroid
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.OnQuery.Droid,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Droid.OnDroid.toJson(writer, customScalarAdapters, value.onDroid)
        }

        private object OnDroid : Adapter<TestQuery.Data.OnQuery.Droid.OnDroid> {
          public val RESPONSE_NAMES: List<String> = listOf("name", "primaryFunction")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.OnQuery.Droid.OnDroid {
            var _name: String? = null
            var _primaryFunction: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                1 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.OnQuery.Droid.OnDroid(
              name = _name ?: missingField(reader, "name"),
              primaryFunction = _primaryFunction
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.OnQuery.Droid.OnDroid,
          ) {
            writer.name("name")
            StringAdapter.toJson(writer, customScalarAdapters, value.name)

            writer.name("primaryFunction")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
          }
        }
      }
    }
  }
}
