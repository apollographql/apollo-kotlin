//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableDoubleDataAdapter
import com.apollographql.apollo3.api.NullableStringDataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringDataAdapter.deserializeData(reader, context)
          else -> break
        }
      }

      reader.rewind()
      val _onQuery = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.deserializeData(reader,
          context)

      return TestQuery.Data(
        __typename = __typename!!,
        onQuery = _onQuery
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("__typename")
      StringDataAdapter.serializeData(writer, value.__typename, context)

      com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.serializeData(writer,
          value.onQuery, context)
    }

    private object OnQuery : DataAdapter<TestQuery.Data.OnQuery> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.OnQuery {
        var __typename: String? = null
        var _hero: TestQuery.Data.OnQuery.Hero? = null
        var _droid: TestQuery.Data.OnQuery.Droid? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _hero = Hero.obj(true).nullable().deserializeData(reader, context)
            2 -> _droid = Droid.obj(true).nullable().deserializeData(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OnQuery(
          __typename = __typename!!,
          hero = _hero,
          droid = _droid
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OnQuery,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("hero")
        Hero.obj(true).nullable().serializeData(writer, value.hero, context)

        writer.name("droid")
        Droid.obj(true).nullable().serializeData(writer, value.droid, context)
      }

      private object Hero : DataAdapter<TestQuery.Data.OnQuery.Hero> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.OnQuery.Hero {
          var __typename: String? = null
          var _name: String? = null
          var _appearsIn: List<Episode?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              1 -> _name = StringDataAdapter.deserializeData(reader, context)
              2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().deserializeData(reader,
                  context)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onHuman: TestQuery.Data.OnQuery.Hero.OnHuman? = null
          if (possibleTypes("Human").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onHuman = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Hero.OnHuman.deserializeData(reader,
                context)
          }

          return TestQuery.Data.OnQuery.Hero(
            __typename = __typename,
            name = _name!!,
            appearsIn = _appearsIn!!,
            onHuman = _onHuman
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.OnQuery.Hero,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)

          writer.name("appearsIn")
          Episode_ResponseAdapter.nullable().list().serializeData(writer, value.appearsIn, context)

          if (value.onHuman != null) {
            com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Hero.OnHuman.serializeData(writer,
                value.onHuman, context)
          }
        }

        private object OnHuman : DataAdapter<TestQuery.Data.OnQuery.Hero.OnHuman> {
          public val RESPONSE_NAMES: List<String> = listOf("height")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.OnQuery.Hero.OnHuman {
            var _height: Double? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _height = NullableDoubleDataAdapter.deserializeData(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.OnQuery.Hero.OnHuman(
              height = _height
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.OnQuery.Hero.OnHuman,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("height")
            NullableDoubleDataAdapter.serializeData(writer, value.height, context)
          }
        }
      }

      private object Droid : DataAdapter<TestQuery.Data.OnQuery.Droid> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.OnQuery.Droid {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringDataAdapter.deserializeData(reader, context)
              else -> break
            }
          }

          reader.rewind()
          val _onDroid = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Droid.OnDroid.deserializeData(reader,
              context)

          return TestQuery.Data.OnQuery.Droid(
            __typename = __typename!!,
            onDroid = _onDroid
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.OnQuery.Droid,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("__typename")
          StringDataAdapter.serializeData(writer, value.__typename, context)

          com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.OnQuery.Droid.OnDroid.serializeData(writer,
              value.onDroid, context)
        }

        private object OnDroid : DataAdapter<TestQuery.Data.OnQuery.Droid.OnDroid> {
          public val RESPONSE_NAMES: List<String> = listOf("name", "primaryFunction")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext): TestQuery.Data.OnQuery.Droid.OnDroid {
            var _name: String? = null
            var _primaryFunction: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _name = StringDataAdapter.deserializeData(reader, context)
                1 -> _primaryFunction = NullableStringDataAdapter.deserializeData(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.OnQuery.Droid.OnDroid(
              name = _name!!,
              primaryFunction = _primaryFunction
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.OnQuery.Droid.OnDroid,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("name")
            StringDataAdapter.serializeData(writer, value.name, context)

            writer.name("primaryFunction")
            NullableStringDataAdapter.serializeData(writer, value.primaryFunction, context)
          }
        }
      }
    }
  }
}
