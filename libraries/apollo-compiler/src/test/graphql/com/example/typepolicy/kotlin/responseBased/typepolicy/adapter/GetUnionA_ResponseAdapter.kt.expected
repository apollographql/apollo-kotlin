//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typepolicy.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.typepolicy.GetUnionA
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object GetUnionA_ResponseAdapter {
  public object Data : Adapter<GetUnionA.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("unionA")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data {
      var _unionA: GetUnionA.Data.UnionA? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _unionA = UnionA.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUnionA.Data(
        unionA = _unionA
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUnionA.Data,
    ) {
      writer.name("unionA")
      UnionA.obj().nullable().toJson(writer, customScalarAdapters, value.unionA)
    }

    private object UnionA : Adapter<GetUnionA.Data.UnionA> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA {
        val __typename = reader.readTypename()
        return when(__typename) {
          "A",
          -> AUnionA.fromJson(reader, customScalarAdapters, __typename)
          "B",
          -> BUnionA.fromJson(reader, customScalarAdapters, __typename)
          "C",
          -> CUnionA.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherUnionA.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.UnionA,
      ) {
        when(value) {
          is GetUnionA.Data.AUnionA -> AUnionA.toJson(writer, customScalarAdapters, value)
          is GetUnionA.Data.BUnionA -> BUnionA.toJson(writer, customScalarAdapters, value)
          is GetUnionA.Data.CUnionA -> CUnionA.toJson(writer, customScalarAdapters, value)
          is GetUnionA.Data.OtherUnionA -> OtherUnionA.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object AUnionA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetUnionA.Data.AUnionA {
        var __typename: String? = typename
        var _id: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetUnionA.Data.AUnionA(
          __typename = __typename ?: missingField(reader, "__typename"),
          id = _id ?: missingField(reader, "id")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.AUnionA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)
      }
    }

    public object BUnionA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "idB")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetUnionA.Data.BUnionA {
        var __typename: String? = typename
        var _idB: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _idB = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetUnionA.Data.BUnionA(
          __typename = __typename ?: missingField(reader, "__typename"),
          idB = _idB
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.BUnionA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("idB")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.idB)
      }
    }

    public object CUnionA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "idC")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetUnionA.Data.CUnionA {
        var __typename: String? = typename
        var _idC: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _idC = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetUnionA.Data.CUnionA(
          __typename = __typename ?: missingField(reader, "__typename"),
          idC = _idC
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.CUnionA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("idC")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.idC)
      }
    }

    public object OtherUnionA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetUnionA.Data.OtherUnionA {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetUnionA.Data.OtherUnionA(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.OtherUnionA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
