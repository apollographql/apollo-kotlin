//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typepolicy.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.typepolicy.GetUnionA
import kotlin.String
import kotlin.collections.List

public object GetUnionA_ResponseAdapter {
  public object Data : Adapter<GetUnionA.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("unionA")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data {
      var _unionA: GetUnionA.Data.UnionA? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _unionA = UnionA.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUnionA.Data(
        unionA = _unionA
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUnionA.Data,
    ) {
      writer.name("unionA")
      UnionA.obj(true).nullable().toJson(writer, customScalarAdapters, value.unionA)
    }

    private object UnionA : Adapter<GetUnionA.Data.UnionA> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        val _onUnionA = com.example.typepolicy.adapter.GetUnionA_ResponseAdapter.Data.UnionA.OnUnionA.fromJson(reader, customScalarAdapters)

        var _onA: GetUnionA.Data.UnionA.OnA? = null
        if (possibleTypes("A").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onA = com.example.typepolicy.adapter.GetUnionA_ResponseAdapter.Data.UnionA.OnA.fromJson(reader, customScalarAdapters)
        }

        var _onB: GetUnionA.Data.UnionA.OnB? = null
        if (possibleTypes("B").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onB = com.example.typepolicy.adapter.GetUnionA_ResponseAdapter.Data.UnionA.OnB.fromJson(reader, customScalarAdapters)
        }

        var _onC: GetUnionA.Data.UnionA.OnC? = null
        if (possibleTypes("C").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onC = com.example.typepolicy.adapter.GetUnionA_ResponseAdapter.Data.UnionA.OnC.fromJson(reader, customScalarAdapters)
        }

        return GetUnionA.Data.UnionA(
          __typename = __typename,
          onUnionA = _onUnionA,
          onA = _onA,
          onB = _onB,
          onC = _onC
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetUnionA.Data.UnionA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        OnUnionA.toJson(writer, customScalarAdapters, value.onUnionA)

        if (value.onA != null) {
          OnA.toJson(writer, customScalarAdapters, value.onA)
        }

        if (value.onB != null) {
          OnB.toJson(writer, customScalarAdapters, value.onB)
        }

        if (value.onC != null) {
          OnC.toJson(writer, customScalarAdapters, value.onC)
        }
      }

      private object OnUnionA : Adapter<GetUnionA.Data.UnionA.OnUnionA> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA.OnUnionA {
          var __typename: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetUnionA.Data.UnionA.OnUnionA(
            __typename = __typename ?: missingField(reader, "__typename")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetUnionA.Data.UnionA.OnUnionA,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
        }
      }

      private object OnA : Adapter<GetUnionA.Data.UnionA.OnA> {
        public val RESPONSE_NAMES: List<String> = listOf("id")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA.OnA {
          var _id: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetUnionA.Data.UnionA.OnA(
            id = _id ?: missingField(reader, "id")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetUnionA.Data.UnionA.OnA,
        ) {
          writer.name("id")
          StringAdapter.toJson(writer, customScalarAdapters, value.id)
        }
      }

      private object OnB : Adapter<GetUnionA.Data.UnionA.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("idB")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA.OnB {
          var _idB: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _idB = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetUnionA.Data.UnionA.OnB(
            idB = _idB
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetUnionA.Data.UnionA.OnB,
        ) {
          writer.name("idB")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.idB)
        }
      }

      private object OnC : Adapter<GetUnionA.Data.UnionA.OnC> {
        public val RESPONSE_NAMES: List<String> = listOf("idC")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetUnionA.Data.UnionA.OnC {
          var _idC: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _idC = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return GetUnionA.Data.UnionA.OnC(
            idC = _idC
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: GetUnionA.Data.UnionA.OnC,
        ) {
          writer.name("idC")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.idC)
        }
      }
    }
  }
}
