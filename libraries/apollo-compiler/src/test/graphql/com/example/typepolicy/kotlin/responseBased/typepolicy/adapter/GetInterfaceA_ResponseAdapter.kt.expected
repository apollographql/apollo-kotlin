//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.typepolicy.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.typepolicy.GetInterfaceA
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object GetInterfaceA_ResponseAdapter {
  public object Data : Adapter<GetInterfaceA.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("interfaceA")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetInterfaceA.Data {
      var _interfaceA: GetInterfaceA.Data.InterfaceA? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _interfaceA = InterfaceA.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetInterfaceA.Data(
        interfaceA = _interfaceA
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetInterfaceA.Data,
    ) {
      writer.name("interfaceA")
      InterfaceA.obj().nullable().toJson(writer, customScalarAdapters, value.interfaceA)
    }

    private object InterfaceA : Adapter<GetInterfaceA.Data.InterfaceA> {
      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): GetInterfaceA.Data.InterfaceA {
        val __typename = reader.readTypename()
        return when(__typename) {
          "B",
          -> BInterfaceA.fromJson(reader, customScalarAdapters, __typename)
          "C",
          -> CInterfaceA.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherInterfaceA.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: GetInterfaceA.Data.InterfaceA,
      ) {
        when(value) {
          is GetInterfaceA.Data.BInterfaceA -> BInterfaceA.toJson(writer, customScalarAdapters, value)
          is GetInterfaceA.Data.CInterfaceA -> CInterfaceA.toJson(writer, customScalarAdapters, value)
          is GetInterfaceA.Data.OtherInterfaceA -> OtherInterfaceA.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object BInterfaceA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "interfaceAField", "idB")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetInterfaceA.Data.BInterfaceA {
        var __typename: String? = typename
        var _interfaceAField: String? = null
        var _idB: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _interfaceAField = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _idB = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetInterfaceA.Data.BInterfaceA(
          __typename = __typename ?: missingField(reader, "__typename"),
          interfaceAField = _interfaceAField,
          idB = _idB
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetInterfaceA.Data.BInterfaceA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("interfaceAField")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.interfaceAField)

        writer.name("idB")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.idB)
      }
    }

    public object CInterfaceA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "interfaceAField", "idC")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetInterfaceA.Data.CInterfaceA {
        var __typename: String? = typename
        var _interfaceAField: String? = null
        var _idC: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _interfaceAField = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _idC = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetInterfaceA.Data.CInterfaceA(
          __typename = __typename ?: missingField(reader, "__typename"),
          interfaceAField = _interfaceAField,
          idC = _idC
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetInterfaceA.Data.CInterfaceA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("interfaceAField")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.interfaceAField)

        writer.name("idC")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.idC)
      }
    }

    public object OtherInterfaceA {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "interfaceAField")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): GetInterfaceA.Data.OtherInterfaceA {
        var __typename: String? = typename
        var _interfaceAField: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _interfaceAField = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return GetInterfaceA.Data.OtherInterfaceA(
          __typename = __typename ?: missingField(reader, "__typename"),
          interfaceAField = _interfaceAField
        )
      }

      public fun toJson(
        writer: JsonWriter,
        @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
        `value`: GetInterfaceA.Data.OtherInterfaceA,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("interfaceAField")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.interfaceAField)
      }
    }
  }
}
