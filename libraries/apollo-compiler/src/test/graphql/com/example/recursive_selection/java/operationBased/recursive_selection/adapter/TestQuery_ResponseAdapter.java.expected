//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.recursive_selection.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.ListAdapter;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.recursive_selection.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("tree");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.Tree _tree = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _tree = new NullableAdapter<>(new ObjectAdapter<TestQuery.Tree>(Tree.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _tree
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("tree");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Tree>(Tree.INSTANCE, false)).toJson(writer, customScalarAdapters, value.tree);
    }
  }

  public enum Tree implements Adapter<TestQuery.Tree> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "children", "parent");

    @Override
    public TestQuery.Tree fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _name = null;
      List<TestQuery.Child> _children = null;
      TestQuery.Parent _parent = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _children = new ListAdapter<>(new ObjectAdapter<TestQuery.Child>(Child.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _parent = new NullableAdapter<>(new ObjectAdapter<TestQuery.Parent>(Parent.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_children, "children");

      return new TestQuery.Tree(
        _name,
        _children,
        _parent
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Tree value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("children");
      new ListAdapter<>(new ObjectAdapter<TestQuery.Child>(Child.INSTANCE, false)).toJson(writer, customScalarAdapters, value.children);

      writer.name("parent");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Parent>(Parent.INSTANCE, false)).toJson(writer, customScalarAdapters, value.parent);
    }
  }

  public enum Child implements Adapter<TestQuery.Child> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Child fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Child(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Child value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum Parent implements Adapter<TestQuery.Parent> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Parent fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Parent(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Parent value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
