//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.not_all_combinations_are_needed.adapter

import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.not_all_combinations_are_needed.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("root")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _root: TestQuery.Data.Root? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _root = Root.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        root = _root
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("root")
      Root.obj().nullable().serializeData(writer, value.root, context)
    }

    private object Root : DataAdapter<TestQuery.Data.Root> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Root {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ABC",
          -> ABRoot.deserializeData(reader, context, __typename)
          else
          -> OtherRoot.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Root,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.ABRoot -> ABRoot.serializeData(writer, value, context)
          is TestQuery.Data.OtherRoot -> OtherRoot.serializeData(writer, value, context)
        }
      }
    }

    public object ABRoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1", "fieldB1")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.ABRoot {
        var __typename: String? = typename
        var _fieldA1: String? = null
        var _fieldB1: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldA1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _fieldB1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.ABRoot(
          __typename = __typename!!,
          fieldA1 = _fieldA1,
          fieldB1 = _fieldB1
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.ABRoot,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldA1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldA1)

        writer.name("fieldB1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB1)
      }
    }

    public object OtherRoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): TestQuery.Data.OtherRoot {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherRoot(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherRoot,
        @Suppress("UNUSED_PARAMETER") context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
