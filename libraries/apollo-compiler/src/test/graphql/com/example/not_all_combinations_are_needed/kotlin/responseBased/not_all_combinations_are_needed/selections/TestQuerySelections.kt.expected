//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.not_all_combinations_are_needed.selections

import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CompiledFragment
import com.apollographql.apollo.api.CompiledSelection
import com.apollographql.apollo.api.notNull
import com.example.not_all_combinations_are_needed.fragment.selections.BFragmentSelections
import com.example.not_all_combinations_are_needed.type.C
import com.example.not_all_combinations_are_needed.type.GraphQLString
import kotlin.collections.List

public object TestQuerySelections {
  private val __onB: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "B",
          possibleTypes = listOf("ABC", "SomeBC")
        ).selections(BFragmentSelections.__root)
        .build()
      )

  private val __onA: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "fieldA1",
          type = GraphQLString.type
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "B",
          possibleTypes = listOf("ABC", "SomeBC")
        ).selections(__onB)
        .build()
      )

  private val __root1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "A",
          possibleTypes = listOf("ABC")
        ).selections(__onA)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "root",
          type = C.type
        ).selections(__root1)
        .build()
      )
}
