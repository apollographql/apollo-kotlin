//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_merge_fields.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.inline_fragment_merge_fields.TestQuery;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, true)).toJson(writer, value.hero, context);
    }
  }

  public enum Hero implements ApolloAdapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name", "friendsConnection");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      String __typename = null;
      String _name = null;
      TestQuery.FriendsConnection _friendsConnection = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 1: _name = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 2: _friendsConnection = new ObjectAdapter<TestQuery.FriendsConnection>(FriendsConnection.INSTANCE, false).fromJson(reader, context); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestQuery.OnCharacter _onCharacter = com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.fromJson(reader, context);

      Assertions.checkFieldNotMissing(__typename, "__typename");
      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_friendsConnection, "friendsConnection");

      return new TestQuery.Hero(
        __typename,
        _name,
        _friendsConnection,
        _onCharacter
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Hero value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("__typename");
      Adapters.StringApolloAdapter.toJson(writer, value.__typename, context);

      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, value.name, context);

      writer.name("friendsConnection");
      new ObjectAdapter<TestQuery.FriendsConnection>(FriendsConnection.INSTANCE, false).toJson(writer, value.friendsConnection, context);

      com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.toJson(writer, value.onCharacter, context);
    }
  }

  public enum FriendsConnection implements ApolloAdapter<TestQuery.FriendsConnection> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("edges");

    @Override
    public TestQuery.FriendsConnection fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      List<TestQuery.Edge> _edges = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _edges = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Edge>(Edge.INSTANCE, false)))).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.FriendsConnection(
        _edges
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.FriendsConnection value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("edges");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Edge>(Edge.INSTANCE, false)))).toJson(writer, value.edges, context);
    }
  }

  public enum Edge implements ApolloAdapter<TestQuery.Edge> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("node");

    @Override
    public TestQuery.Edge fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      TestQuery.Node _node = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _node = new NullableAdapter<>(new ObjectAdapter<TestQuery.Node>(Node.INSTANCE, false)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Edge(
        _node
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Edge value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("node");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Node>(Node.INSTANCE, false)).toJson(writer, value.node, context);
    }
  }

  public enum Node implements ApolloAdapter<TestQuery.Node> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Node fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Node(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Node value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, value.name, context);
    }
  }

  public enum OnCharacter implements ApolloAdapter<TestQuery.OnCharacter> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "profileLink", "friendsConnection");

    @Override
    public TestQuery.OnCharacter fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      String _name = null;
      Object _profileLink = null;
      TestQuery.FriendsConnection1 _friendsConnection = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          case 1: _profileLink = Adapters.AnyApolloAdapter.fromJson(reader, context); break;
          case 2: _friendsConnection = new ObjectAdapter<TestQuery.FriendsConnection1>(FriendsConnection1.INSTANCE, false).fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_profileLink, "profileLink");
      Assertions.checkFieldNotMissing(_friendsConnection, "friendsConnection");

      return new TestQuery.OnCharacter(
        _name,
        _profileLink,
        _friendsConnection
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.OnCharacter value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, value.name, context);

      writer.name("profileLink");
      Adapters.AnyApolloAdapter.toJson(writer, value.profileLink, context);

      writer.name("friendsConnection");
      new ObjectAdapter<TestQuery.FriendsConnection1>(FriendsConnection1.INSTANCE, false).toJson(writer, value.friendsConnection, context);
    }
  }

  public enum FriendsConnection1 implements ApolloAdapter<TestQuery.FriendsConnection1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("edges");

    @Override
    public TestQuery.FriendsConnection1 fromJson(JsonReader reader,
        ApolloAdapter.DataDeserializeContext context) throws IOException {
      List<TestQuery.Edge1> _edges = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _edges = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Edge1>(Edge1.INSTANCE, false)))).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.FriendsConnection1(
        _edges
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.FriendsConnection1 value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("edges");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Edge1>(Edge1.INSTANCE, false)))).toJson(writer, value.edges, context);
    }
  }

  public enum Edge1 implements ApolloAdapter<TestQuery.Edge1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("node");

    @Override
    public TestQuery.Edge1 fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      TestQuery.Node1 _node = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _node = new NullableAdapter<>(new ObjectAdapter<TestQuery.Node1>(Node1.INSTANCE, false)).fromJson(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Edge1(
        _node
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Edge1 value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("node");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Node1>(Node1.INSTANCE, false)).toJson(writer, value.node, context);
    }
  }

  public enum Node1 implements ApolloAdapter<TestQuery.Node1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Node1 fromJson(JsonReader reader, ApolloAdapter.DataDeserializeContext context)
        throws IOException {
      String _name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringApolloAdapter.fromJson(reader, context); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");

      return new TestQuery.Node1(
        _name
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Node1 value,
        ApolloAdapter.DataSerializeContext context) throws IOException {
      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, value.name, context);
    }
  }
}
