//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_merge_fields.adapter

import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_merge_fields.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, value.hero, adapterContext)
    }

    private object Hero : CompositeAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friendsConnection")

      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.Hero.FriendsConnection? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, adapterContext)
            else -> break
          }
        }

        reader.rewind()
        val _onCharacter = com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.fromJson(reader,
            adapterContext)

        return TestQuery.Data.Hero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection"),
          onCharacter = _onCharacter
        )
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, value.friendsConnection, adapterContext)

        com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.toJson(writer,
            value.onCharacter, adapterContext)
      }

      private object FriendsConnection : CompositeAdapter<TestQuery.Data.Hero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("edges")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Hero.FriendsConnection {
          var _edges: List<TestQuery.Data.Hero.FriendsConnection.Edge?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return TestQuery.Data.Hero.FriendsConnection(
            edges = _edges
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.FriendsConnection,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, value.edges, adapterContext)
        }

        private object Edge : CompositeAdapter<TestQuery.Data.Hero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              TestQuery.Data.Hero.FriendsConnection.Edge {
            var _node: TestQuery.Data.Hero.FriendsConnection.Edge.Node? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, adapterContext)
                else -> break
              }
            }

            return TestQuery.Data.Hero.FriendsConnection.Edge(
              node = _node
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.FriendsConnection.Edge,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("node")
            Node.obj().nullable().toJson(writer, value.node, adapterContext)
          }

          private object Node : CompositeAdapter<TestQuery.Data.Hero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Hero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.FriendsConnection.Edge.Node(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Hero.FriendsConnection.Edge.Node,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
            }
          }
        }
      }

      private object OnCharacter : CompositeAdapter<TestQuery.Data.Hero.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "profileLink", "friendsConnection")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.Hero.OnCharacter {
          var _name: String? = null
          var _profileLink: Any? = null
          var _friendsConnection: TestQuery.Data.Hero.OnCharacter.FriendsConnection? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              1 -> _profileLink = AnyAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              2 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnCharacter(
            name = _name ?: missingField(reader, "name"),
            profileLink = _profileLink ?: missingField(reader, "profileLink"),
            friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnCharacter,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

          writer.name("profileLink")
          AnyAdapter.toJson(writer, CustomScalarAdapters.Empty, value.profileLink)

          writer.name("friendsConnection")
          FriendsConnection.obj().toJson(writer, value.friendsConnection, adapterContext)
        }

        private object FriendsConnection :
            CompositeAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection> {
          public val RESPONSE_NAMES: List<String> = listOf("edges")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              TestQuery.Data.Hero.OnCharacter.FriendsConnection {
            var _edges: List<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge?>? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, adapterContext)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnCharacter.FriendsConnection(
              edges = _edges
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("edges")
            Edge.obj().nullable().list().nullable().toJson(writer, value.edges, adapterContext)
          }

          private object Edge :
              CompositeAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge> {
            public val RESPONSE_NAMES: List<String> = listOf("node")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge {
              var _node: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _node = Node.obj().nullable().fromJson(reader, adapterContext)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge(
                node = _node
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("node")
              Node.obj().nullable().toJson(writer, value.node, adapterContext)
            }

            private object Node :
                CompositeAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node> {
              public val RESPONSE_NAMES: List<String> = listOf("name")

              override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                  TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node {
                var _name: String? = null

                while (true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                    else -> break
                  }
                }

                return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node(
                  name = _name ?: missingField(reader, "name")
                )
              }

              override fun toJson(
                writer: JsonWriter,
                `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node,
                adapterContext: CompositeAdapterContext,
              ) {
                writer.name("name")
                StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
              }
            }
          }
        }
      }
    }
  }
}
