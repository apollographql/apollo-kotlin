//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_merge_fields.adapter

import com.apollographql.apollo3.api.AnyDataAdapter
import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_merge_fields.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : DataAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj(true).nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().serializeData(writer, value.hero, context)
    }

    private object Hero : DataAdapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friendsConnection")

      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero {
        var __typename: String? = null
        var _name: String? = null
        var _friendsConnection: TestQuery.Data.Hero.FriendsConnection? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            2 -> _friendsConnection = FriendsConnection.obj().deserializeData(reader, context)
            else -> break
          }
        }

        reader.rewind()
        val _onCharacter = com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.deserializeData(reader,
            context)

        return TestQuery.Data.Hero(
          __typename = __typename!!,
          name = _name!!,
          friendsConnection = _friendsConnection!!,
          onCharacter = _onCharacter
        )
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)

        writer.name("friendsConnection")
        FriendsConnection.obj().serializeData(writer, value.friendsConnection, context)

        com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.serializeData(writer,
            value.onCharacter, context)
      }

      private object FriendsConnection : DataAdapter<TestQuery.Data.Hero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("edges")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.FriendsConnection {
          var _edges: List<TestQuery.Data.Hero.FriendsConnection.Edge?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _edges = Edge.obj().nullable().list().nullable().deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.FriendsConnection(
            edges = _edges
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.FriendsConnection,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("edges")
          Edge.obj().nullable().list().nullable().serializeData(writer, value.edges, context)
        }

        private object Edge : DataAdapter<TestQuery.Data.Hero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext):
              TestQuery.Data.Hero.FriendsConnection.Edge {
            var _node: TestQuery.Data.Hero.FriendsConnection.Edge.Node? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().deserializeData(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Hero.FriendsConnection.Edge(
              node = _node
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.FriendsConnection.Edge,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("node")
            Node.obj().nullable().serializeData(writer, value.node, context)
          }

          private object Node : DataAdapter<TestQuery.Data.Hero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun deserializeData(reader: JsonReader,
                context: DataAdapter.DeserializeDataContext):
                TestQuery.Data.Hero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringDataAdapter.deserializeData(reader, context)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.FriendsConnection.Edge.Node(
                name = _name!!
              )
            }

            public override fun serializeData(
              writer: JsonWriter,
              `value`: TestQuery.Data.Hero.FriendsConnection.Edge.Node,
              context: DataAdapter.SerializeDataContext,
            ): Unit {
              writer.name("name")
              StringDataAdapter.serializeData(writer, value.name, context)
            }
          }
        }
      }

      private object OnCharacter : DataAdapter<TestQuery.Data.Hero.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "profileLink", "friendsConnection")

        public override fun deserializeData(reader: JsonReader,
            context: DataAdapter.DeserializeDataContext): TestQuery.Data.Hero.OnCharacter {
          var _name: String? = null
          var _profileLink: Any? = null
          var _friendsConnection: TestQuery.Data.Hero.OnCharacter.FriendsConnection? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringDataAdapter.deserializeData(reader, context)
              1 -> _profileLink = AnyDataAdapter.deserializeData(reader, context)
              2 -> _friendsConnection = FriendsConnection.obj().deserializeData(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnCharacter(
            name = _name!!,
            profileLink = _profileLink!!,
            friendsConnection = _friendsConnection!!
          )
        }

        public override fun serializeData(
          writer: JsonWriter,
          `value`: TestQuery.Data.Hero.OnCharacter,
          context: DataAdapter.SerializeDataContext,
        ): Unit {
          writer.name("name")
          StringDataAdapter.serializeData(writer, value.name, context)

          writer.name("profileLink")
          AnyDataAdapter.serializeData(writer, value.profileLink, context)

          writer.name("friendsConnection")
          FriendsConnection.obj().serializeData(writer, value.friendsConnection, context)
        }

        private object FriendsConnection :
            DataAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection> {
          public val RESPONSE_NAMES: List<String> = listOf("edges")

          public override fun deserializeData(reader: JsonReader,
              context: DataAdapter.DeserializeDataContext):
              TestQuery.Data.Hero.OnCharacter.FriendsConnection {
            var _edges: List<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _edges = Edge.obj().nullable().list().nullable().deserializeData(reader,
                    context)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnCharacter.FriendsConnection(
              edges = _edges
            )
          }

          public override fun serializeData(
            writer: JsonWriter,
            `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection,
            context: DataAdapter.SerializeDataContext,
          ): Unit {
            writer.name("edges")
            Edge.obj().nullable().list().nullable().serializeData(writer, value.edges, context)
          }

          private object Edge : DataAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge>
              {
            public val RESPONSE_NAMES: List<String> = listOf("node")

            public override fun deserializeData(reader: JsonReader,
                context: DataAdapter.DeserializeDataContext):
                TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge {
              var _node: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _node = Node.obj().nullable().deserializeData(reader, context)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge(
                node = _node
              )
            }

            public override fun serializeData(
              writer: JsonWriter,
              `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge,
              context: DataAdapter.SerializeDataContext,
            ): Unit {
              writer.name("node")
              Node.obj().nullable().serializeData(writer, value.node, context)
            }

            private object Node :
                DataAdapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node> {
              public val RESPONSE_NAMES: List<String> = listOf("name")

              public override fun deserializeData(reader: JsonReader,
                  context: DataAdapter.DeserializeDataContext):
                  TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node {
                var _name: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> _name = StringDataAdapter.deserializeData(reader, context)
                    else -> break
                  }
                }

                return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node(
                  name = _name!!
                )
              }

              public override fun serializeData(
                writer: JsonWriter,
                `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node,
                context: DataAdapter.SerializeDataContext,
              ): Unit {
                writer.name("name")
                StringDataAdapter.serializeData(writer, value.name, context)
              }
            }
          }
        }
      }
    }
  }
}
