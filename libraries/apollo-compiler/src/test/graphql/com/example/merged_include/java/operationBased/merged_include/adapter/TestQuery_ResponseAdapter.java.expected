//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.merged_include.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.ApolloAdapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.ScalarAdapters;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.merged_include.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements ApolloAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      TestQuery.Hero _hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _hero = new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, TestQuery.Data value)
        throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).toJson(writer, scalarAdapters, value.hero);
    }
  }

  public enum Hero implements ApolloAdapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "id");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, ScalarAdapters scalarAdapters) throws
        IOException {
      String _name = null;
      String _id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _name = Adapters.StringApolloAdapter.fromJson(reader, scalarAdapters); break;
          case 1: _id = Adapters.StringApolloAdapter.fromJson(reader, scalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_name, "name");
      Assertions.checkFieldNotMissing(_id, "id");

      return new TestQuery.Hero(
        _name,
        _id
      );
    }

    @Override
    public void toJson(JsonWriter writer, ScalarAdapters scalarAdapters, TestQuery.Hero value)
        throws IOException {
      writer.name("name");
      Adapters.StringApolloAdapter.toJson(writer, scalarAdapters, value.name);

      writer.name("id");
      Adapters.StringApolloAdapter.toJson(writer, scalarAdapters, value.id);
    }
  }
}
