//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.list_field_clash.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListCompositeAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.list_field_clash.TestQuery;
import com.example.list_field_clash.type.adapter.AmenityCategory_ResponseAdapter;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("amenityCategories", "category");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      List<TestQuery.AmenityCategory> _amenityCategories = null;
      com.example.list_field_clash.type.AmenityCategory _category = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _amenityCategories = new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.AmenityCategory>(AmenityCategory.INSTANCE, false)))).fromJson(reader, adapterContext); break;
          case 1: _category = new NullableAdapter<>(AmenityCategory_ResponseAdapter.INSTANCE).fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _amenityCategories,
        _category
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("amenityCategories");
      new NullableCompositeAdapter<>(new ListCompositeAdapter<>(new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.AmenityCategory>(AmenityCategory.INSTANCE, false)))).toJson(writer, value.amenityCategories, adapterContext);

      writer.name("category");
      new NullableAdapter<>(AmenityCategory_ResponseAdapter.INSTANCE).toJson(writer, CustomScalarAdapters.Empty, value.category);
    }
  }

  public enum AmenityCategory implements CompositeAdapter<TestQuery.AmenityCategory> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("text");

    @Override
    public TestQuery.AmenityCategory fromJson(JsonReader reader,
        CompositeAdapterContext adapterContext) throws IOException {
      String _text = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _text = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      return new TestQuery.AmenityCategory(
        _text
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.AmenityCategory value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("text");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.text);
    }
  }
}
