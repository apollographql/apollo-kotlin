//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.list_field_clash.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.list_field_clash.TestQuery
import com.example.list_field_clash.type.adapter.AmenityCategory_ResponseAdapter
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("amenityCategories", "category")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _amenityCategories: List<TestQuery.Data.AmenityCategory?>? = null
      var _category: com.example.list_field_clash.type.AmenityCategory? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _amenityCategories = AmenityCategory.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
          1 -> _category = AmenityCategory_ResponseAdapter.nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        amenityCategories = _amenityCategories,
        category = _category
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("amenityCategories")
      AmenityCategory.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.amenityCategories)

      writer.name("category")
      AmenityCategory_ResponseAdapter.nullable().toJson(writer, customScalarAdapters, value.category)
    }

    private object AmenityCategory : Adapter<TestQuery.Data.AmenityCategory> {
      public val RESPONSE_NAMES: List<String> = listOf("text")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.AmenityCategory {
        var _text: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _text = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.AmenityCategory(
          text = _text
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.AmenityCategory,
      ) {
        writer.name("text")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.text)
      }
    }
  }
}
