//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.capitalized_fields.adapter;

import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CompositeAdapter;
import com.apollographql.apollo3.api.CompositeAdapterContext;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableCompositeAdapter;
import com.apollographql.apollo3.api.ObjectCompositeAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.capitalized_fields.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements CompositeAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Horse");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      TestQuery.Horse _Horse = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Horse = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Horse>(Horse.INSTANCE, true)).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _Horse
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Data value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("Horse");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Horse>(Horse.INSTANCE, true)).toJson(writer, value.Horse, adapterContext);
    }
  }

  public enum Horse implements CompositeAdapter<TestQuery.Horse> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "Donkey");

    @Override
    public TestQuery.Horse fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      String __typename = null;
      String _Donkey = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          case 1: _Donkey = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestQuery.OnHorse _onHorse = com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.INSTANCE.fromJson(reader, adapterContext);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestQuery.Horse(
        __typename,
        _Donkey,
        _onHorse
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Horse value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename);

      writer.name("Donkey");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.Donkey);

      com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.INSTANCE.toJson(writer, value.onHorse, adapterContext);
    }
  }

  public enum OnHorse implements CompositeAdapter<TestQuery.OnHorse> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Cow");

    @Override
    public TestQuery.OnHorse fromJson(JsonReader reader, CompositeAdapterContext adapterContext)
        throws IOException {
      TestQuery.Cow _Cow = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Cow = new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Cow>(Cow.INSTANCE, false)).fromJson(reader, adapterContext); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHorse(
        _Cow
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.OnHorse value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("Cow");
      new NullableCompositeAdapter<>(new ObjectCompositeAdapter<TestQuery.Cow>(Cow.INSTANCE, false)).toJson(writer, value.Cow, adapterContext);
    }
  }

  public enum Cow implements CompositeAdapter<TestQuery.Cow> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Moo");

    @Override
    public TestQuery.Cow fromJson(JsonReader reader, CompositeAdapterContext adapterContext) throws
        IOException {
      String _Moo = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Moo = Adapters.NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty); break;
          default: break loop;
        }
      }

      return new TestQuery.Cow(
        _Moo
      );
    }

    @Override
    public void toJson(JsonWriter writer, TestQuery.Cow value,
        CompositeAdapterContext adapterContext) throws IOException {
      writer.name("Moo");
      Adapters.NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.Moo);
    }
  }
}
