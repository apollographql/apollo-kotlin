//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.capitalized_fields.adapter;

import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.DataAdapter;
import com.apollographql.apollo3.api.DataAdapters;
import com.apollographql.apollo3.api.NullableDataAdapter;
import com.apollographql.apollo3.api.ObjectDataAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.capitalized_fields.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements DataAdapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Horse");

    @Override
    public TestQuery.Data deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Horse _Horse = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Horse = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Horse>(Horse.INSTANCE, true)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _Horse
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Data value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("Horse");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Horse>(Horse.INSTANCE, true)).serializeData(writer, value.Horse, context);
    }
  }

  public enum Horse implements DataAdapter<TestQuery.Horse> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "Donkey");

    @Override
    public TestQuery.Horse deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String __typename = null;
      String _Donkey = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = DataAdapters.StringDataAdapter.deserializeData(reader, context); break;
          case 1: _Donkey = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      reader.rewind();
      TestQuery.OnHorse _onHorse = com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.INSTANCE.deserializeData(reader, context);

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new TestQuery.Horse(
        __typename,
        _Donkey,
        _onHorse
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Horse value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("__typename");
      DataAdapters.StringDataAdapter.serializeData(writer, value.__typename, context);

      writer.name("Donkey");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.Donkey, context);

      com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.INSTANCE.serializeData(writer, value.onHorse, context);
    }
  }

  public enum OnHorse implements DataAdapter<TestQuery.OnHorse> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Cow");

    @Override
    public TestQuery.OnHorse deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      TestQuery.Cow _Cow = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Cow = new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Cow>(Cow.INSTANCE, false)).deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.OnHorse(
        _Cow
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.OnHorse value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("Cow");
      new NullableDataAdapter<>(new ObjectDataAdapter<TestQuery.Cow>(Cow.INSTANCE, false)).serializeData(writer, value.Cow, context);
    }
  }

  public enum Cow implements DataAdapter<TestQuery.Cow> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("Moo");

    @Override
    public TestQuery.Cow deserializeData(JsonReader reader,
        DataAdapter.DeserializeDataContext context) throws IOException {
      String _Moo = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _Moo = DataAdapters.NullableStringDataAdapter.deserializeData(reader, context); break;
          default: break loop;
        }
      }

      return new TestQuery.Cow(
        _Moo
      );
    }

    @Override
    public void serializeData(JsonWriter writer, TestQuery.Cow value,
        DataAdapter.SerializeDataContext context) throws IOException {
      writer.name("Moo");
      DataAdapters.NullableStringDataAdapter.serializeData(writer, value.Moo, context);
    }
  }
}
