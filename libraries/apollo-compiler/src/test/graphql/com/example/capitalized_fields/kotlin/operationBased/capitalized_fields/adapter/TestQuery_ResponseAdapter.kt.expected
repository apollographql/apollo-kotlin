//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.capitalized_fields.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.capitalized_fields.TestQuery
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("Horse")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _Horse: TestQuery.Horse? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _Horse = Horse.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        Horse = _Horse
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("Horse")
      Horse.obj(true).nullable().toJson(writer, customScalarAdapters, value.Horse)
    }
  }

  public object Horse : Adapter<TestQuery.Horse> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "Donkey")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Horse {
      var __typename: String? = null
      var _Donkey: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _Donkey = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      reader.rewind()
      val _onHorse = com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.fromJson(reader, customScalarAdapters)

      return TestQuery.Horse(
        __typename = __typename ?: missingField(reader, "__typename"),
        Donkey = _Donkey,
        onHorse = _onHorse
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Horse,
    ) {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("Donkey")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.Donkey)

      com.example.capitalized_fields.adapter.TestQuery_ResponseAdapter.OnHorse.toJson(writer, customScalarAdapters, value.onHorse)
    }
  }

  public object OnHorse : Adapter<TestQuery.OnHorse> {
    public val RESPONSE_NAMES: List<String> = listOf("Cow")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.OnHorse {
      var _Cow: TestQuery.Cow? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _Cow = Cow.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.OnHorse(
        Cow = _Cow
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.OnHorse,
    ) {
      writer.name("Cow")
      Cow.obj().nullable().toJson(writer, customScalarAdapters, value.Cow)
    }
  }

  public object Cow : Adapter<TestQuery.Cow> {
    public val RESPONSE_NAMES: List<String> = listOf("Moo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Cow {
      var _Moo: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _Moo = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Cow(
        Moo = _Moo
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Cow,
    ) {
      writer.name("Moo")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.Moo)
    }
  }
}
