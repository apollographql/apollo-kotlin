//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_fragment_with_inline_fragments.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.json.readTypename
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.example.simple_fragment_with_inline_fragments.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    private object Hero : Adapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friends")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Hero {
        var __typename: String? = null
        var _name: String? = null
        var _friends: List<TestQuery.Data.Hero.Friend?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Hero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          friends = _friends
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Hero,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.friends)
      }

      private object Friend : Adapter<TestQuery.Data.Hero.Friend> {
        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Hero.Friend {
          val __typename = reader.readTypename()
          return when(__typename) {
            "Human",
            -> HumanFriend.fromJson(reader, customScalarAdapters, __typename)
            "Droid",
            -> DroidFriend.fromJson(reader, customScalarAdapters, __typename)
            else
            -> OtherFriend.fromJson(reader, customScalarAdapters, __typename)
          }
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.Friend,
        ) {
          when(value) {
            is TestQuery.Data.Hero.HumanFriend -> HumanFriend.toJson(writer, customScalarAdapters, value)
            is TestQuery.Data.Hero.DroidFriend -> DroidFriend.toJson(writer, customScalarAdapters, value)
            is TestQuery.Data.Hero.OtherFriend -> OtherFriend.toJson(writer, customScalarAdapters, value)
          }
        }
      }

      public object HumanFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.Hero.HumanFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _height: Double? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.HumanFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            height = _height
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.HumanFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("height")
          NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
        }
      }

      public object DroidFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.Hero.DroidFriend {
          var __typename: String? = typename
          var _name: String? = null
          var _primaryFunction: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.DroidFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name"),
            primaryFunction = _primaryFunction
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.DroidFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("primaryFunction")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
        }
      }

      public object OtherFriend {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public fun fromJson(
          reader: JsonReader,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          typename: String,
        ): TestQuery.Data.Hero.OtherFriend {
          var __typename: String? = typename
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OtherFriend(
            __typename = __typename ?: missingField(reader, "__typename"),
            name = _name ?: missingField(reader, "name")
          )
        }

        public fun toJson(
          writer: JsonWriter,
          @Suppress("UNUSED_PARAMETER") customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.OtherFriend,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
