//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.fragment

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object Data : DataAdapter<AnimalFragmentImpl.Data> {
    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): AnimalFragmentImpl.Data {
      val __typename = reader.readTypename()
      return when(__typename) {
        "Cat",
        -> CatData.deserializeData(reader, context, __typename)
        "Dog",
        -> DogData.deserializeData(reader, context, __typename)
        else
        -> OtherData.deserializeData(reader, context, __typename)
      }
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      when(value) {
        is AnimalFragmentImpl.CatData -> CatData.serializeData(writer, value, context)
        is AnimalFragmentImpl.DogData -> DogData.serializeData(writer, value, context)
        is AnimalFragmentImpl.OtherData -> OtherData.serializeData(writer, value, context)
      }
    }
  }

  public object CatData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    public fun deserializeData(
      reader: JsonReader,
      context: DataAdapter.DeserializeDataContext,
      typename: String,
    ): AnimalFragmentImpl.CatData {
      var __typename: String? = typename
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringDataAdapter.deserializeData(reader, context)
          1 -> _name = StringDataAdapter.deserializeData(reader, context)
          else -> break
        }
      }

      return AnimalFragmentImpl.CatData(
        __typename = __typename!!,
        name = _name!!
      )
    }

    public fun serializeData(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.CatData,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("__typename")
      StringDataAdapter.serializeData(writer, value.__typename, context)

      writer.name("name")
      StringDataAdapter.serializeData(writer, value.name, context)
    }
  }

  public object DogData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    public fun deserializeData(
      reader: JsonReader,
      context: DataAdapter.DeserializeDataContext,
      typename: String,
    ): AnimalFragmentImpl.DogData {
      var __typename: String? = typename
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringDataAdapter.deserializeData(reader, context)
          1 -> _name = StringDataAdapter.deserializeData(reader, context)
          else -> break
        }
      }

      return AnimalFragmentImpl.DogData(
        __typename = __typename!!,
        name = _name!!
      )
    }

    public fun serializeData(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.DogData,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("__typename")
      StringDataAdapter.serializeData(writer, value.__typename, context)

      writer.name("name")
      StringDataAdapter.serializeData(writer, value.name, context)
    }
  }

  public object OtherData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public fun deserializeData(
      reader: JsonReader,
      context: DataAdapter.DeserializeDataContext,
      typename: String,
    ): AnimalFragmentImpl.OtherData {
      var __typename: String? = typename

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringDataAdapter.deserializeData(reader, context)
          else -> break
        }
      }

      return AnimalFragmentImpl.OtherData(
        __typename = __typename!!
      )
    }

    public fun serializeData(
      writer: JsonWriter,
      `value`: AnimalFragmentImpl.OtherData,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("__typename")
      StringDataAdapter.serializeData(writer, value.__typename, context)
    }
  }
}
