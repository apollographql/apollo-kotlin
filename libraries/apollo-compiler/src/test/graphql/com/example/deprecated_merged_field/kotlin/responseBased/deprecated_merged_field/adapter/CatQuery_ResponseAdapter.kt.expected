//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.adapter

import com.apollographql.apollo3.api.DataAdapter
import com.apollographql.apollo3.api.StringDataAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.deprecated_merged_field.CatQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object CatQuery_ResponseAdapter {
  public object Data : DataAdapter<CatQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    public override fun deserializeData(reader: JsonReader,
        context: DataAdapter.DeserializeDataContext): CatQuery.Data {
      var _cat: CatQuery.Data.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cat = Cat.obj().nullable().deserializeData(reader, context)
          else -> break
        }
      }

      return CatQuery.Data(
        cat = _cat
      )
    }

    public override fun serializeData(
      writer: JsonWriter,
      `value`: CatQuery.Data,
      context: DataAdapter.SerializeDataContext,
    ): Unit {
      writer.name("cat")
      Cat.obj().nullable().serializeData(writer, value.cat, context)
    }

    private object Cat : DataAdapter<CatQuery.Data.Cat> {
      public override fun deserializeData(reader: JsonReader,
          context: DataAdapter.DeserializeDataContext): CatQuery.Data.Cat {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> OtherAnimalCat.deserializeData(reader, context, __typename)
          else
          -> OtherCat.deserializeData(reader, context, __typename)
        }
      }

      public override fun serializeData(
        writer: JsonWriter,
        `value`: CatQuery.Data.Cat,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        when(value) {
          is CatQuery.Data.OtherAnimalCat -> OtherAnimalCat.serializeData(writer, value, context)
          is CatQuery.Data.OtherCat -> OtherCat.serializeData(writer, value, context)
        }
      }
    }

    public object OtherCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): CatQuery.Data.OtherCat {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return CatQuery.Data.OtherCat(
          __typename = __typename!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: CatQuery.Data.OtherCat,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)
      }
    }

    public object OtherAnimalCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun deserializeData(
        reader: JsonReader,
        context: DataAdapter.DeserializeDataContext,
        typename: String,
      ): CatQuery.Data.OtherAnimalCat {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringDataAdapter.deserializeData(reader, context)
            1 -> _name = StringDataAdapter.deserializeData(reader, context)
            else -> break
          }
        }

        return CatQuery.Data.OtherAnimalCat(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun serializeData(
        writer: JsonWriter,
        `value`: CatQuery.Data.OtherAnimalCat,
        context: DataAdapter.SerializeDataContext,
      ): Unit {
        writer.name("__typename")
        StringDataAdapter.serializeData(writer, value.__typename, context)

        writer.name("name")
        StringDataAdapter.serializeData(writer, value.name, context)
      }
    }
  }
}
