//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.deprecated_merged_field.CatQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object CatQuery_ResponseAdapter {
  public object Data : Adapter<CatQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        CatQuery.Data {
      var _cat: CatQuery.Data.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _cat = Cat.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return CatQuery.Data(
        cat = _cat
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: CatQuery.Data,
    ): Unit {
      writer.name("cat")
      Cat.obj().nullable().toJson(writer, customScalarAdapters, value.cat)
    }

    private object Cat : Adapter<CatQuery.Data.Cat> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          CatQuery.Data.Cat {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> OtherAnimalCat.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherCat.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: CatQuery.Data.Cat,
      ): Unit {
        when(value) {
          is CatQuery.Data.OtherAnimalCat -> OtherAnimalCat.toJson(writer, customScalarAdapters,
              value)
          is CatQuery.Data.OtherCat -> OtherCat.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object OtherCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): CatQuery.Data.OtherCat {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CatQuery.Data.OtherCat(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: CatQuery.Data.OtherCat,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }

    public object OtherAnimalCat {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): CatQuery.Data.OtherAnimalCat {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return CatQuery.Data.OtherAnimalCat(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: CatQuery.Data.OtherAnimalCat,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }
  }
}
