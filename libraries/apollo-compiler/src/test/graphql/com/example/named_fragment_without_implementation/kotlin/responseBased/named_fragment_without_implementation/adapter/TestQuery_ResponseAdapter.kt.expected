//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.named_fragment_without_implementation.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableDoubleApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.ScalarAdapters
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.named_fragment_without_implementation.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, scalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      scalarAdapters: ScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, scalarAdapters, value.hero)
    }

    private object Hero : ApolloAdapter<TestQuery.Data.Hero> {
      public override fun fromJson(reader: JsonReader, scalarAdapters: ScalarAdapters):
          TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Human",
          -> HumanHero.fromJson(reader, scalarAdapters, __typename)
          "Droid",
          -> DroidHero.fromJson(reader, scalarAdapters, __typename)
          else
          -> OtherHero.fromJson(reader, scalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.Hero,
      ): Unit {
        when(value) {
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, scalarAdapters, value)
          is TestQuery.Data.DroidHero -> DroidHero.toJson(writer, scalarAdapters, value)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, scalarAdapters, value)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _height: Double? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _height = NullableDoubleApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = _name!!,
          height = _height
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.HumanHero,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("height")
        NullableDoubleApolloAdapter.toJson(writer, scalarAdapters, value.height)
      }
    }

    public object DroidHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            2 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.DroidHero,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)

        writer.name("primaryFunction")
        NullableStringApolloAdapter.toJson(writer, scalarAdapters, value.primaryFunction)
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        scalarAdapters: ScalarAdapters,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, scalarAdapters)
            1 -> _name = StringApolloAdapter.fromJson(reader, scalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        scalarAdapters: ScalarAdapters,
        `value`: TestQuery.Data.OtherHero,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.__typename)

        writer.name("name")
        StringApolloAdapter.toJson(writer, scalarAdapters, value.name)
      }
    }
  }
}
