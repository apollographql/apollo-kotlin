//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_named_fragments.selections

import com.apollographql.apollo.api.CompiledArgument
import com.apollographql.apollo.api.CompiledField
import com.apollographql.apollo.api.CompiledFragment
import com.apollographql.apollo.api.CompiledSelection
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.notNull
import com.example.nested_named_fragments.fragment.selections.StarshipFragmentSelections
import com.example.nested_named_fragments.type.GraphQLString
import com.example.nested_named_fragments.type.Root
import com.example.nested_named_fragments.type.Starship
import com.example.nested_named_fragments.type.StarshipsConnection
import com.example.nested_named_fragments.type.StarshipsEdge
import kotlin.collections.List

public object AllStarshipsSelections {
  private val __node: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Starship",
          possibleTypes = listOf("Starship")
        ).selections(StarshipFragmentSelections.__root)
        .build()
      )

  private val __edges: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "node",
          type = Starship.type
        ).selections(__node)
        .build()
      )

  private val __allStarships: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "edges",
          type = StarshipsEdge.type.list()
        ).selections(__edges)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "allStarships",
          type = StarshipsConnection.type
        ).arguments(listOf(
          CompiledArgument.Builder(Root.__allStarships_first).value(7).build()
        ))
        .selections(__allStarships)
        .build()
      )
}
