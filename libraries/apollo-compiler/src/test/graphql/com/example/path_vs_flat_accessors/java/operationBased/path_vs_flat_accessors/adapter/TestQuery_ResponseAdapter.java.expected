//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.path_vs_flat_accessors.adapter;

import com.apollographql.apollo.api.Adapter;
import com.apollographql.apollo.api.Adapters;
import com.apollographql.apollo.api.Assertions;
import com.apollographql.apollo.api.BPossibleTypes;
import com.apollographql.apollo.api.BTerm;
import com.apollographql.apollo.api.BooleanExpression;
import com.apollographql.apollo.api.BooleanExpressions;
import com.apollographql.apollo.api.CustomScalarAdapters;
import com.apollographql.apollo.api.NullableAdapter;
import com.apollographql.apollo.api.ObjectAdapter;
import com.apollographql.apollo.api.json.JsonReader;
import com.apollographql.apollo.api.json.JsonWriter;
import com.example.path_vs_flat_accessors.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("root");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.Root _root = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _root = new NullableAdapter<>(new ObjectAdapter<TestQuery.Root>(Root.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        _root
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("root");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Root>(Root.INSTANCE, true)).toJson(writer, customScalarAdapters, value.root);
    }
  }

  public enum Root implements Adapter<TestQuery.Root> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Root fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnA _onA = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","AC")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onA = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      TestQuery.OnB1 _onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.Root(
        __typename,
        _onA,
        _onB
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Root value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onA != null) {
        com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.toJson(writer, customScalarAdapters, value.onA);
      }

      if (value.onB != null) {
        com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.toJson(writer, customScalarAdapters, value.onB);
      }
    }
  }

  public enum OnA implements Adapter<TestQuery.OnA> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.OnA fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestQuery.OnB _onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
        reader.rewind();
        _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.OnA(
        __typename,
        _onB
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnA value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onB != null) {
        com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.toJson(writer, customScalarAdapters, value.onB);
      }
    }
  }

  public enum OnB implements Adapter<TestQuery.OnB> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldB1");

    @Override
    public TestQuery.OnB fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _fieldB1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _fieldB1 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnB(
        _fieldB1
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnB value) throws IOException {
      writer.name("fieldB1");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1);
    }
  }

  public enum OnB1 implements Adapter<TestQuery.OnB1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldB2");

    @Override
    public TestQuery.OnB1 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _fieldB2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _fieldB2 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnB1(
        _fieldB2
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnB1 value) throws IOException {
      writer.name("fieldB2");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2);
    }
  }
}
