//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.path_vs_flat_accessors.adapter

import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.path_vs_flat_accessors.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("root")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestQuery.Data {
      var _root: TestQuery.Data.Root? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _root = Root.obj(true).nullable().fromJson(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        root = _root
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("root")
      Root.obj(true).nullable().toJson(writer, value.root, context)
    }

    private object Root : ApolloAdapter<TestQuery.Data.Root> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Root {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onA: TestQuery.Data.Root.OnA? = null
        if (possibleTypes("ABC","AC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onA = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.fromJson(reader,
              context)
        }

        var _onB: TestQuery.Data.Root.OnB? = null
        if (possibleTypes("ABC","BC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
          reader.rewind()
          _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnB.fromJson(reader,
              context)
        }

        return TestQuery.Data.Root(
          __typename = __typename,
          onA = _onA,
          onB = _onB
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Root,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        if (value.onA != null) {
          com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.toJson(writer,
              value.onA, context)
        }

        if (value.onB != null) {
          com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnB.toJson(writer,
              value.onB, context)
        }
      }

      private object OnA : ApolloAdapter<TestQuery.Data.Root.OnA> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Root.OnA {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onB: TestQuery.Data.Root.OnA.OnB? = null
          if (possibleTypes("ABC","BC").evaluate(context.falseBooleanVariables, __typename, context, null)) {
            reader.rewind()
            _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.OnB.fromJson(reader,
                context)
          }

          return TestQuery.Data.Root.OnA(
            __typename = __typename,
            onB = _onB
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Root.OnA,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("__typename")
          StringApolloAdapter.toJson(writer, value.__typename, context)

          if (value.onB != null) {
            com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.OnB.toJson(writer,
                value.onB, context)
          }
        }

        private object OnB : ApolloAdapter<TestQuery.Data.Root.OnA.OnB> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldB1")

          public override fun fromJson(reader: JsonReader,
              context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Root.OnA.OnB {
            var _fieldB1: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _fieldB1 = NullableStringApolloAdapter.fromJson(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.Root.OnA.OnB(
              fieldB1 = _fieldB1
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.Root.OnA.OnB,
            context: ApolloAdapter.DataSerializeContext,
          ): Unit {
            writer.name("fieldB1")
            NullableStringApolloAdapter.toJson(writer, value.fieldB1, context)
          }
        }
      }

      private object OnB : ApolloAdapter<TestQuery.Data.Root.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("fieldB2")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Root.OnB {
          var _fieldB2: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _fieldB2 = NullableStringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.Root.OnB(
            fieldB2 = _fieldB2
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.Root.OnB,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("fieldB2")
          NullableStringApolloAdapter.toJson(writer, value.fieldB2, context)
        }
      }
    }
  }
}
