//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.path_vs_flat_accessors.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.evaluate
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.possibleTypes
import com.example.path_vs_flat_accessors.TestQuery
import kotlin.String
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("root")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data {
      var _root: TestQuery.Data.Root? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _root = Root.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        root = _root
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ) {
      writer.name("root")
      Root.obj(true).nullable().toJson(writer, customScalarAdapters, value.root)
    }

    private object Root : Adapter<TestQuery.Data.Root> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Root {
        var __typename: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onA: TestQuery.Data.Root.OnA? = null
        if (possibleTypes("ABC","AC").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onA = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.fromJson(reader, customScalarAdapters)
        }

        var _onB: TestQuery.Data.Root.OnB? = null
        if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
          reader.rewind()
          _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnB.fromJson(reader, customScalarAdapters)
        }

        return TestQuery.Data.Root(
          __typename = __typename,
          onA = _onA,
          onB = _onB
        )
      }

      override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Root,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onA != null) {
          com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.toJson(writer, customScalarAdapters, value.onA)
        }

        if (value.onB != null) {
          com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnB.toJson(writer, customScalarAdapters, value.onB)
        }
      }

      private object OnA : Adapter<TestQuery.Data.Root.OnA> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Root.OnA {
          var __typename: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          var _onB: TestQuery.Data.Root.OnA.OnB? = null
          if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.falseVariables, __typename, customScalarAdapters.deferredFragmentIdentifiers, null)) {
            reader.rewind()
            _onB = com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.OnB.fromJson(reader, customScalarAdapters)
          }

          return TestQuery.Data.Root.OnA(
            __typename = __typename,
            onB = _onB
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Root.OnA,
        ) {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          if (value.onB != null) {
            com.example.path_vs_flat_accessors.adapter.TestQuery_ResponseAdapter.Data.Root.OnA.OnB.toJson(writer, customScalarAdapters, value.onB)
          }
        }

        private object OnB : Adapter<TestQuery.Data.Root.OnA.OnB> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldB1")

          override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Root.OnA.OnB {
            var _fieldB1: String? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _fieldB1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Root.OnA.OnB(
              fieldB1 = _fieldB1
            )
          }

          override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Root.OnA.OnB,
          ) {
            writer.name("fieldB1")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1)
          }
        }
      }

      private object OnB : Adapter<TestQuery.Data.Root.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("fieldB2")

        override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Root.OnB {
          var _fieldB2: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Root.OnB(
            fieldB2 = _fieldB2
          )
        }

        override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Root.OnB,
        ) {
          writer.name("fieldB2")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)
        }
      }
    }
  }
}
