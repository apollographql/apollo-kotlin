//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.path_vs_flat_accessors.adapter

import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.path_vs_flat_accessors.TestQuery
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("root")

    public override fun deserializeComposite(reader: JsonReader,
        context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data {
      var _root: TestQuery.Data.Root? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _root = Root.obj().nullable().deserializeComposite(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        root = _root
      )
    }

    public override fun serializeComposite(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: CompositeAdapter.SerializeCompositeContext,
    ): Unit {
      writer.name("root")
      Root.obj().nullable().serializeComposite(writer, value.root, context)
    }

    private object Root : CompositeAdapter<TestQuery.Data.Root> {
      public override fun deserializeComposite(reader: JsonReader,
          context: CompositeAdapter.DeserializeCompositeContext): TestQuery.Data.Root {
        val __typename = reader.readTypename()
        return when(__typename) {
          "ABC",
          -> ABRoot.deserializeComposite(reader, context, __typename)
          "AC",
          -> OtherARoot.deserializeComposite(reader, context, __typename)
          "BC",
          -> OtherBRoot.deserializeComposite(reader, context, __typename)
          else
          -> OtherRoot.deserializeComposite(reader, context, __typename)
        }
      }

      public override fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.Root,
        context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.ABRoot -> ABRoot.serializeComposite(writer, value, context)
          is TestQuery.Data.OtherARoot -> OtherARoot.serializeComposite(writer, value, context)
          is TestQuery.Data.OtherBRoot -> OtherBRoot.serializeComposite(writer, value, context)
          is TestQuery.Data.OtherRoot -> OtherRoot.serializeComposite(writer, value, context)
        }
      }
    }

    public object ABRoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB1", "fieldB2")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.ABRoot {
        var __typename: String? = typename
        var _fieldB1: String? = null
        var _fieldB2: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldB1 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _fieldB2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.ABRoot(
          __typename = __typename!!,
          fieldB1 = _fieldB1,
          fieldB2 = _fieldB2
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.ABRoot,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldB1")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB1)

        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB2)
      }
    }

    public object OtherRoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.OtherRoot {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherRoot(
          __typename = __typename!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherRoot,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }

    public object OtherARoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.OtherARoot {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherARoot(
          __typename = __typename!!
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherARoot,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }

    public object OtherBRoot {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

      public fun deserializeComposite(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.DeserializeCompositeContext,
        typename: String,
      ): TestQuery.Data.OtherBRoot {
        var __typename: String? = typename
        var _fieldB2: String? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _fieldB2 = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherBRoot(
          __typename = __typename!!,
          fieldB2 = _fieldB2
        )
      }

      public fun serializeComposite(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherBRoot,
        @Suppress("UNUSED_PARAMETER") context: CompositeAdapter.SerializeCompositeContext,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("fieldB2")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.fieldB2)
      }
    }
  }
}
