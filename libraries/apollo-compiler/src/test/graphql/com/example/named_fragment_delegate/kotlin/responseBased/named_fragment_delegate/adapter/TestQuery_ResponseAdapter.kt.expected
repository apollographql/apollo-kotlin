//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.named_fragment_delegate.adapter

import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CompositeAdapter
import com.apollographql.apollo3.api.CompositeAdapterContext
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.named_fragment_delegate.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : CompositeAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, adapterContext)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      adapterContext: CompositeAdapterContext,
    ) {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, value.hero, adapterContext)
    }

    private object Hero : CompositeAdapter<TestQuery.Data.Hero> {
      override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
          TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          -> DroidHero.fromJson(reader, adapterContext, __typename)
          "Human",
          -> HumanHero.fromJson(reader, adapterContext, __typename)
          else
          -> OtherHero.fromJson(reader, adapterContext, __typename)
        }
      }

      override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        adapterContext: CompositeAdapterContext,
      ) {
        when(value) {
          is TestQuery.Data.DroidHero -> DroidHero.toJson(writer, value, adapterContext)
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, value, adapterContext)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, value, adapterContext)
        }
      }
    }

    public object DroidHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction",
          "friends")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null
        var _friends: List<TestQuery.Data.DroidHero.Friend?>? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          primaryFunction = _primaryFunction,
          friends = _friends
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.DroidHero,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("primaryFunction")
        NullableStringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.primaryFunction)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, value.friends, adapterContext)
      }

      private object Friend : CompositeAdapter<TestQuery.Data.DroidHero.Friend> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.DroidHero.Friend {
          var _name: String? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.Friend(
            name = _name ?: missingField(reader, "name")
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.DroidHero.Friend,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("name")
          StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "profileLink",
          "friendsConnection")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _profileLink: Any? = null
        var _friendsConnection: TestQuery.Data.HumanHero.FriendsConnection? = null

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            1 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            2 -> _profileLink = AnyAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            3 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, adapterContext)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename ?: missingField(reader, "__typename"),
          name = _name ?: missingField(reader, "name"),
          profileLink = _profileLink ?: missingField(reader, "profileLink"),
          friendsConnection = _friendsConnection ?: missingField(reader, "friendsConnection")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanHero,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)

        writer.name("profileLink")
        AnyAdapter.toJson(writer, CustomScalarAdapters.Empty, value.profileLink)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, value.friendsConnection, adapterContext)
      }

      private object FriendsConnection :
          CompositeAdapter<TestQuery.Data.HumanHero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("edges")

        override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
            TestQuery.Data.HumanHero.FriendsConnection {
          var _edges: List<TestQuery.Data.HumanHero.FriendsConnection.Edge?>? = null

          while (true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, adapterContext)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.FriendsConnection(
            edges = _edges
          )
        }

        override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.HumanHero.FriendsConnection,
          adapterContext: CompositeAdapterContext,
        ) {
          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, value.edges, adapterContext)
        }

        private object Edge : CompositeAdapter<TestQuery.Data.HumanHero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
              TestQuery.Data.HumanHero.FriendsConnection.Edge {
            var _node: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node? = null

            while (true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, adapterContext)
                else -> break
              }
            }

            return TestQuery.Data.HumanHero.FriendsConnection.Edge(
              node = _node
            )
          }

          override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge,
            adapterContext: CompositeAdapterContext,
          ) {
            writer.name("node")
            Node.obj().nullable().toJson(writer, value.node, adapterContext)
          }

          private object Node :
              CompositeAdapter<TestQuery.Data.HumanHero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            override fun fromJson(reader: JsonReader, adapterContext: CompositeAdapterContext):
                TestQuery.Data.HumanHero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while (true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
                  else -> break
                }
              }

              return TestQuery.Data.HumanHero.FriendsConnection.Edge.Node(
                name = _name ?: missingField(reader, "name")
              )
            }

            override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node,
              adapterContext: CompositeAdapterContext,
            ) {
              writer.name("name")
              StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.name)
            }
          }
        }
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename

        while (true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, CustomScalarAdapters.Empty)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename ?: missingField(reader, "__typename")
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherHero,
        @Suppress("UNUSED_PARAMETER") adapterContext: CompositeAdapterContext,
      ) {
        writer.name("__typename")
        StringAdapter.toJson(writer, CustomScalarAdapters.Empty, value.__typename)
      }
    }
  }
}
