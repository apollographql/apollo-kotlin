//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.named_fragment_delegate.adapter

import com.apollographql.apollo3.api.AnyApolloAdapter
import com.apollographql.apollo3.api.ApolloAdapter
import com.apollographql.apollo3.api.NullableStringApolloAdapter
import com.apollographql.apollo3.api.StringApolloAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.named_fragment_delegate.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : ApolloAdapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, context: ApolloAdapter.DataDeserializeContext):
        TestQuery.Data {
      var _hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _hero = Hero.obj().nullable().fromJson(reader, context)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = _hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      `value`: TestQuery.Data,
      context: ApolloAdapter.DataSerializeContext,
    ): Unit {
      writer.name("hero")
      Hero.obj().nullable().toJson(writer, value.hero, context)
    }

    private object Hero : ApolloAdapter<TestQuery.Data.Hero> {
      public override fun fromJson(reader: JsonReader,
          context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.Hero {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Droid",
          -> DroidHero.fromJson(reader, context, __typename)
          "Human",
          -> HumanHero.fromJson(reader, context, __typename)
          else
          -> OtherHero.fromJson(reader, context, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.Hero,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        when(value) {
          is TestQuery.Data.DroidHero -> DroidHero.toJson(writer, value, context)
          is TestQuery.Data.HumanHero -> HumanHero.toJson(writer, value, context)
          is TestQuery.Data.OtherHero -> OtherHero.toJson(writer, value, context)
        }
      }
    }

    public object DroidHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction",
          "friends")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestQuery.Data.DroidHero {
        var __typename: String? = typename
        var _name: String? = null
        var _primaryFunction: String? = null
        var _friends: List<TestQuery.Data.DroidHero.Friend?>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _name = StringApolloAdapter.fromJson(reader, context)
            2 -> _primaryFunction = NullableStringApolloAdapter.fromJson(reader, context)
            3 -> _friends = Friend.obj().nullable().list().nullable().fromJson(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.DroidHero(
          __typename = __typename!!,
          name = _name!!,
          primaryFunction = _primaryFunction,
          friends = _friends
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.DroidHero,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("primaryFunction")
        NullableStringApolloAdapter.toJson(writer, value.primaryFunction, context)

        writer.name("friends")
        Friend.obj().nullable().list().nullable().toJson(writer, value.friends, context)
      }

      private object Friend : ApolloAdapter<TestQuery.Data.DroidHero.Friend> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext): TestQuery.Data.DroidHero.Friend {
          var _name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringApolloAdapter.fromJson(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.DroidHero.Friend(
            name = _name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.DroidHero.Friend,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("name")
          StringApolloAdapter.toJson(writer, value.name, context)
        }
      }
    }

    public object HumanHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "profileLink",
          "friendsConnection")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestQuery.Data.HumanHero {
        var __typename: String? = typename
        var _name: String? = null
        var _profileLink: Any? = null
        var _friendsConnection: TestQuery.Data.HumanHero.FriendsConnection? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            1 -> _name = StringApolloAdapter.fromJson(reader, context)
            2 -> _profileLink = AnyApolloAdapter.fromJson(reader, context)
            3 -> _friendsConnection = FriendsConnection.obj().fromJson(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.HumanHero(
          __typename = __typename!!,
          name = _name!!,
          profileLink = _profileLink!!,
          friendsConnection = _friendsConnection!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.HumanHero,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)

        writer.name("name")
        StringApolloAdapter.toJson(writer, value.name, context)

        writer.name("profileLink")
        AnyApolloAdapter.toJson(writer, value.profileLink, context)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, value.friendsConnection, context)
      }

      private object FriendsConnection : ApolloAdapter<TestQuery.Data.HumanHero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("edges")

        public override fun fromJson(reader: JsonReader,
            context: ApolloAdapter.DataDeserializeContext):
            TestQuery.Data.HumanHero.FriendsConnection {
          var _edges: List<TestQuery.Data.HumanHero.FriendsConnection.Edge?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _edges = Edge.obj().nullable().list().nullable().fromJson(reader, context)
              else -> break
            }
          }

          return TestQuery.Data.HumanHero.FriendsConnection(
            edges = _edges
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          `value`: TestQuery.Data.HumanHero.FriendsConnection,
          context: ApolloAdapter.DataSerializeContext,
        ): Unit {
          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, value.edges, context)
        }

        private object Edge : ApolloAdapter<TestQuery.Data.HumanHero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          public override fun fromJson(reader: JsonReader,
              context: ApolloAdapter.DataDeserializeContext):
              TestQuery.Data.HumanHero.FriendsConnection.Edge {
            var _node: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> _node = Node.obj().nullable().fromJson(reader, context)
                else -> break
              }
            }

            return TestQuery.Data.HumanHero.FriendsConnection.Edge(
              node = _node
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge,
            context: ApolloAdapter.DataSerializeContext,
          ): Unit {
            writer.name("node")
            Node.obj().nullable().toJson(writer, value.node, context)
          }

          private object Node : ApolloAdapter<TestQuery.Data.HumanHero.FriendsConnection.Edge.Node>
              {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                context: ApolloAdapter.DataDeserializeContext):
                TestQuery.Data.HumanHero.FriendsConnection.Edge.Node {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringApolloAdapter.fromJson(reader, context)
                  else -> break
                }
              }

              return TestQuery.Data.HumanHero.FriendsConnection.Edge.Node(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              `value`: TestQuery.Data.HumanHero.FriendsConnection.Edge.Node,
              context: ApolloAdapter.DataSerializeContext,
            ): Unit {
              writer.name("name")
              StringApolloAdapter.toJson(writer, value.name, context)
            }
          }
        }
      }
    }

    public object OtherHero {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        context: ApolloAdapter.DataDeserializeContext,
        typename: String,
      ): TestQuery.Data.OtherHero {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringApolloAdapter.fromJson(reader, context)
            else -> break
          }
        }

        return TestQuery.Data.OtherHero(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        `value`: TestQuery.Data.OtherHero,
        context: ApolloAdapter.DataSerializeContext,
      ): Unit {
        writer.name("__typename")
        StringApolloAdapter.toJson(writer, value.__typename, context)
      }
    }
  }
}
