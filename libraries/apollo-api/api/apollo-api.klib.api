// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxX64.linux, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Alias: native => [iosArm64, iosSimulatorArm64, iosX64, linuxX64.linux, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Alias: apple => [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.apollo3:apollo-api>
abstract class <#A: out kotlin.collections/Map<kotlin/String, kotlin/Any?>> com.apollographql.apollo3.api/ObjectBuilder : com.apollographql.apollo3.api/BuilderScope { // com.apollographql.apollo3.api/ObjectBuilder|null[0]
    abstract fun build(): #A // com.apollographql.apollo3.api/ObjectBuilder.build|build(){}[0]
    constructor <init>(com.apollographql.apollo3.api/CustomScalarAdapters) // com.apollographql.apollo3.api/ObjectBuilder.<init>|<init>(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun set(kotlin/String, kotlin/Any?) // com.apollographql.apollo3.api/ObjectBuilder.set|set(kotlin.String;kotlin.Any?){}[0]
    final val __fields // com.apollographql.apollo3.api/ObjectBuilder.__fields|{}__fields[0]
        final fun <get-__fields>(): kotlin.collections/MutableMap<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api/ObjectBuilder.__fields.<get-__fields>|<get-__fields>(){}[0]
    final var __typename // com.apollographql.apollo3.api/ObjectBuilder.__typename|{}__typename[0]
        final fun <get-__typename>(): kotlin/String // com.apollographql.apollo3.api/ObjectBuilder.__typename.<get-__typename>|<get-__typename>(){}[0]
        final fun <set-__typename>(kotlin/String) // com.apollographql.apollo3.api/ObjectBuilder.__typename.<set-__typename>|<set-__typename>(kotlin.String){}[0]
    open val customScalarAdapters // com.apollographql.apollo3.api/ObjectBuilder.customScalarAdapters|{}customScalarAdapters[0]
        open fun <get-customScalarAdapters>(): com.apollographql.apollo3.api/CustomScalarAdapters // com.apollographql.apollo3.api/ObjectBuilder.customScalarAdapters.<get-customScalarAdapters>|<get-customScalarAdapters>(){}[0]
}
abstract class com.apollographql.apollo3.api/ObjectMap : kotlin.collections/Map<kotlin/String, kotlin/Any?> { // com.apollographql.apollo3.api/ObjectMap|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo3.api/ObjectMap.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    open fun containsKey(kotlin/String): kotlin/Boolean // com.apollographql.apollo3.api/ObjectMap.containsKey|containsKey(kotlin.String){}[0]
    open fun containsValue(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/ObjectMap.containsValue|containsValue(kotlin.Any?){}[0]
    open fun get(kotlin/String): kotlin/Any? // com.apollographql.apollo3.api/ObjectMap.get|get(kotlin.String){}[0]
    open fun isEmpty(): kotlin/Boolean // com.apollographql.apollo3.api/ObjectMap.isEmpty|isEmpty(){}[0]
    open val entries // com.apollographql.apollo3.api/ObjectMap.entries|{}entries[0]
        open fun <get-entries>(): kotlin.collections/Set<kotlin.collections/Map.Entry<kotlin/String, kotlin/Any?>> // com.apollographql.apollo3.api/ObjectMap.entries.<get-entries>|<get-entries>(){}[0]
    open val keys // com.apollographql.apollo3.api/ObjectMap.keys|{}keys[0]
        open fun <get-keys>(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo3.api/ObjectMap.keys.<get-keys>|<get-keys>(){}[0]
    open val size // com.apollographql.apollo3.api/ObjectMap.size|{}size[0]
        open fun <get-size>(): kotlin/Int // com.apollographql.apollo3.api/ObjectMap.size.<get-size>|<get-size>(){}[0]
    open val values // com.apollographql.apollo3.api/ObjectMap.values|{}values[0]
        open fun <get-values>(): kotlin.collections/Collection<kotlin/Any?> // com.apollographql.apollo3.api/ObjectMap.values.<get-values>|<get-values>(){}[0]
    // Targets: [js]
    open fun asJsReadonlyMapView(): kotlin.js.collections/JsReadonlyMap<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api/ObjectMap.asJsReadonlyMapView|asJsReadonlyMapView(){}[0]
}
abstract interface <#A: com.apollographql.apollo3.api/Executable.Data> com.apollographql.apollo3.api/Executable { // com.apollographql.apollo3.api/Executable|null[0]
    abstract fun adapter(): com.apollographql.apollo3.api/Adapter<#A> // com.apollographql.apollo3.api/Executable.adapter|adapter(){}[0]
    abstract fun rootField(): com.apollographql.apollo3.api/CompiledField // com.apollographql.apollo3.api/Executable.rootField|rootField(){}[0]
    abstract fun serializeVariables(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/Boolean) // com.apollographql.apollo3.api/Executable.serializeVariables|serializeVariables(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.Boolean){}[0]
    abstract interface Data // com.apollographql.apollo3.api/Executable.Data|null[0]
    abstract val ignoreErrors // com.apollographql.apollo3.api/Executable.ignoreErrors|{}ignoreErrors[0]
        abstract fun <get-ignoreErrors>(): kotlin/Boolean // com.apollographql.apollo3.api/Executable.ignoreErrors.<get-ignoreErrors>|<get-ignoreErrors>(){}[0]
    final class Variables { // com.apollographql.apollo3.api/Executable.Variables|null[0]
        constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo3.api/Executable.Variables.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
        final val valueMap // com.apollographql.apollo3.api/Executable.Variables.valueMap|{}valueMap[0]
            final fun <get-valueMap>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api/Executable.Variables.valueMap.<get-valueMap>|<get-valueMap>(){}[0]
    }
}
abstract interface <#A: com.apollographql.apollo3.api/Fragment.Data> com.apollographql.apollo3.api/Fragment : com.apollographql.apollo3.api/Executable<#A> { // com.apollographql.apollo3.api/Fragment|null[0]
    abstract fun adapter(): com.apollographql.apollo3.api/Adapter<#A> // com.apollographql.apollo3.api/Fragment.adapter|adapter(){}[0]
    abstract fun rootField(): com.apollographql.apollo3.api/CompiledField // com.apollographql.apollo3.api/Fragment.rootField|rootField(){}[0]
    abstract fun serializeVariables(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/Boolean) // com.apollographql.apollo3.api/Fragment.serializeVariables|serializeVariables(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.Boolean){}[0]
    abstract interface Data : com.apollographql.apollo3.api/Executable.Data // com.apollographql.apollo3.api/Fragment.Data|null[0]
}
abstract interface <#A: com.apollographql.apollo3.api/Mutation.Data> com.apollographql.apollo3.api/Mutation : com.apollographql.apollo3.api/Operation<#A> { // com.apollographql.apollo3.api/Mutation|null[0]
    abstract interface Data : com.apollographql.apollo3.api/Operation.Data // com.apollographql.apollo3.api/Mutation.Data|null[0]
}
abstract interface <#A: com.apollographql.apollo3.api/Operation.Data> com.apollographql.apollo3.api/Operation : com.apollographql.apollo3.api/Executable<#A> { // com.apollographql.apollo3.api/Operation|null[0]
    abstract fun adapter(): com.apollographql.apollo3.api/Adapter<#A> // com.apollographql.apollo3.api/Operation.adapter|adapter(){}[0]
    abstract fun document(): kotlin/String // com.apollographql.apollo3.api/Operation.document|document(){}[0]
    abstract fun id(): kotlin/String // com.apollographql.apollo3.api/Operation.id|id(){}[0]
    abstract fun name(): kotlin/String // com.apollographql.apollo3.api/Operation.name|name(){}[0]
    abstract fun rootField(): com.apollographql.apollo3.api/CompiledField // com.apollographql.apollo3.api/Operation.rootField|rootField(){}[0]
    abstract fun serializeVariables(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/Boolean) // com.apollographql.apollo3.api/Operation.serializeVariables|serializeVariables(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.Boolean){}[0]
    abstract interface Data : com.apollographql.apollo3.api/Executable.Data // com.apollographql.apollo3.api/Operation.Data|null[0]
}
abstract interface <#A: com.apollographql.apollo3.api/Query.Data> com.apollographql.apollo3.api/Query : com.apollographql.apollo3.api/Operation<#A> { // com.apollographql.apollo3.api/Query|null[0]
    abstract interface Data : com.apollographql.apollo3.api/Operation.Data // com.apollographql.apollo3.api/Query.Data|null[0]
}
abstract interface <#A: com.apollographql.apollo3.api/Subscription.Data> com.apollographql.apollo3.api/Subscription : com.apollographql.apollo3.api/Operation<#A> { // com.apollographql.apollo3.api/Subscription|null[0]
    abstract interface Data : com.apollographql.apollo3.api/Operation.Data // com.apollographql.apollo3.api/Subscription.Data|null[0]
}
abstract interface <#A: kotlin/Any?> com.apollographql.apollo3.api/Adapter { // com.apollographql.apollo3.api/Adapter|null[0]
    abstract fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): #A // com.apollographql.apollo3.api/Adapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    abstract fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, #A) // com.apollographql.apollo3.api/Adapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;1:0){}[0]
}
abstract interface <#A: kotlin/Any?> com.apollographql.apollo3.api/CustomTypeAdapter // com.apollographql.apollo3.api/CustomTypeAdapter|null[0]
abstract interface <#A: kotlin/Any?> com.apollographql.apollo3.api/MutableExecutionOptions : com.apollographql.apollo3.api/ExecutionOptions { // com.apollographql.apollo3.api/MutableExecutionOptions|null[0]
    abstract fun addExecutionContext(com.apollographql.apollo3.api/ExecutionContext): #A // com.apollographql.apollo3.api/MutableExecutionOptions.addExecutionContext|addExecutionContext(com.apollographql.apollo3.api.ExecutionContext){}[0]
    abstract fun addHttpHeader(kotlin/String, kotlin/String): #A // com.apollographql.apollo3.api/MutableExecutionOptions.addHttpHeader|addHttpHeader(kotlin.String;kotlin.String){}[0]
    abstract fun canBeBatched(kotlin/Boolean?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.canBeBatched|canBeBatched(kotlin.Boolean?){}[0]
    abstract fun enableAutoPersistedQueries(kotlin/Boolean?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.enableAutoPersistedQueries|enableAutoPersistedQueries(kotlin.Boolean?){}[0]
    abstract fun httpHeaders(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.httpHeaders|httpHeaders(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>?){}[0]
    abstract fun httpMethod(com.apollographql.apollo3.api.http/HttpMethod?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.httpMethod|httpMethod(com.apollographql.apollo3.api.http.HttpMethod?){}[0]
    abstract fun sendApqExtensions(kotlin/Boolean?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.sendApqExtensions|sendApqExtensions(kotlin.Boolean?){}[0]
    abstract fun sendDocument(kotlin/Boolean?): #A // com.apollographql.apollo3.api/MutableExecutionOptions.sendDocument|sendDocument(kotlin.Boolean?){}[0]
}
abstract interface <#A: out kotlin/Any?> com.apollographql.apollo3.api/BuilderFactory { // com.apollographql.apollo3.api/BuilderFactory|null[0]
    abstract fun newBuilder(com.apollographql.apollo3.api/CustomScalarAdapters): #A // com.apollographql.apollo3.api/BuilderFactory.newBuilder|newBuilder(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
}
abstract interface com.apollographql.apollo3.api.http/HttpBody { // com.apollographql.apollo3.api.http/HttpBody|null[0]
    abstract fun writeTo(okio/BufferedSink) // com.apollographql.apollo3.api.http/HttpBody.writeTo|writeTo(okio.BufferedSink){}[0]
    abstract val contentLength // com.apollographql.apollo3.api.http/HttpBody.contentLength|{}contentLength[0]
        abstract fun <get-contentLength>(): kotlin/Long // com.apollographql.apollo3.api.http/HttpBody.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    abstract val contentType // com.apollographql.apollo3.api.http/HttpBody.contentType|{}contentType[0]
        abstract fun <get-contentType>(): kotlin/String // com.apollographql.apollo3.api.http/HttpBody.contentType.<get-contentType>|<get-contentType>(){}[0]
}
abstract interface com.apollographql.apollo3.api.http/HttpRequestComposer { // com.apollographql.apollo3.api.http/HttpRequestComposer|null[0]
    abstract fun <#A1: com.apollographql.apollo3.api/Operation.Data> compose(com.apollographql.apollo3.api/ApolloRequest<#A1>): com.apollographql.apollo3.api.http/HttpRequest // com.apollographql.apollo3.api.http/HttpRequestComposer.compose|compose(com.apollographql.apollo3.api.ApolloRequest<0:0>){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
}
abstract interface com.apollographql.apollo3.api.json/JsonReader : okio/Closeable { // com.apollographql.apollo3.api.json/JsonReader|null[0]
    abstract fun beginArray(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/JsonReader.beginArray|beginArray(){}[0]
    abstract fun beginObject(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/JsonReader.beginObject|beginObject(){}[0]
    abstract fun endArray(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/JsonReader.endArray|endArray(){}[0]
    abstract fun endObject(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/JsonReader.endObject|endObject(){}[0]
    abstract fun getPath(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api.json/JsonReader.getPath|getPath(){}[0]
    abstract fun hasNext(): kotlin/Boolean // com.apollographql.apollo3.api.json/JsonReader.hasNext|hasNext(){}[0]
    abstract fun nextBoolean(): kotlin/Boolean // com.apollographql.apollo3.api.json/JsonReader.nextBoolean|nextBoolean(){}[0]
    abstract fun nextDouble(): kotlin/Double // com.apollographql.apollo3.api.json/JsonReader.nextDouble|nextDouble(){}[0]
    abstract fun nextInt(): kotlin/Int // com.apollographql.apollo3.api.json/JsonReader.nextInt|nextInt(){}[0]
    abstract fun nextLong(): kotlin/Long // com.apollographql.apollo3.api.json/JsonReader.nextLong|nextLong(){}[0]
    abstract fun nextName(): kotlin/String // com.apollographql.apollo3.api.json/JsonReader.nextName|nextName(){}[0]
    abstract fun nextNull(): kotlin/Nothing? // com.apollographql.apollo3.api.json/JsonReader.nextNull|nextNull(){}[0]
    abstract fun nextNumber(): com.apollographql.apollo3.api.json/JsonNumber // com.apollographql.apollo3.api.json/JsonReader.nextNumber|nextNumber(){}[0]
    abstract fun nextString(): kotlin/String? // com.apollographql.apollo3.api.json/JsonReader.nextString|nextString(){}[0]
    abstract fun peek(): com.apollographql.apollo3.api.json/JsonReader.Token // com.apollographql.apollo3.api.json/JsonReader.peek|peek(){}[0]
    abstract fun rewind() // com.apollographql.apollo3.api.json/JsonReader.rewind|rewind(){}[0]
    abstract fun selectName(kotlin.collections/List<kotlin/String>): kotlin/Int // com.apollographql.apollo3.api.json/JsonReader.selectName|selectName(kotlin.collections.List<kotlin.String>){}[0]
    abstract fun skipValue() // com.apollographql.apollo3.api.json/JsonReader.skipValue|skipValue(){}[0]
    final enum class Token : kotlin/Enum<com.apollographql.apollo3.api.json/JsonReader.Token> { // com.apollographql.apollo3.api.json/JsonReader.Token|null[0]
        enum entry ANY // com.apollographql.apollo3.api.json/JsonReader.Token.ANY|null[0]
        enum entry BEGIN_ARRAY // com.apollographql.apollo3.api.json/JsonReader.Token.BEGIN_ARRAY|null[0]
        enum entry BEGIN_OBJECT // com.apollographql.apollo3.api.json/JsonReader.Token.BEGIN_OBJECT|null[0]
        enum entry BOOLEAN // com.apollographql.apollo3.api.json/JsonReader.Token.BOOLEAN|null[0]
        enum entry END_ARRAY // com.apollographql.apollo3.api.json/JsonReader.Token.END_ARRAY|null[0]
        enum entry END_DOCUMENT // com.apollographql.apollo3.api.json/JsonReader.Token.END_DOCUMENT|null[0]
        enum entry END_OBJECT // com.apollographql.apollo3.api.json/JsonReader.Token.END_OBJECT|null[0]
        enum entry LONG // com.apollographql.apollo3.api.json/JsonReader.Token.LONG|null[0]
        enum entry NAME // com.apollographql.apollo3.api.json/JsonReader.Token.NAME|null[0]
        enum entry NULL // com.apollographql.apollo3.api.json/JsonReader.Token.NULL|null[0]
        enum entry NUMBER // com.apollographql.apollo3.api.json/JsonReader.Token.NUMBER|null[0]
        enum entry STRING // com.apollographql.apollo3.api.json/JsonReader.Token.STRING|null[0]
        final fun valueOf(kotlin/String): com.apollographql.apollo3.api.json/JsonReader.Token // com.apollographql.apollo3.api.json/JsonReader.Token.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.apollographql.apollo3.api.json/JsonReader.Token> // com.apollographql.apollo3.api.json/JsonReader.Token.values|values#static(){}[0]
        final val entries // com.apollographql.apollo3.api.json/JsonReader.Token.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.apollo3.api.json/JsonReader.Token> // com.apollographql.apollo3.api.json/JsonReader.Token.entries.<get-entries>|<get-entries>#static(){}[0]
    }
}
abstract interface com.apollographql.apollo3.api.json/JsonWriter : okio/Closeable { // com.apollographql.apollo3.api.json/JsonWriter|null[0]
    abstract fun beginArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.beginArray|beginArray(){}[0]
    abstract fun beginObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.beginObject|beginObject(){}[0]
    abstract fun endArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.endArray|endArray(){}[0]
    abstract fun endObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.endObject|endObject(){}[0]
    abstract fun flush() // com.apollographql.apollo3.api.json/JsonWriter.flush|flush(){}[0]
    abstract fun name(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.name|name(kotlin.String){}[0]
    abstract fun nullValue(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.nullValue|nullValue(){}[0]
    abstract fun value(com.apollographql.apollo3.api.json/JsonNumber): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(com.apollographql.apollo3.api.json.JsonNumber){}[0]
    abstract fun value(com.apollographql.apollo3.api/Upload): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(com.apollographql.apollo3.api.Upload){}[0]
    abstract fun value(kotlin/Boolean): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(kotlin.Boolean){}[0]
    abstract fun value(kotlin/Double): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(kotlin.Double){}[0]
    abstract fun value(kotlin/Int): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(kotlin.Int){}[0]
    abstract fun value(kotlin/Long): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(kotlin.Long){}[0]
    abstract fun value(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/JsonWriter.value|value(kotlin.String){}[0]
    abstract val path // com.apollographql.apollo3.api.json/JsonWriter.path|{}path[0]
        abstract fun <get-path>(): kotlin/String // com.apollographql.apollo3.api.json/JsonWriter.path.<get-path>|<get-path>(){}[0]
}
abstract interface com.apollographql.apollo3.api/BuilderScope { // com.apollographql.apollo3.api/BuilderScope|null[0]
    abstract val customScalarAdapters // com.apollographql.apollo3.api/BuilderScope.customScalarAdapters|{}customScalarAdapters[0]
        abstract fun <get-customScalarAdapters>(): com.apollographql.apollo3.api/CustomScalarAdapters // com.apollographql.apollo3.api/BuilderScope.customScalarAdapters.<get-customScalarAdapters>|<get-customScalarAdapters>(){}[0]
}
abstract interface com.apollographql.apollo3.api/ExecutionContext { // com.apollographql.apollo3.api/ExecutionContext|null[0]
    abstract fun <#A1: com.apollographql.apollo3.api/ExecutionContext.Element> get(com.apollographql.apollo3.api/ExecutionContext.Key<#A1>): #A1? // com.apollographql.apollo3.api/ExecutionContext.get|get(com.apollographql.apollo3.api.ExecutionContext.Key<0:0>){0§<com.apollographql.apollo3.api.ExecutionContext.Element>}[0]
    abstract fun <#A1: kotlin/Any?> fold(#A1, kotlin/Function2<#A1, com.apollographql.apollo3.api/ExecutionContext.Element, #A1>): #A1 // com.apollographql.apollo3.api/ExecutionContext.fold|fold(0:0;kotlin.Function2<0:0,com.apollographql.apollo3.api.ExecutionContext.Element,0:0>){0§<kotlin.Any?>}[0]
    abstract fun minusKey(com.apollographql.apollo3.api/ExecutionContext.Key<*>): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ExecutionContext.minusKey|minusKey(com.apollographql.apollo3.api.ExecutionContext.Key<*>){}[0]
    abstract interface <#A1: com.apollographql.apollo3.api/ExecutionContext.Element> Key // com.apollographql.apollo3.api/ExecutionContext.Key|null[0]
    abstract interface Element : com.apollographql.apollo3.api/ExecutionContext { // com.apollographql.apollo3.api/ExecutionContext.Element|null[0]
        abstract val key // com.apollographql.apollo3.api/ExecutionContext.Element.key|{}key[0]
            abstract fun <get-key>(): com.apollographql.apollo3.api/ExecutionContext.Key<*> // com.apollographql.apollo3.api/ExecutionContext.Element.key.<get-key>|<get-key>(){}[0]
        open fun <#A2: com.apollographql.apollo3.api/ExecutionContext.Element> get(com.apollographql.apollo3.api/ExecutionContext.Key<#A2>): #A2? // com.apollographql.apollo3.api/ExecutionContext.Element.get|get(com.apollographql.apollo3.api.ExecutionContext.Key<0:0>){0§<com.apollographql.apollo3.api.ExecutionContext.Element>}[0]
        open fun <#A2: kotlin/Any?> fold(#A2, kotlin/Function2<#A2, com.apollographql.apollo3.api/ExecutionContext.Element, #A2>): #A2 // com.apollographql.apollo3.api/ExecutionContext.Element.fold|fold(0:0;kotlin.Function2<0:0,com.apollographql.apollo3.api.ExecutionContext.Element,0:0>){0§<kotlin.Any?>}[0]
        open fun minusKey(com.apollographql.apollo3.api/ExecutionContext.Key<*>): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ExecutionContext.Element.minusKey|minusKey(com.apollographql.apollo3.api.ExecutionContext.Key<*>){}[0]
    }
    final object Companion { // com.apollographql.apollo3.api/ExecutionContext.Companion|null[0]
        final val Empty // com.apollographql.apollo3.api/ExecutionContext.Companion.Empty|{}Empty[0]
            final fun <get-Empty>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ExecutionContext.Companion.Empty.<get-Empty>|<get-Empty>(){}[0]
    }
    open fun plus(com.apollographql.apollo3.api/ExecutionContext): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ExecutionContext.plus|plus(com.apollographql.apollo3.api.ExecutionContext){}[0]
}
abstract interface com.apollographql.apollo3.api/ExecutionOptions { // com.apollographql.apollo3.api/ExecutionOptions|null[0]
    abstract val canBeBatched // com.apollographql.apollo3.api/ExecutionOptions.canBeBatched|{}canBeBatched[0]
        abstract fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo3.api/ExecutionOptions.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
    abstract val enableAutoPersistedQueries // com.apollographql.apollo3.api/ExecutionOptions.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
        abstract fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo3.api/ExecutionOptions.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
    abstract val executionContext // com.apollographql.apollo3.api/ExecutionOptions.executionContext|{}executionContext[0]
        abstract fun <get-executionContext>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ExecutionOptions.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    abstract val httpHeaders // com.apollographql.apollo3.api/ExecutionOptions.httpHeaders|{}httpHeaders[0]
        abstract fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>? // com.apollographql.apollo3.api/ExecutionOptions.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
    abstract val httpMethod // com.apollographql.apollo3.api/ExecutionOptions.httpMethod|{}httpMethod[0]
        abstract fun <get-httpMethod>(): com.apollographql.apollo3.api.http/HttpMethod? // com.apollographql.apollo3.api/ExecutionOptions.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
    abstract val sendApqExtensions // com.apollographql.apollo3.api/ExecutionOptions.sendApqExtensions|{}sendApqExtensions[0]
        abstract fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo3.api/ExecutionOptions.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
    abstract val sendDocument // com.apollographql.apollo3.api/ExecutionOptions.sendDocument|{}sendDocument[0]
        abstract fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo3.api/ExecutionOptions.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]
    final object Companion { // com.apollographql.apollo3.api/ExecutionOptions.Companion|null[0]
        final const val CAN_BE_BATCHED // com.apollographql.apollo3.api/ExecutionOptions.Companion.CAN_BE_BATCHED|{}CAN_BE_BATCHED[0]
            final fun <get-CAN_BE_BATCHED>(): kotlin/String // com.apollographql.apollo3.api/ExecutionOptions.Companion.CAN_BE_BATCHED.<get-CAN_BE_BATCHED>|<get-CAN_BE_BATCHED>(){}[0]
    }
}
abstract interface com.apollographql.apollo3.api/FakeResolver { // com.apollographql.apollo3.api/FakeResolver|null[0]
    abstract fun resolveLeaf(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Any // com.apollographql.apollo3.api/FakeResolver.resolveLeaf|resolveLeaf(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    abstract fun resolveListSize(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Int // com.apollographql.apollo3.api/FakeResolver.resolveListSize|resolveListSize(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    abstract fun resolveMaybeNull(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Boolean // com.apollographql.apollo3.api/FakeResolver.resolveMaybeNull|resolveMaybeNull(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    abstract fun resolveTypename(com.apollographql.apollo3.api/FakeResolverContext): kotlin/String // com.apollographql.apollo3.api/FakeResolver.resolveTypename|resolveTypename(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    abstract fun stableIdForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo3.api/CompiledField): kotlin/String? // com.apollographql.apollo3.api/FakeResolver.stableIdForObject|stableIdForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo3.api.CompiledField){}[0]
}
abstract interface com.apollographql.apollo3.api/Upload { // com.apollographql.apollo3.api/Upload|null[0]
    abstract fun writeTo(okio/BufferedSink) // com.apollographql.apollo3.api/Upload.writeTo|writeTo(okio.BufferedSink){}[0]
    abstract val contentLength // com.apollographql.apollo3.api/Upload.contentLength|{}contentLength[0]
        abstract fun <get-contentLength>(): kotlin/Long // com.apollographql.apollo3.api/Upload.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    abstract val contentType // com.apollographql.apollo3.api/Upload.contentType|{}contentType[0]
        abstract fun <get-contentType>(): kotlin/String // com.apollographql.apollo3.api/Upload.contentType.<get-contentType>|<get-contentType>(){}[0]
    abstract val fileName // com.apollographql.apollo3.api/Upload.fileName|{}fileName[0]
        abstract fun <get-fileName>(): kotlin/String? // com.apollographql.apollo3.api/Upload.fileName.<get-fileName>|<get-fileName>(){}[0]
}
final class <#A: com.apollographql.apollo3.api/Operation.Data> com.apollographql.apollo3.api/ApolloRequest : com.apollographql.apollo3.api/ExecutionOptions { // com.apollographql.apollo3.api/ApolloRequest|null[0]
    final class <#A1: com.apollographql.apollo3.api/Operation.Data> Builder : com.apollographql.apollo3.api/MutableExecutionOptions<com.apollographql.apollo3.api/ApolloRequest.Builder<#A1>> { // com.apollographql.apollo3.api/ApolloRequest.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/Operation<#A1>) // com.apollographql.apollo3.api/ApolloRequest.Builder.<init>|<init>(com.apollographql.apollo3.api.Operation<1:0>){}[0]
        final fun addExecutionContext(com.apollographql.apollo3.api/ExecutionContext): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.addExecutionContext|addExecutionContext(com.apollographql.apollo3.api.ExecutionContext){}[0]
        final fun addHttpHeader(kotlin/String, kotlin/String): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.addHttpHeader|addHttpHeader(kotlin.String;kotlin.String){}[0]
        final fun build(): com.apollographql.apollo3.api/ApolloRequest<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.build|build(){}[0]
        final fun canBeBatched(kotlin/Boolean?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.canBeBatched|canBeBatched(kotlin.Boolean?){}[0]
        final fun enableAutoPersistedQueries(kotlin/Boolean?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.enableAutoPersistedQueries|enableAutoPersistedQueries(kotlin.Boolean?){}[0]
        final fun executionContext(com.apollographql.apollo3.api/ExecutionContext): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.executionContext|executionContext(com.apollographql.apollo3.api.ExecutionContext){}[0]
        final fun httpHeaders(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.httpHeaders|httpHeaders(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>?){}[0]
        final fun httpMethod(com.apollographql.apollo3.api.http/HttpMethod?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.httpMethod|httpMethod(com.apollographql.apollo3.api.http.HttpMethod?){}[0]
        final fun ignoreApolloClientHttpHeaders(kotlin/Boolean?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.ignoreApolloClientHttpHeaders|ignoreApolloClientHttpHeaders(kotlin.Boolean?){}[0]
        final fun requestUuid(com.benasher44.uuid/Uuid): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.requestUuid|requestUuid(com.benasher44.uuid.Uuid){}[0]
        final fun sendApqExtensions(kotlin/Boolean?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.sendApqExtensions|sendApqExtensions(kotlin.Boolean?){}[0]
        final fun sendDocument(kotlin/Boolean?): com.apollographql.apollo3.api/ApolloRequest.Builder<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.sendDocument|sendDocument(kotlin.Boolean?){}[0]
        final val operation // com.apollographql.apollo3.api/ApolloRequest.Builder.operation|{}operation[0]
            final fun <get-operation>(): com.apollographql.apollo3.api/Operation<#A1> // com.apollographql.apollo3.api/ApolloRequest.Builder.operation.<get-operation>|<get-operation>(){}[0]
        final var canBeBatched // com.apollographql.apollo3.api/ApolloRequest.Builder.canBeBatched|{}canBeBatched[0]
            final fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.Builder.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
        final var enableAutoPersistedQueries // com.apollographql.apollo3.api/ApolloRequest.Builder.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
            final fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.Builder.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
        final var executionContext // com.apollographql.apollo3.api/ApolloRequest.Builder.executionContext|{}executionContext[0]
            final fun <get-executionContext>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ApolloRequest.Builder.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
        final var httpHeaders // com.apollographql.apollo3.api/ApolloRequest.Builder.httpHeaders|{}httpHeaders[0]
            final fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>? // com.apollographql.apollo3.api/ApolloRequest.Builder.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
        final var httpMethod // com.apollographql.apollo3.api/ApolloRequest.Builder.httpMethod|{}httpMethod[0]
            final fun <get-httpMethod>(): com.apollographql.apollo3.api.http/HttpMethod? // com.apollographql.apollo3.api/ApolloRequest.Builder.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
        final var ignoreApolloClientHttpHeaders // com.apollographql.apollo3.api/ApolloRequest.Builder.ignoreApolloClientHttpHeaders|{}ignoreApolloClientHttpHeaders[0]
            final fun <get-ignoreApolloClientHttpHeaders>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.Builder.ignoreApolloClientHttpHeaders.<get-ignoreApolloClientHttpHeaders>|<get-ignoreApolloClientHttpHeaders>(){}[0]
        final var requestUuid // com.apollographql.apollo3.api/ApolloRequest.Builder.requestUuid|{}requestUuid[0]
            final fun <get-requestUuid>(): com.benasher44.uuid/Uuid? // com.apollographql.apollo3.api/ApolloRequest.Builder.requestUuid.<get-requestUuid>|<get-requestUuid>(){}[0]
        final var sendApqExtensions // com.apollographql.apollo3.api/ApolloRequest.Builder.sendApqExtensions|{}sendApqExtensions[0]
            final fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.Builder.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
        final var sendDocument // com.apollographql.apollo3.api/ApolloRequest.Builder.sendDocument|{}sendDocument[0]
            final fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.Builder.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api/ApolloRequest.Builder<#A> // com.apollographql.apollo3.api/ApolloRequest.newBuilder|newBuilder(){}[0]
    final val canBeBatched // com.apollographql.apollo3.api/ApolloRequest.canBeBatched|{}canBeBatched[0]
        final fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
    final val enableAutoPersistedQueries // com.apollographql.apollo3.api/ApolloRequest.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
        final fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
    final val executionContext // com.apollographql.apollo3.api/ApolloRequest.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ApolloRequest.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val httpHeaders // com.apollographql.apollo3.api/ApolloRequest.httpHeaders|{}httpHeaders[0]
        final fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>? // com.apollographql.apollo3.api/ApolloRequest.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
    final val httpMethod // com.apollographql.apollo3.api/ApolloRequest.httpMethod|{}httpMethod[0]
        final fun <get-httpMethod>(): com.apollographql.apollo3.api.http/HttpMethod? // com.apollographql.apollo3.api/ApolloRequest.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
    final val ignoreApolloClientHttpHeaders // com.apollographql.apollo3.api/ApolloRequest.ignoreApolloClientHttpHeaders|{}ignoreApolloClientHttpHeaders[0]
        final fun <get-ignoreApolloClientHttpHeaders>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.ignoreApolloClientHttpHeaders.<get-ignoreApolloClientHttpHeaders>|<get-ignoreApolloClientHttpHeaders>(){}[0]
    final val operation // com.apollographql.apollo3.api/ApolloRequest.operation|{}operation[0]
        final fun <get-operation>(): com.apollographql.apollo3.api/Operation<#A> // com.apollographql.apollo3.api/ApolloRequest.operation.<get-operation>|<get-operation>(){}[0]
    final val requestUuid // com.apollographql.apollo3.api/ApolloRequest.requestUuid|{}requestUuid[0]
        final fun <get-requestUuid>(): com.benasher44.uuid/Uuid // com.apollographql.apollo3.api/ApolloRequest.requestUuid.<get-requestUuid>|<get-requestUuid>(){}[0]
    final val sendApqExtensions // com.apollographql.apollo3.api/ApolloRequest.sendApqExtensions|{}sendApqExtensions[0]
        final fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
    final val sendDocument // com.apollographql.apollo3.api/ApolloRequest.sendDocument|{}sendDocument[0]
        final fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo3.api/ApolloRequest.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]
}
final class <#A: com.apollographql.apollo3.api/Operation.Data> com.apollographql.apollo3.api/ApolloResponse { // com.apollographql.apollo3.api/ApolloResponse|null[0]
    final class <#A1: com.apollographql.apollo3.api/Operation.Data> Builder { // com.apollographql.apollo3.api/ApolloResponse.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/Operation<#A1>, com.benasher44.uuid/Uuid) // com.apollographql.apollo3.api/ApolloResponse.Builder.<init>|<init>(com.apollographql.apollo3.api.Operation<1:0>;com.benasher44.uuid.Uuid){}[0]
        constructor <init>(com.apollographql.apollo3.api/Operation<#A1>, com.benasher44.uuid/Uuid, #A1?) // com.apollographql.apollo3.api/ApolloResponse.Builder.<init>|<init>(com.apollographql.apollo3.api.Operation<1:0>;com.benasher44.uuid.Uuid;1:0?){}[0]
        final fun addExecutionContext(com.apollographql.apollo3.api/ExecutionContext): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.addExecutionContext|addExecutionContext(com.apollographql.apollo3.api.ExecutionContext){}[0]
        final fun build(): com.apollographql.apollo3.api/ApolloResponse<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.build|build(){}[0]
        final fun data(#A1?): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.data|data(1:0?){}[0]
        final fun errors(kotlin.collections/List<com.apollographql.apollo3.api/Error>?): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.errors|errors(kotlin.collections.List<com.apollographql.apollo3.api.Error>?){}[0]
        final fun exception(com.apollographql.apollo3.exception/ApolloException?): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.exception|exception(com.apollographql.apollo3.exception.ApolloException?){}[0]
        final fun extensions(kotlin.collections/Map<kotlin/String, kotlin/Any?>?): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.extensions|extensions(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        final fun isLast(kotlin/Boolean): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.isLast|isLast(kotlin.Boolean){}[0]
        final fun requestUuid(com.benasher44.uuid/Uuid): com.apollographql.apollo3.api/ApolloResponse.Builder<#A1> // com.apollographql.apollo3.api/ApolloResponse.Builder.requestUuid|requestUuid(com.benasher44.uuid.Uuid){}[0]
    }
    final fun dataOrThrow(): #A // com.apollographql.apollo3.api/ApolloResponse.dataOrThrow|dataOrThrow(){}[0]
    final fun hasErrors(): kotlin/Boolean // com.apollographql.apollo3.api/ApolloResponse.hasErrors|hasErrors(){}[0]
    final fun newBuilder(): com.apollographql.apollo3.api/ApolloResponse.Builder<#A> // com.apollographql.apollo3.api/ApolloResponse.newBuilder|newBuilder(){}[0]
    final val data // com.apollographql.apollo3.api/ApolloResponse.data|{}data[0]
        final fun <get-data>(): #A? // com.apollographql.apollo3.api/ApolloResponse.data.<get-data>|<get-data>(){}[0]
    final val dataAssertNoErrors // com.apollographql.apollo3.api/ApolloResponse.dataAssertNoErrors|{}dataAssertNoErrors[0]
        final fun <get-dataAssertNoErrors>(): #A // com.apollographql.apollo3.api/ApolloResponse.dataAssertNoErrors.<get-dataAssertNoErrors>|<get-dataAssertNoErrors>(){}[0]
    final val errors // com.apollographql.apollo3.api/ApolloResponse.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo3.api/Error>? // com.apollographql.apollo3.api/ApolloResponse.errors.<get-errors>|<get-errors>(){}[0]
    final val exception // com.apollographql.apollo3.api/ApolloResponse.exception|{}exception[0]
        final fun <get-exception>(): com.apollographql.apollo3.exception/ApolloException? // com.apollographql.apollo3.api/ApolloResponse.exception.<get-exception>|<get-exception>(){}[0]
    final val executionContext // com.apollographql.apollo3.api/ApolloResponse.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api/ApolloResponse.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val extensions // com.apollographql.apollo3.api/ApolloResponse.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api/ApolloResponse.extensions.<get-extensions>|<get-extensions>(){}[0]
    final val isLast // com.apollographql.apollo3.api/ApolloResponse.isLast|{}isLast[0]
        final fun <get-isLast>(): kotlin/Boolean // com.apollographql.apollo3.api/ApolloResponse.isLast.<get-isLast>|<get-isLast>(){}[0]
    final val operation // com.apollographql.apollo3.api/ApolloResponse.operation|{}operation[0]
        final fun <get-operation>(): com.apollographql.apollo3.api/Operation<#A> // com.apollographql.apollo3.api/ApolloResponse.operation.<get-operation>|<get-operation>(){}[0]
    final val requestUuid // com.apollographql.apollo3.api/ApolloResponse.requestUuid|{}requestUuid[0]
        final fun <get-requestUuid>(): com.benasher44.uuid/Uuid // com.apollographql.apollo3.api/ApolloResponse.requestUuid.<get-requestUuid>|<get-requestUuid>(){}[0]
}
final class <#A: kotlin/Any> com.apollographql.apollo3.api/NullableAdapter : com.apollographql.apollo3.api/Adapter<#A?> { // com.apollographql.apollo3.api/NullableAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/NullableAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): #A? // com.apollographql.apollo3.api/NullableAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, #A?) // com.apollographql.apollo3.api/NullableAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;1:0?){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> com.apollographql.apollo3.api/ImmutableMapBuilder { // com.apollographql.apollo3.api/ImmutableMapBuilder|null[0]
    constructor <init>() // com.apollographql.apollo3.api/ImmutableMapBuilder.<init>|<init>(){}[0]
    final fun build(): kotlin.collections/Map<#A, #B> // com.apollographql.apollo3.api/ImmutableMapBuilder.build|build(){}[0]
    final fun put(#A, #B): com.apollographql.apollo3.api/ImmutableMapBuilder<#A, #B> // com.apollographql.apollo3.api/ImmutableMapBuilder.put|put(1:0;1:1){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/ApolloOptionalAdapter : com.apollographql.apollo3.api/Adapter<com.apollographql.apollo3.api/Optional<#A>> { // com.apollographql.apollo3.api/ApolloOptionalAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/ApolloOptionalAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/Optional<#A> // com.apollographql.apollo3.api/ApolloOptionalAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.apollo3.api/Optional<#A>) // com.apollographql.apollo3.api/ApolloOptionalAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.apollo3.api.Optional<1:0>){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/BuilderProperty { // com.apollographql.apollo3.api/BuilderProperty|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/BuilderProperty.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun getValue(com.apollographql.apollo3.api/ObjectBuilder<*>, kotlin.reflect/KProperty<*>): #A // com.apollographql.apollo3.api/BuilderProperty.getValue|getValue(com.apollographql.apollo3.api.ObjectBuilder<*>;kotlin.reflect.KProperty<*>){}[0]
    final fun setValue(com.apollographql.apollo3.api/ObjectBuilder<*>, kotlin.reflect/KProperty<*>, #A) // com.apollographql.apollo3.api/BuilderProperty.setValue|setValue(com.apollographql.apollo3.api.ObjectBuilder<*>;kotlin.reflect.KProperty<*>;1:0){}[0]
    final val adapter // com.apollographql.apollo3.api/BuilderProperty.adapter|{}adapter[0]
        final fun <get-adapter>(): com.apollographql.apollo3.api/Adapter<#A> // com.apollographql.apollo3.api/BuilderProperty.adapter.<get-adapter>|<get-adapter>(){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/ListAdapter : com.apollographql.apollo3.api/Adapter<kotlin.collections/List<#A>> { // com.apollographql.apollo3.api/ListAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/ListAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): kotlin.collections/List<#A> // com.apollographql.apollo3.api/ListAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin.collections/List<#A>) // com.apollographql.apollo3.api/ListAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.collections.List<1:0>){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/ObjectAdapter : com.apollographql.apollo3.api/Adapter<#A> { // com.apollographql.apollo3.api/ObjectAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>, kotlin/Boolean) // com.apollographql.apollo3.api/ObjectAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>;kotlin.Boolean){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): #A // com.apollographql.apollo3.api/ObjectAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, #A) // com.apollographql.apollo3.api/ObjectAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;1:0){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/OptionalAdapter : com.apollographql.apollo3.api/Adapter<com.apollographql.apollo3.api/Optional.Present<#A>> { // com.apollographql.apollo3.api/OptionalAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/OptionalAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/Optional.Present<#A> // com.apollographql.apollo3.api/OptionalAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.apollo3.api/Optional.Present<#A>) // com.apollographql.apollo3.api/OptionalAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.apollo3.api.Optional.Present<1:0>){}[0]
}
final class <#A: kotlin/Any?> com.apollographql.apollo3.api/PresentAdapter : com.apollographql.apollo3.api/Adapter<com.apollographql.apollo3.api/Optional.Present<#A>> { // com.apollographql.apollo3.api/PresentAdapter|null[0]
    constructor <init>(com.apollographql.apollo3.api/Adapter<#A>) // com.apollographql.apollo3.api/PresentAdapter.<init>|<init>(com.apollographql.apollo3.api.Adapter<1:0>){}[0]
    final fun fromJson(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/Optional.Present<#A> // com.apollographql.apollo3.api/PresentAdapter.fromJson|fromJson(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
    final fun toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, com.apollographql.apollo3.api/Optional.Present<#A>) // com.apollographql.apollo3.api/PresentAdapter.toJson|toJson(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;com.apollographql.apollo3.api.Optional.Present<1:0>){}[0]
}
final class com.apollographql.apollo3.api.http/ByteStringHttpBody : com.apollographql.apollo3.api.http/HttpBody { // com.apollographql.apollo3.api.http/ByteStringHttpBody|null[0]
    constructor <init>(kotlin/String, kotlin/String) // com.apollographql.apollo3.api.http/ByteStringHttpBody.<init>|<init>(kotlin.String;kotlin.String){}[0]
    constructor <init>(kotlin/String, okio/ByteString) // com.apollographql.apollo3.api.http/ByteStringHttpBody.<init>|<init>(kotlin.String;okio.ByteString){}[0]
    final fun writeTo(okio/BufferedSink) // com.apollographql.apollo3.api.http/ByteStringHttpBody.writeTo|writeTo(okio.BufferedSink){}[0]
    final val contentLength // com.apollographql.apollo3.api.http/ByteStringHttpBody.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // com.apollographql.apollo3.api.http/ByteStringHttpBody.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // com.apollographql.apollo3.api.http/ByteStringHttpBody.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String // com.apollographql.apollo3.api.http/ByteStringHttpBody.contentType.<get-contentType>|<get-contentType>(){}[0]
}
final class com.apollographql.apollo3.api.http/DefaultHttpRequestComposer : com.apollographql.apollo3.api.http/HttpRequestComposer { // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.<init>|<init>(kotlin.String){}[0]
    final fun <#A1: com.apollographql.apollo3.api/Operation.Data> compose(com.apollographql.apollo3.api/ApolloRequest<#A1>): com.apollographql.apollo3.api.http/HttpRequest // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.compose|compose(com.apollographql.apollo3.api.ApolloRequest<0:0>){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
    final object Companion { // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion|null[0]
        final fun (kotlin/String).appendQueryParameters(kotlin.collections/Map<kotlin/String, kotlin/String>): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.appendQueryParameters|appendQueryParameters@kotlin.String(kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
        final fun <#A2: com.apollographql.apollo3.api/Operation.Data> buildParamsMap(com.apollographql.apollo3.api/Operation<#A2>, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/Boolean, kotlin/Boolean): okio/ByteString // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.buildParamsMap|buildParamsMap(com.apollographql.apollo3.api.Operation<0:0>;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.Boolean;kotlin.Boolean){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
        final fun <#A2: com.apollographql.apollo3.api/Operation.Data> buildPostBody(com.apollographql.apollo3.api/Operation<#A2>, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/Boolean, kotlin/String?): com.apollographql.apollo3.api.http/HttpBody // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.buildPostBody|buildPostBody(com.apollographql.apollo3.api.Operation<0:0>;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.Boolean;kotlin.String?){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
        final fun <#A2: com.apollographql.apollo3.api/Operation.Data> buildPostBody(com.apollographql.apollo3.api/Operation<#A2>, com.apollographql.apollo3.api/CustomScalarAdapters, kotlin/String?, kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>): com.apollographql.apollo3.api.http/HttpBody // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.buildPostBody|buildPostBody(com.apollographql.apollo3.api.Operation<0:0>;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.String?;kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
        final fun <#A2: com.apollographql.apollo3.api/Operation.Data> composePayload(com.apollographql.apollo3.api/ApolloRequest<#A2>): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.composePayload|composePayload(com.apollographql.apollo3.api.ApolloRequest<0:0>){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
        final val HEADER_ACCEPT_NAME // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_NAME|{}HEADER_ACCEPT_NAME[0]
            final fun <get-HEADER_ACCEPT_NAME>(): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_NAME.<get-HEADER_ACCEPT_NAME>|<get-HEADER_ACCEPT_NAME>(){}[0]
        final val HEADER_ACCEPT_VALUE_DEFER // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_VALUE_DEFER|{}HEADER_ACCEPT_VALUE_DEFER[0]
            final fun <get-HEADER_ACCEPT_VALUE_DEFER>(): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_VALUE_DEFER.<get-HEADER_ACCEPT_VALUE_DEFER>|<get-HEADER_ACCEPT_VALUE_DEFER>(){}[0]
        final val HEADER_ACCEPT_VALUE_MULTIPART // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_VALUE_MULTIPART|{}HEADER_ACCEPT_VALUE_MULTIPART[0]
            final fun <get-HEADER_ACCEPT_VALUE_MULTIPART>(): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_ACCEPT_VALUE_MULTIPART.<get-HEADER_ACCEPT_VALUE_MULTIPART>|<get-HEADER_ACCEPT_VALUE_MULTIPART>(){}[0]
        final val HEADER_APOLLO_OPERATION_ID // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_APOLLO_OPERATION_ID|{}HEADER_APOLLO_OPERATION_ID[0]
            final fun <get-HEADER_APOLLO_OPERATION_ID>(): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_APOLLO_OPERATION_ID.<get-HEADER_APOLLO_OPERATION_ID>|<get-HEADER_APOLLO_OPERATION_ID>(){}[0]
        final val HEADER_APOLLO_OPERATION_NAME // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_APOLLO_OPERATION_NAME|{}HEADER_APOLLO_OPERATION_NAME[0]
            final fun <get-HEADER_APOLLO_OPERATION_NAME>(): kotlin/String // com.apollographql.apollo3.api.http/DefaultHttpRequestComposer.Companion.HEADER_APOLLO_OPERATION_NAME.<get-HEADER_APOLLO_OPERATION_NAME>|<get-HEADER_APOLLO_OPERATION_NAME>(){}[0]
    }
}
final class com.apollographql.apollo3.api.http/HttpHeader { // com.apollographql.apollo3.api.http/HttpHeader|null[0]
    constructor <init>(kotlin/String, kotlin/String) // com.apollographql.apollo3.api.http/HttpHeader.<init>|<init>(kotlin.String;kotlin.String){}[0]
    final fun component1(): kotlin/String // com.apollographql.apollo3.api.http/HttpHeader.component1|component1(){}[0]
    final fun component2(): kotlin/String // com.apollographql.apollo3.api.http/HttpHeader.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/String = ...): com.apollographql.apollo3.api.http/HttpHeader // com.apollographql.apollo3.api.http/HttpHeader.copy|copy(kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api.http/HttpHeader.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api.http/HttpHeader.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api.http/HttpHeader.toString|toString(){}[0]
    final val name // com.apollographql.apollo3.api.http/HttpHeader.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api.http/HttpHeader.name.<get-name>|<get-name>(){}[0]
    final val value // com.apollographql.apollo3.api.http/HttpHeader.value|{}value[0]
        final fun <get-value>(): kotlin/String // com.apollographql.apollo3.api.http/HttpHeader.value.<get-value>|<get-value>(){}[0]
}
final class com.apollographql.apollo3.api.http/HttpRequest { // com.apollographql.apollo3.api.http/HttpRequest|null[0]
    final class Builder { // com.apollographql.apollo3.api.http/HttpRequest.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api.http/HttpMethod, kotlin/String) // com.apollographql.apollo3.api.http/HttpRequest.Builder.<init>|<init>(com.apollographql.apollo3.api.http.HttpMethod;kotlin.String){}[0]
        final fun addExecutionContext(com.apollographql.apollo3.api/ExecutionContext): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.Builder.addExecutionContext|addExecutionContext(com.apollographql.apollo3.api.ExecutionContext){}[0]
        final fun addHeader(kotlin/String, kotlin/String): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.Builder.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
        final fun addHeaders(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.Builder.addHeaders|addHeaders(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>){}[0]
        final fun body(com.apollographql.apollo3.api.http/HttpBody): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.Builder.body|body(com.apollographql.apollo3.api.http.HttpBody){}[0]
        final fun build(): com.apollographql.apollo3.api.http/HttpRequest // com.apollographql.apollo3.api.http/HttpRequest.Builder.build|build(){}[0]
        final fun headers(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.Builder.headers|headers(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>){}[0]
    }
    final fun newBuilder(com.apollographql.apollo3.api.http/HttpMethod = ..., kotlin/String = ...): com.apollographql.apollo3.api.http/HttpRequest.Builder // com.apollographql.apollo3.api.http/HttpRequest.newBuilder|newBuilder(com.apollographql.apollo3.api.http.HttpMethod;kotlin.String){}[0]
    final val body // com.apollographql.apollo3.api.http/HttpRequest.body|{}body[0]
        final fun <get-body>(): com.apollographql.apollo3.api.http/HttpBody? // com.apollographql.apollo3.api.http/HttpRequest.body.<get-body>|<get-body>(){}[0]
    final val executionContext // com.apollographql.apollo3.api.http/HttpRequest.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo3.api/ExecutionContext // com.apollographql.apollo3.api.http/HttpRequest.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val headers // com.apollographql.apollo3.api.http/HttpRequest.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader> // com.apollographql.apollo3.api.http/HttpRequest.headers.<get-headers>|<get-headers>(){}[0]
    final val method // com.apollographql.apollo3.api.http/HttpRequest.method|{}method[0]
        final fun <get-method>(): com.apollographql.apollo3.api.http/HttpMethod // com.apollographql.apollo3.api.http/HttpRequest.method.<get-method>|<get-method>(){}[0]
    final val url // com.apollographql.apollo3.api.http/HttpRequest.url|{}url[0]
        final fun <get-url>(): kotlin/String // com.apollographql.apollo3.api.http/HttpRequest.url.<get-url>|<get-url>(){}[0]
}
final class com.apollographql.apollo3.api.http/HttpResponse { // com.apollographql.apollo3.api.http/HttpResponse|null[0]
    final class Builder { // com.apollographql.apollo3.api.http/HttpResponse.Builder|null[0]
        constructor <init>(kotlin/Int) // com.apollographql.apollo3.api.http/HttpResponse.Builder.<init>|<init>(kotlin.Int){}[0]
        final fun addHeader(kotlin/String, kotlin/String): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.Builder.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
        final fun addHeaders(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.Builder.addHeaders|addHeaders(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>){}[0]
        final fun body(okio/BufferedSource): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.Builder.body|body(okio.BufferedSource){}[0]
        final fun body(okio/ByteString): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.Builder.body|body(okio.ByteString){}[0]
        final fun build(): com.apollographql.apollo3.api.http/HttpResponse // com.apollographql.apollo3.api.http/HttpResponse.Builder.build|build(){}[0]
        final fun headers(kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.Builder.headers|headers(kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>){}[0]
        final val statusCode // com.apollographql.apollo3.api.http/HttpResponse.Builder.statusCode|{}statusCode[0]
            final fun <get-statusCode>(): kotlin/Int // com.apollographql.apollo3.api.http/HttpResponse.Builder.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api.http/HttpResponse.Builder // com.apollographql.apollo3.api.http/HttpResponse.newBuilder|newBuilder(){}[0]
    final val body // com.apollographql.apollo3.api.http/HttpResponse.body|{}body[0]
        final fun <get-body>(): okio/BufferedSource? // com.apollographql.apollo3.api.http/HttpResponse.body.<get-body>|<get-body>(){}[0]
    final val headers // com.apollographql.apollo3.api.http/HttpResponse.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader> // com.apollographql.apollo3.api.http/HttpResponse.headers.<get-headers>|<get-headers>(){}[0]
    final val statusCode // com.apollographql.apollo3.api.http/HttpResponse.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): kotlin/Int // com.apollographql.apollo3.api.http/HttpResponse.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
}
final class com.apollographql.apollo3.api.json/BufferedSinkJsonWriter : com.apollographql.apollo3.api.json/JsonWriter { // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter|null[0]
    constructor <init>(okio/BufferedSink, kotlin/String? = ...) // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.<init>|<init>(okio.BufferedSink;kotlin.String?){}[0]
    final fun beginArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.beginArray|beginArray(){}[0]
    final fun beginObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.beginObject|beginObject(){}[0]
    final fun close() // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.close|close(){}[0]
    final fun endArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.endArray|endArray(){}[0]
    final fun endObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.endObject|endObject(){}[0]
    final fun flush() // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.flush|flush(){}[0]
    final fun jsonValue(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.jsonValue|jsonValue(kotlin.String){}[0]
    final fun name(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.name|name(kotlin.String){}[0]
    final fun nullValue(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.nullValue|nullValue(){}[0]
    final fun value(com.apollographql.apollo3.api.json/JsonNumber): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(com.apollographql.apollo3.api.json.JsonNumber){}[0]
    final fun value(com.apollographql.apollo3.api/Upload): com.apollographql.apollo3.api.json/BufferedSinkJsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(com.apollographql.apollo3.api.Upload){}[0]
    final fun value(kotlin/Boolean): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(kotlin.Boolean){}[0]
    final fun value(kotlin/Double): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(kotlin.Double){}[0]
    final fun value(kotlin/Int): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(kotlin.Int){}[0]
    final fun value(kotlin/Long): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(kotlin.Long){}[0]
    final fun value(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.value|value(kotlin.String){}[0]
    final object Companion { // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.Companion|null[0]
        final fun string(okio/BufferedSink, kotlin/String) // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.Companion.string|string(okio.BufferedSink;kotlin.String){}[0]
    }
    final val path // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.path|{}path[0]
        final fun <get-path>(): kotlin/String // com.apollographql.apollo3.api.json/BufferedSinkJsonWriter.path.<get-path>|<get-path>(){}[0]
}
final class com.apollographql.apollo3.api.json/BufferedSourceJsonReader : com.apollographql.apollo3.api.json/JsonReader { // com.apollographql.apollo3.api.json/BufferedSourceJsonReader|null[0]
    constructor <init>(okio/BufferedSource) // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.<init>|<init>(okio.BufferedSource){}[0]
    final fun beginArray(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.beginArray|beginArray(){}[0]
    final fun beginObject(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.beginObject|beginObject(){}[0]
    final fun close() // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.close|close(){}[0]
    final fun endArray(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.endArray|endArray(){}[0]
    final fun endObject(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.endObject|endObject(){}[0]
    final fun getPath(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.getPath|getPath(){}[0]
    final fun hasNext(): kotlin/Boolean // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.hasNext|hasNext(){}[0]
    final fun nextBoolean(): kotlin/Boolean // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextBoolean|nextBoolean(){}[0]
    final fun nextDouble(): kotlin/Double // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextDouble|nextDouble(){}[0]
    final fun nextInt(): kotlin/Int // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextInt|nextInt(){}[0]
    final fun nextLong(): kotlin/Long // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextLong|nextLong(){}[0]
    final fun nextName(): kotlin/String // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextName|nextName(){}[0]
    final fun nextNull(): kotlin/Nothing? // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextNull|nextNull(){}[0]
    final fun nextNumber(): com.apollographql.apollo3.api.json/JsonNumber // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextNumber|nextNumber(){}[0]
    final fun nextString(): kotlin/String? // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.nextString|nextString(){}[0]
    final fun peek(): com.apollographql.apollo3.api.json/JsonReader.Token // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.peek|peek(){}[0]
    final fun rewind() // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.rewind|rewind(){}[0]
    final fun selectName(kotlin.collections/List<kotlin/String>): kotlin/Int // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.selectName|selectName(kotlin.collections.List<kotlin.String>){}[0]
    final fun skipValue() // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.skipValue|skipValue(){}[0]
    final object Companion // com.apollographql.apollo3.api.json/BufferedSourceJsonReader.Companion|null[0]
}
final class com.apollographql.apollo3.api.json/JsonNumber { // com.apollographql.apollo3.api.json/JsonNumber|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api.json/JsonNumber.<init>|<init>(kotlin.String){}[0]
    final val value // com.apollographql.apollo3.api.json/JsonNumber.value|{}value[0]
        final fun <get-value>(): kotlin/String // com.apollographql.apollo3.api.json/JsonNumber.value.<get-value>|<get-value>(){}[0]
}
final class com.apollographql.apollo3.api.json/MapJsonReader : com.apollographql.apollo3.api.json/JsonReader { // com.apollographql.apollo3.api.json/MapJsonReader|null[0]
    constructor <init>(kotlin/Any?, kotlin.collections/List<kotlin/Any> = ...) // com.apollographql.apollo3.api.json/MapJsonReader.<init>|<init>(kotlin.Any?;kotlin.collections.List<kotlin.Any>){}[0]
    final fun beginArray(): com.apollographql.apollo3.api.json/MapJsonReader // com.apollographql.apollo3.api.json/MapJsonReader.beginArray|beginArray(){}[0]
    final fun beginObject(): com.apollographql.apollo3.api.json/MapJsonReader // com.apollographql.apollo3.api.json/MapJsonReader.beginObject|beginObject(){}[0]
    final fun close() // com.apollographql.apollo3.api.json/MapJsonReader.close|close(){}[0]
    final fun endArray(): com.apollographql.apollo3.api.json/MapJsonReader // com.apollographql.apollo3.api.json/MapJsonReader.endArray|endArray(){}[0]
    final fun endObject(): com.apollographql.apollo3.api.json/MapJsonReader // com.apollographql.apollo3.api.json/MapJsonReader.endObject|endObject(){}[0]
    final fun getPath(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api.json/MapJsonReader.getPath|getPath(){}[0]
    final fun hasNext(): kotlin/Boolean // com.apollographql.apollo3.api.json/MapJsonReader.hasNext|hasNext(){}[0]
    final fun nextBoolean(): kotlin/Boolean // com.apollographql.apollo3.api.json/MapJsonReader.nextBoolean|nextBoolean(){}[0]
    final fun nextDouble(): kotlin/Double // com.apollographql.apollo3.api.json/MapJsonReader.nextDouble|nextDouble(){}[0]
    final fun nextInt(): kotlin/Int // com.apollographql.apollo3.api.json/MapJsonReader.nextInt|nextInt(){}[0]
    final fun nextLong(): kotlin/Long // com.apollographql.apollo3.api.json/MapJsonReader.nextLong|nextLong(){}[0]
    final fun nextName(): kotlin/String // com.apollographql.apollo3.api.json/MapJsonReader.nextName|nextName(){}[0]
    final fun nextNull(): kotlin/Nothing? // com.apollographql.apollo3.api.json/MapJsonReader.nextNull|nextNull(){}[0]
    final fun nextNumber(): com.apollographql.apollo3.api.json/JsonNumber // com.apollographql.apollo3.api.json/MapJsonReader.nextNumber|nextNumber(){}[0]
    final fun nextString(): kotlin/String // com.apollographql.apollo3.api.json/MapJsonReader.nextString|nextString(){}[0]
    final fun nextValue(): kotlin/Any // com.apollographql.apollo3.api.json/MapJsonReader.nextValue|nextValue(){}[0]
    final fun peek(): com.apollographql.apollo3.api.json/JsonReader.Token // com.apollographql.apollo3.api.json/MapJsonReader.peek|peek(){}[0]
    final fun rewind() // com.apollographql.apollo3.api.json/MapJsonReader.rewind|rewind(){}[0]
    final fun selectName(kotlin.collections/List<kotlin/String>): kotlin/Int // com.apollographql.apollo3.api.json/MapJsonReader.selectName|selectName(kotlin.collections.List<kotlin.String>){}[0]
    final fun skipValue() // com.apollographql.apollo3.api.json/MapJsonReader.skipValue|skipValue(){}[0]
    final object Companion { // com.apollographql.apollo3.api.json/MapJsonReader.Companion|null[0]
        final fun (com.apollographql.apollo3.api.json/JsonReader).buffer(): com.apollographql.apollo3.api.json/MapJsonReader // com.apollographql.apollo3.api.json/MapJsonReader.Companion.buffer|buffer@com.apollographql.apollo3.api.json.JsonReader(){}[0]
    }
    final val root // com.apollographql.apollo3.api.json/MapJsonReader.root|{}root[0]
        final fun <get-root>(): kotlin/Any? // com.apollographql.apollo3.api.json/MapJsonReader.root.<get-root>|<get-root>(){}[0]
}
final class com.apollographql.apollo3.api.json/MapJsonWriter : com.apollographql.apollo3.api.json/JsonWriter { // com.apollographql.apollo3.api.json/MapJsonWriter|null[0]
    constructor <init>() // com.apollographql.apollo3.api.json/MapJsonWriter.<init>|<init>(){}[0]
    final fun beginArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.beginArray|beginArray(){}[0]
    final fun beginObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.beginObject|beginObject(){}[0]
    final fun close() // com.apollographql.apollo3.api.json/MapJsonWriter.close|close(){}[0]
    final fun endArray(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.endArray|endArray(){}[0]
    final fun endObject(): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.endObject|endObject(){}[0]
    final fun flush() // com.apollographql.apollo3.api.json/MapJsonWriter.flush|flush(){}[0]
    final fun name(kotlin/String): com.apollographql.apollo3.api.json/JsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.name|name(kotlin.String){}[0]
    final fun nullValue(): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.nullValue|nullValue(){}[0]
    final fun root(): kotlin/Any? // com.apollographql.apollo3.api.json/MapJsonWriter.root|root(){}[0]
    final fun value(com.apollographql.apollo3.api.json/JsonNumber): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(com.apollographql.apollo3.api.json.JsonNumber){}[0]
    final fun value(com.apollographql.apollo3.api/Upload): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(com.apollographql.apollo3.api.Upload){}[0]
    final fun value(kotlin/Any?): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.Any?){}[0]
    final fun value(kotlin/Boolean): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.Boolean){}[0]
    final fun value(kotlin/Double): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.Double){}[0]
    final fun value(kotlin/Int): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.Int){}[0]
    final fun value(kotlin/Long): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.Long){}[0]
    final fun value(kotlin/String): com.apollographql.apollo3.api.json/MapJsonWriter // com.apollographql.apollo3.api.json/MapJsonWriter.value|value(kotlin.String){}[0]
    final val path // com.apollographql.apollo3.api.json/MapJsonWriter.path|{}path[0]
        final fun <get-path>(): kotlin/String // com.apollographql.apollo3.api.json/MapJsonWriter.path.<get-path>|<get-path>(){}[0]
}
final class com.apollographql.apollo3.api/BLabel : com.apollographql.apollo3.api/BTerm { // com.apollographql.apollo3.api/BLabel|null[0]
    constructor <init>(kotlin/String?) // com.apollographql.apollo3.api/BLabel.<init>|<init>(kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.apollographql.apollo3.api/BLabel.component1|component1(){}[0]
    final fun copy(kotlin/String? = ...): com.apollographql.apollo3.api/BLabel // com.apollographql.apollo3.api/BLabel.copy|copy(kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BLabel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BLabel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/BLabel.toString|toString(){}[0]
    final val label // com.apollographql.apollo3.api/BLabel.label|{}label[0]
        final fun <get-label>(): kotlin/String? // com.apollographql.apollo3.api/BLabel.label.<get-label>|<get-label>(){}[0]
}
final class com.apollographql.apollo3.api/BPossibleTypes : com.apollographql.apollo3.api/BTerm { // com.apollographql.apollo3.api/BPossibleTypes|null[0]
    constructor <init>(kotlin.collections/Set<kotlin/String>) // com.apollographql.apollo3.api/BPossibleTypes.<init>|<init>(kotlin.collections.Set<kotlin.String>){}[0]
    constructor <init>(kotlin/Array<out kotlin/String>...) // com.apollographql.apollo3.api/BPossibleTypes.<init>|<init>(kotlin.Array<out|kotlin.String>...){}[0]
    final fun component1(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo3.api/BPossibleTypes.component1|component1(){}[0]
    final fun copy(kotlin.collections/Set<kotlin/String> = ...): com.apollographql.apollo3.api/BPossibleTypes // com.apollographql.apollo3.api/BPossibleTypes.copy|copy(kotlin.collections.Set<kotlin.String>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BPossibleTypes.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BPossibleTypes.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/BPossibleTypes.toString|toString(){}[0]
    final val possibleTypes // com.apollographql.apollo3.api/BPossibleTypes.possibleTypes|{}possibleTypes[0]
        final fun <get-possibleTypes>(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo3.api/BPossibleTypes.possibleTypes.<get-possibleTypes>|<get-possibleTypes>(){}[0]
}
final class com.apollographql.apollo3.api/BVariable : com.apollographql.apollo3.api/BTerm { // com.apollographql.apollo3.api/BVariable|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api/BVariable.<init>|<init>(kotlin.String){}[0]
    final fun component1(): kotlin/String // com.apollographql.apollo3.api/BVariable.component1|component1(){}[0]
    final fun copy(kotlin/String = ...): com.apollographql.apollo3.api/BVariable // com.apollographql.apollo3.api/BVariable.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BVariable.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BVariable.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/BVariable.toString|toString(){}[0]
    final val name // com.apollographql.apollo3.api/BVariable.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/BVariable.name.<get-name>|<get-name>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledArgument { // com.apollographql.apollo3.api/CompiledArgument|null[0]
    final class Builder { // com.apollographql.apollo3.api/CompiledArgument.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/CompiledArgumentDefinition) // com.apollographql.apollo3.api/CompiledArgument.Builder.<init>|<init>(com.apollographql.apollo3.api.CompiledArgumentDefinition){}[0]
        final fun build(): com.apollographql.apollo3.api/CompiledArgument // com.apollographql.apollo3.api/CompiledArgument.Builder.build|build(){}[0]
        final fun value(kotlin/Any?): com.apollographql.apollo3.api/CompiledArgument.Builder // com.apollographql.apollo3.api/CompiledArgument.Builder.value|value(kotlin.Any?){}[0]
    }
    final val definition // com.apollographql.apollo3.api/CompiledArgument.definition|{}definition[0]
        final fun <get-definition>(): com.apollographql.apollo3.api/CompiledArgumentDefinition // com.apollographql.apollo3.api/CompiledArgument.definition.<get-definition>|<get-definition>(){}[0]
    final val isKey // com.apollographql.apollo3.api/CompiledArgument.isKey|{}isKey[0]
        final fun <get-isKey>(): kotlin/Boolean // com.apollographql.apollo3.api/CompiledArgument.isKey.<get-isKey>|<get-isKey>(){}[0]
    final val name // com.apollographql.apollo3.api/CompiledArgument.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledArgument.name.<get-name>|<get-name>(){}[0]
    final val value // com.apollographql.apollo3.api/CompiledArgument.value|{}value[0]
        final fun <get-value>(): com.apollographql.apollo3.api/Optional<kotlin/Any?> // com.apollographql.apollo3.api/CompiledArgument.value.<get-value>|<get-value>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledArgumentDefinition { // com.apollographql.apollo3.api/CompiledArgumentDefinition|null[0]
    final class Builder { // com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/CompiledArgumentDefinition) // com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder.<init>|<init>(com.apollographql.apollo3.api.CompiledArgumentDefinition){}[0]
        constructor <init>(kotlin/String) // com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder.<init>|<init>(kotlin.String){}[0]
        final fun build(): com.apollographql.apollo3.api/CompiledArgumentDefinition // com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder.build|build(){}[0]
        final fun isKey(kotlin/Boolean): com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder // com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder.isKey|isKey(kotlin.Boolean){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api/CompiledArgumentDefinition.Builder // com.apollographql.apollo3.api/CompiledArgumentDefinition.newBuilder|newBuilder(){}[0]
    final val isKey // com.apollographql.apollo3.api/CompiledArgumentDefinition.isKey|{}isKey[0]
        final fun <get-isKey>(): kotlin/Boolean // com.apollographql.apollo3.api/CompiledArgumentDefinition.isKey.<get-isKey>|<get-isKey>(){}[0]
    final val name // com.apollographql.apollo3.api/CompiledArgumentDefinition.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledArgumentDefinition.name.<get-name>|<get-name>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledCondition { // com.apollographql.apollo3.api/CompiledCondition|null[0]
    constructor <init>(kotlin/String, kotlin/Boolean) // com.apollographql.apollo3.api/CompiledCondition.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]
    final fun component1(): kotlin/String // com.apollographql.apollo3.api/CompiledCondition.component1|component1(){}[0]
    final fun component2(): kotlin/Boolean // com.apollographql.apollo3.api/CompiledCondition.component2|component2(){}[0]
    final fun copy(kotlin/String = ..., kotlin/Boolean = ...): com.apollographql.apollo3.api/CompiledCondition // com.apollographql.apollo3.api/CompiledCondition.copy|copy(kotlin.String;kotlin.Boolean){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/CompiledCondition.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/CompiledCondition.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/CompiledCondition.toString|toString(){}[0]
    final val inverted // com.apollographql.apollo3.api/CompiledCondition.inverted|{}inverted[0]
        final fun <get-inverted>(): kotlin/Boolean // com.apollographql.apollo3.api/CompiledCondition.inverted.<get-inverted>|<get-inverted>(){}[0]
    final val name // com.apollographql.apollo3.api/CompiledCondition.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledCondition.name.<get-name>|<get-name>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledField : com.apollographql.apollo3.api/CompiledSelection { // com.apollographql.apollo3.api/CompiledField|null[0]
    final class Builder { // com.apollographql.apollo3.api/CompiledField.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/CompiledField) // com.apollographql.apollo3.api/CompiledField.Builder.<init>|<init>(com.apollographql.apollo3.api.CompiledField){}[0]
        constructor <init>(kotlin/String, com.apollographql.apollo3.api/CompiledType) // com.apollographql.apollo3.api/CompiledField.Builder.<init>|<init>(kotlin.String;com.apollographql.apollo3.api.CompiledType){}[0]
        final fun alias(kotlin/String?): com.apollographql.apollo3.api/CompiledField.Builder // com.apollographql.apollo3.api/CompiledField.Builder.alias|alias(kotlin.String?){}[0]
        final fun arguments(kotlin.collections/List<com.apollographql.apollo3.api/CompiledArgument>): com.apollographql.apollo3.api/CompiledField.Builder // com.apollographql.apollo3.api/CompiledField.Builder.arguments|arguments(kotlin.collections.List<com.apollographql.apollo3.api.CompiledArgument>){}[0]
        final fun build(): com.apollographql.apollo3.api/CompiledField // com.apollographql.apollo3.api/CompiledField.Builder.build|build(){}[0]
        final fun condition(kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition>): com.apollographql.apollo3.api/CompiledField.Builder // com.apollographql.apollo3.api/CompiledField.Builder.condition|condition(kotlin.collections.List<com.apollographql.apollo3.api.CompiledCondition>){}[0]
        final fun selections(kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection>): com.apollographql.apollo3.api/CompiledField.Builder // com.apollographql.apollo3.api/CompiledField.Builder.selections|selections(kotlin.collections.List<com.apollographql.apollo3.api.CompiledSelection>){}[0]
        final val name // com.apollographql.apollo3.api/CompiledField.Builder.name|{}name[0]
            final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledField.Builder.name.<get-name>|<get-name>(){}[0]
        final val type // com.apollographql.apollo3.api/CompiledField.Builder.type|{}type[0]
            final fun <get-type>(): com.apollographql.apollo3.api/CompiledType // com.apollographql.apollo3.api/CompiledField.Builder.type.<get-type>|<get-type>(){}[0]
    }
    final fun argumentValue(kotlin/String, com.apollographql.apollo3.api/Executable.Variables): com.apollographql.apollo3.api/Optional<kotlin/Any?> // com.apollographql.apollo3.api/CompiledField.argumentValue|argumentValue(kotlin.String;com.apollographql.apollo3.api.Executable.Variables){}[0]
    final fun nameWithArguments(com.apollographql.apollo3.api/Executable.Variables): kotlin/String // com.apollographql.apollo3.api/CompiledField.nameWithArguments|nameWithArguments(com.apollographql.apollo3.api.Executable.Variables){}[0]
    final fun newBuilder(): com.apollographql.apollo3.api/CompiledField.Builder // com.apollographql.apollo3.api/CompiledField.newBuilder|newBuilder(){}[0]
    final fun resolveArgument(kotlin/String, com.apollographql.apollo3.api/Executable.Variables): kotlin/Any? // com.apollographql.apollo3.api/CompiledField.resolveArgument|resolveArgument(kotlin.String;com.apollographql.apollo3.api.Executable.Variables){}[0]
    final val alias // com.apollographql.apollo3.api/CompiledField.alias|{}alias[0]
        final fun <get-alias>(): kotlin/String? // com.apollographql.apollo3.api/CompiledField.alias.<get-alias>|<get-alias>(){}[0]
    final val arguments // com.apollographql.apollo3.api/CompiledField.arguments|{}arguments[0]
        final fun <get-arguments>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledArgument> // com.apollographql.apollo3.api/CompiledField.arguments.<get-arguments>|<get-arguments>(){}[0]
    final val condition // com.apollographql.apollo3.api/CompiledField.condition|{}condition[0]
        final fun <get-condition>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition> // com.apollographql.apollo3.api/CompiledField.condition.<get-condition>|<get-condition>(){}[0]
    final val name // com.apollographql.apollo3.api/CompiledField.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledField.name.<get-name>|<get-name>(){}[0]
    final val responseName // com.apollographql.apollo3.api/CompiledField.responseName|{}responseName[0]
        final fun <get-responseName>(): kotlin/String // com.apollographql.apollo3.api/CompiledField.responseName.<get-responseName>|<get-responseName>(){}[0]
    final val selections // com.apollographql.apollo3.api/CompiledField.selections|{}selections[0]
        final fun <get-selections>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection> // com.apollographql.apollo3.api/CompiledField.selections.<get-selections>|<get-selections>(){}[0]
    final val type // com.apollographql.apollo3.api/CompiledField.type|{}type[0]
        final fun <get-type>(): com.apollographql.apollo3.api/CompiledType // com.apollographql.apollo3.api/CompiledField.type.<get-type>|<get-type>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledFragment : com.apollographql.apollo3.api/CompiledSelection { // com.apollographql.apollo3.api/CompiledFragment|null[0]
    final class Builder { // com.apollographql.apollo3.api/CompiledFragment.Builder|null[0]
        constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // com.apollographql.apollo3.api/CompiledFragment.Builder.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
        final fun build(): com.apollographql.apollo3.api/CompiledFragment // com.apollographql.apollo3.api/CompiledFragment.Builder.build|build(){}[0]
        final fun condition(kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition>): com.apollographql.apollo3.api/CompiledFragment.Builder // com.apollographql.apollo3.api/CompiledFragment.Builder.condition|condition(kotlin.collections.List<com.apollographql.apollo3.api.CompiledCondition>){}[0]
        final fun selections(kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection>): com.apollographql.apollo3.api/CompiledFragment.Builder // com.apollographql.apollo3.api/CompiledFragment.Builder.selections|selections(kotlin.collections.List<com.apollographql.apollo3.api.CompiledSelection>){}[0]
        final val possibleTypes // com.apollographql.apollo3.api/CompiledFragment.Builder.possibleTypes|{}possibleTypes[0]
            final fun <get-possibleTypes>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/CompiledFragment.Builder.possibleTypes.<get-possibleTypes>|<get-possibleTypes>(){}[0]
        final val typeCondition // com.apollographql.apollo3.api/CompiledFragment.Builder.typeCondition|{}typeCondition[0]
            final fun <get-typeCondition>(): kotlin/String // com.apollographql.apollo3.api/CompiledFragment.Builder.typeCondition.<get-typeCondition>|<get-typeCondition>(){}[0]
        final var condition // com.apollographql.apollo3.api/CompiledFragment.Builder.condition|{}condition[0]
            final fun <get-condition>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition> // com.apollographql.apollo3.api/CompiledFragment.Builder.condition.<get-condition>|<get-condition>(){}[0]
            final fun <set-condition>(kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition>) // com.apollographql.apollo3.api/CompiledFragment.Builder.condition.<set-condition>|<set-condition>(kotlin.collections.List<com.apollographql.apollo3.api.CompiledCondition>){}[0]
        final var selections // com.apollographql.apollo3.api/CompiledFragment.Builder.selections|{}selections[0]
            final fun <get-selections>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection> // com.apollographql.apollo3.api/CompiledFragment.Builder.selections.<get-selections>|<get-selections>(){}[0]
            final fun <set-selections>(kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection>) // com.apollographql.apollo3.api/CompiledFragment.Builder.selections.<set-selections>|<set-selections>(kotlin.collections.List<com.apollographql.apollo3.api.CompiledSelection>){}[0]
    }
    final val condition // com.apollographql.apollo3.api/CompiledFragment.condition|{}condition[0]
        final fun <get-condition>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledCondition> // com.apollographql.apollo3.api/CompiledFragment.condition.<get-condition>|<get-condition>(){}[0]
    final val possibleTypes // com.apollographql.apollo3.api/CompiledFragment.possibleTypes|{}possibleTypes[0]
        final fun <get-possibleTypes>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/CompiledFragment.possibleTypes.<get-possibleTypes>|<get-possibleTypes>(){}[0]
    final val selections // com.apollographql.apollo3.api/CompiledFragment.selections|{}selections[0]
        final fun <get-selections>(): kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection> // com.apollographql.apollo3.api/CompiledFragment.selections.<get-selections>|<get-selections>(){}[0]
    final val typeCondition // com.apollographql.apollo3.api/CompiledFragment.typeCondition|{}typeCondition[0]
        final fun <get-typeCondition>(): kotlin/String // com.apollographql.apollo3.api/CompiledFragment.typeCondition.<get-typeCondition>|<get-typeCondition>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledListType : com.apollographql.apollo3.api/CompiledType { // com.apollographql.apollo3.api/CompiledListType|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledType) // com.apollographql.apollo3.api/CompiledListType.<init>|<init>(com.apollographql.apollo3.api.CompiledType){}[0]
    final fun leafType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledListType.leafType|leafType(){}[0]
    final fun rawType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledListType.rawType|rawType(){}[0]
    final val ofType // com.apollographql.apollo3.api/CompiledListType.ofType|{}ofType[0]
        final fun <get-ofType>(): com.apollographql.apollo3.api/CompiledType // com.apollographql.apollo3.api/CompiledListType.ofType.<get-ofType>|<get-ofType>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledNotNullType : com.apollographql.apollo3.api/CompiledType { // com.apollographql.apollo3.api/CompiledNotNullType|null[0]
    constructor <init>(com.apollographql.apollo3.api/CompiledType) // com.apollographql.apollo3.api/CompiledNotNullType.<init>|<init>(com.apollographql.apollo3.api.CompiledType){}[0]
    final fun leafType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledNotNullType.leafType|leafType(){}[0]
    final fun rawType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledNotNullType.rawType|rawType(){}[0]
    final val ofType // com.apollographql.apollo3.api/CompiledNotNullType.ofType|{}ofType[0]
        final fun <get-ofType>(): com.apollographql.apollo3.api/CompiledType // com.apollographql.apollo3.api/CompiledNotNullType.ofType.<get-ofType>|<get-ofType>(){}[0]
}
final class com.apollographql.apollo3.api/CompiledVariable { // com.apollographql.apollo3.api/CompiledVariable|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api/CompiledVariable.<init>|<init>(kotlin.String){}[0]
    final val name // com.apollographql.apollo3.api/CompiledVariable.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledVariable.name.<get-name>|<get-name>(){}[0]
}
final class com.apollographql.apollo3.api/CustomScalarAdapters : com.apollographql.apollo3.api/ExecutionContext.Element { // com.apollographql.apollo3.api/CustomScalarAdapters|null[0]
    final class Builder { // com.apollographql.apollo3.api/CustomScalarAdapters.Builder|null[0]
        constructor <init>() // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.<init>|<init>(){}[0]
        final fun <#A2: kotlin/Any?> add(com.apollographql.apollo3.api/CustomScalarType, com.apollographql.apollo3.api/Adapter<#A2>): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.add|add(com.apollographql.apollo3.api.CustomScalarType;com.apollographql.apollo3.api.Adapter<0:0>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> add(kotlin/String, com.apollographql.apollo3.api/Adapter<#A2>): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.add|add(kotlin.String;com.apollographql.apollo3.api.Adapter<0:0>){0§<kotlin.Any?>}[0]
        final fun addAll(com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.addAll|addAll(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
        final fun build(): com.apollographql.apollo3.api/CustomScalarAdapters // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.build|build(){}[0]
        final fun clear() // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.clear|clear(){}[0]
        final fun deferredFragmentIdentifiers(kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>?): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.deferredFragmentIdentifiers|deferredFragmentIdentifiers(kotlin.collections.Set<com.apollographql.apollo3.api.DeferredFragmentIdentifier>?){}[0]
        final fun errors(kotlin.collections/List<com.apollographql.apollo3.api/Error>?): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.errors|errors(kotlin.collections.List<com.apollographql.apollo3.api.Error>?){}[0]
        final fun falseVariables(kotlin.collections/Set<kotlin/String>?): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.Builder.falseVariables|falseVariables(kotlin.collections.Set<kotlin.String>?){}[0]
    }
    final fun <#A1: kotlin/Any> adapterFor(kotlin/String): com.apollographql.apollo3.api/Adapter<#A1>? // com.apollographql.apollo3.api/CustomScalarAdapters.adapterFor|adapterFor(kotlin.String){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> responseAdapterFor(com.apollographql.apollo3.api/CustomScalarType): com.apollographql.apollo3.api/Adapter<#A1> // com.apollographql.apollo3.api/CustomScalarAdapters.responseAdapterFor|responseAdapterFor(com.apollographql.apollo3.api.CustomScalarType){0§<kotlin.Any>}[0]
    final fun newBuilder(): com.apollographql.apollo3.api/CustomScalarAdapters.Builder // com.apollographql.apollo3.api/CustomScalarAdapters.newBuilder|newBuilder(){}[0]
    final object Key : com.apollographql.apollo3.api/ExecutionContext.Key<com.apollographql.apollo3.api/CustomScalarAdapters> { // com.apollographql.apollo3.api/CustomScalarAdapters.Key|null[0]
        final val Empty // com.apollographql.apollo3.api/CustomScalarAdapters.Key.Empty|{}Empty[0]
            final fun <get-Empty>(): com.apollographql.apollo3.api/CustomScalarAdapters // com.apollographql.apollo3.api/CustomScalarAdapters.Key.Empty.<get-Empty>|<get-Empty>(){}[0]
    }
    final val deferredFragmentIdentifiers // com.apollographql.apollo3.api/CustomScalarAdapters.deferredFragmentIdentifiers|{}deferredFragmentIdentifiers[0]
        final fun <get-deferredFragmentIdentifiers>(): kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>? // com.apollographql.apollo3.api/CustomScalarAdapters.deferredFragmentIdentifiers.<get-deferredFragmentIdentifiers>|<get-deferredFragmentIdentifiers>(){}[0]
    final val errors // com.apollographql.apollo3.api/CustomScalarAdapters.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo3.api/Error>? // com.apollographql.apollo3.api/CustomScalarAdapters.errors.<get-errors>|<get-errors>(){}[0]
    final val falseVariables // com.apollographql.apollo3.api/CustomScalarAdapters.falseVariables|{}falseVariables[0]
        final fun <get-falseVariables>(): kotlin.collections/Set<kotlin/String>? // com.apollographql.apollo3.api/CustomScalarAdapters.falseVariables.<get-falseVariables>|<get-falseVariables>(){}[0]
    final val key // com.apollographql.apollo3.api/CustomScalarAdapters.key|{}key[0]
        final fun <get-key>(): com.apollographql.apollo3.api/ExecutionContext.Key<*> // com.apollographql.apollo3.api/CustomScalarAdapters.key.<get-key>|<get-key>(){}[0]
}
final class com.apollographql.apollo3.api/CustomScalarType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/CustomScalarType|null[0]
    constructor <init>(kotlin/String, kotlin/String) // com.apollographql.apollo3.api/CustomScalarType.<init>|<init>(kotlin.String;kotlin.String){}[0]
    final val className // com.apollographql.apollo3.api/CustomScalarType.className|{}className[0]
        final fun <get-className>(): kotlin/String // com.apollographql.apollo3.api/CustomScalarType.className.<get-className>|<get-className>(){}[0]
}
final class com.apollographql.apollo3.api/DefaultUpload : com.apollographql.apollo3.api/Upload { // com.apollographql.apollo3.api/DefaultUpload|null[0]
    final class Builder { // com.apollographql.apollo3.api/DefaultUpload.Builder|null[0]
        constructor <init>() // com.apollographql.apollo3.api/DefaultUpload.Builder.<init>|<init>(){}[0]
        final fun build(): com.apollographql.apollo3.api/DefaultUpload // com.apollographql.apollo3.api/DefaultUpload.Builder.build|build(){}[0]
        final fun content(kotlin/ByteArray): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.content|content(kotlin.ByteArray){}[0]
        final fun content(kotlin/Function1<okio/BufferedSink, kotlin/Unit>): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.content|content(kotlin.Function1<okio.BufferedSink,kotlin.Unit>){}[0]
        final fun content(kotlin/String): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.content|content(kotlin.String){}[0]
        final fun content(okio/ByteString): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.content|content(okio.ByteString){}[0]
        final fun contentLength(kotlin/Long): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.contentLength|contentLength(kotlin.Long){}[0]
        final fun contentType(kotlin/String): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.contentType|contentType(kotlin.String){}[0]
        final fun fileName(kotlin/String): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.Builder.fileName|fileName(kotlin.String){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api/DefaultUpload.Builder // com.apollographql.apollo3.api/DefaultUpload.newBuilder|newBuilder(){}[0]
    final fun writeTo(okio/BufferedSink) // com.apollographql.apollo3.api/DefaultUpload.writeTo|writeTo(okio.BufferedSink){}[0]
    final val contentLength // com.apollographql.apollo3.api/DefaultUpload.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // com.apollographql.apollo3.api/DefaultUpload.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // com.apollographql.apollo3.api/DefaultUpload.contentType|{}contentType[0]
        final fun <get-contentType>(): kotlin/String // com.apollographql.apollo3.api/DefaultUpload.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val fileName // com.apollographql.apollo3.api/DefaultUpload.fileName|{}fileName[0]
        final fun <get-fileName>(): kotlin/String? // com.apollographql.apollo3.api/DefaultUpload.fileName.<get-fileName>|<get-fileName>(){}[0]
}
final class com.apollographql.apollo3.api/DeferredFragmentIdentifier { // com.apollographql.apollo3.api/DeferredFragmentIdentifier|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Any>, kotlin/String?) // com.apollographql.apollo3.api/DeferredFragmentIdentifier.<init>|<init>(kotlin.collections.List<kotlin.Any>;kotlin.String?){}[0]
    final fun component1(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api/DeferredFragmentIdentifier.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.apollographql.apollo3.api/DeferredFragmentIdentifier.component2|component2(){}[0]
    final fun copy(kotlin.collections/List<kotlin/Any> = ..., kotlin/String? = ...): com.apollographql.apollo3.api/DeferredFragmentIdentifier // com.apollographql.apollo3.api/DeferredFragmentIdentifier.copy|copy(kotlin.collections.List<kotlin.Any>;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/DeferredFragmentIdentifier.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/DeferredFragmentIdentifier.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/DeferredFragmentIdentifier.toString|toString(){}[0]
    final val label // com.apollographql.apollo3.api/DeferredFragmentIdentifier.label|{}label[0]
        final fun <get-label>(): kotlin/String? // com.apollographql.apollo3.api/DeferredFragmentIdentifier.label.<get-label>|<get-label>(){}[0]
    final val path // com.apollographql.apollo3.api/DeferredFragmentIdentifier.path|{}path[0]
        final fun <get-path>(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api/DeferredFragmentIdentifier.path.<get-path>|<get-path>(){}[0]
}
final class com.apollographql.apollo3.api/EnumType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/EnumType|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // com.apollographql.apollo3.api/EnumType.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
    final val values // com.apollographql.apollo3.api/EnumType.values|{}values[0]
        final fun <get-values>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/EnumType.values.<get-values>|<get-values>(){}[0]
}
final class com.apollographql.apollo3.api/Error { // com.apollographql.apollo3.api/Error|null[0]
    constructor <init>(kotlin/String, kotlin.collections/List<com.apollographql.apollo3.api/Error.Location>?, kotlin.collections/List<kotlin/Any>?, kotlin.collections/Map<kotlin/String, kotlin/Any?>?, kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.apollo3.api/Error.<init>|<init>(kotlin.String;kotlin.collections.List<com.apollographql.apollo3.api.Error.Location>?;kotlin.collections.List<kotlin.Any>?;kotlin.collections.Map<kotlin.String,kotlin.Any?>?;kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
    final class Builder { // com.apollographql.apollo3.api/Error.Builder|null[0]
        constructor <init>(kotlin/String) // com.apollographql.apollo3.api/Error.Builder.<init>|<init>(kotlin.String){}[0]
        final fun build(): com.apollographql.apollo3.api/Error // com.apollographql.apollo3.api/Error.Builder.build|build(){}[0]
        final fun locations(kotlin.collections/List<com.apollographql.apollo3.api/Error.Location>): com.apollographql.apollo3.api/Error.Builder // com.apollographql.apollo3.api/Error.Builder.locations|locations(kotlin.collections.List<com.apollographql.apollo3.api.Error.Location>){}[0]
        final fun path(kotlin.collections/List<kotlin/Any>): com.apollographql.apollo3.api/Error.Builder // com.apollographql.apollo3.api/Error.Builder.path|path(kotlin.collections.List<kotlin.Any>){}[0]
        final fun putExtension(kotlin/String, kotlin/Any?): com.apollographql.apollo3.api/Error.Builder // com.apollographql.apollo3.api/Error.Builder.putExtension|putExtension(kotlin.String;kotlin.Any?){}[0]
        final val extensions // com.apollographql.apollo3.api/Error.Builder.extensions|{}extensions[0]
            final fun <get-extensions>(): kotlin.collections/MutableMap<kotlin/String, kotlin/Any?> // com.apollographql.apollo3.api/Error.Builder.extensions.<get-extensions>|<get-extensions>(){}[0]
        final val message // com.apollographql.apollo3.api/Error.Builder.message|{}message[0]
            final fun <get-message>(): kotlin/String // com.apollographql.apollo3.api/Error.Builder.message.<get-message>|<get-message>(){}[0]
        final var locations // com.apollographql.apollo3.api/Error.Builder.locations|{}locations[0]
            final fun <get-locations>(): kotlin.collections/List<com.apollographql.apollo3.api/Error.Location>? // com.apollographql.apollo3.api/Error.Builder.locations.<get-locations>|<get-locations>(){}[0]
            final fun <set-locations>(kotlin.collections/List<com.apollographql.apollo3.api/Error.Location>?) // com.apollographql.apollo3.api/Error.Builder.locations.<set-locations>|<set-locations>(kotlin.collections.List<com.apollographql.apollo3.api.Error.Location>?){}[0]
        final var path // com.apollographql.apollo3.api/Error.Builder.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/Any>? // com.apollographql.apollo3.api/Error.Builder.path.<get-path>|<get-path>(){}[0]
            final fun <set-path>(kotlin.collections/List<kotlin/Any>?) // com.apollographql.apollo3.api/Error.Builder.path.<set-path>|<set-path>(kotlin.collections.List<kotlin.Any>?){}[0]
    }
    final class Location { // com.apollographql.apollo3.api/Error.Location|null[0]
        constructor <init>(kotlin/Int, kotlin/Int) // com.apollographql.apollo3.api/Error.Location.<init>|<init>(kotlin.Int;kotlin.Int){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/Error.Location.toString|toString(){}[0]
        final val column // com.apollographql.apollo3.api/Error.Location.column|{}column[0]
            final fun <get-column>(): kotlin/Int // com.apollographql.apollo3.api/Error.Location.column.<get-column>|<get-column>(){}[0]
        final val line // com.apollographql.apollo3.api/Error.Location.line|{}line[0]
            final fun <get-line>(): kotlin/Int // com.apollographql.apollo3.api/Error.Location.line.<get-line>|<get-line>(){}[0]
    }
    final fun toString(): kotlin/String // com.apollographql.apollo3.api/Error.toString|toString(){}[0]
    final val extensions // com.apollographql.apollo3.api/Error.extensions|{}extensions[0]
        final fun <get-extensions>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.apollo3.api/Error.extensions.<get-extensions>|<get-extensions>(){}[0]
    final val locations // com.apollographql.apollo3.api/Error.locations|{}locations[0]
        final fun <get-locations>(): kotlin.collections/List<com.apollographql.apollo3.api/Error.Location>? // com.apollographql.apollo3.api/Error.locations.<get-locations>|<get-locations>(){}[0]
    final val message // com.apollographql.apollo3.api/Error.message|{}message[0]
        final fun <get-message>(): kotlin/String // com.apollographql.apollo3.api/Error.message.<get-message>|<get-message>(){}[0]
    final val nonStandardFields // com.apollographql.apollo3.api/Error.nonStandardFields|{}nonStandardFields[0]
        final fun <get-nonStandardFields>(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.apollo3.api/Error.nonStandardFields.<get-nonStandardFields>|<get-nonStandardFields>(){}[0]
    final val path // com.apollographql.apollo3.api/Error.path|{}path[0]
        final fun <get-path>(): kotlin.collections/List<kotlin/Any>? // com.apollographql.apollo3.api/Error.path.<get-path>|<get-path>(){}[0]
}
final class com.apollographql.apollo3.api/FakeResolverContext { // com.apollographql.apollo3.api/FakeResolverContext|null[0]
    final val id // com.apollographql.apollo3.api/FakeResolverContext.id|{}id[0]
        final fun <get-id>(): kotlin/String // com.apollographql.apollo3.api/FakeResolverContext.id.<get-id>|<get-id>(){}[0]
    final val mergedField // com.apollographql.apollo3.api/FakeResolverContext.mergedField|{}mergedField[0]
        final fun <get-mergedField>(): com.apollographql.apollo3.api/CompiledField // com.apollographql.apollo3.api/FakeResolverContext.mergedField.<get-mergedField>|<get-mergedField>(){}[0]
    final val path // com.apollographql.apollo3.api/FakeResolverContext.path|{}path[0]
        final fun <get-path>(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api/FakeResolverContext.path.<get-path>|<get-path>(){}[0]
}
final class com.apollographql.apollo3.api/InputObjectType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/InputObjectType|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api/InputObjectType.<init>|<init>(kotlin.String){}[0]
}
final class com.apollographql.apollo3.api/InterfaceType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/InterfaceType|null[0]
    final class Builder { // com.apollographql.apollo3.api/InterfaceType.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/InterfaceType) // com.apollographql.apollo3.api/InterfaceType.Builder.<init>|<init>(com.apollographql.apollo3.api.InterfaceType){}[0]
        constructor <init>(kotlin/String) // com.apollographql.apollo3.api/InterfaceType.Builder.<init>|<init>(kotlin.String){}[0]
        final fun build(): com.apollographql.apollo3.api/InterfaceType // com.apollographql.apollo3.api/InterfaceType.Builder.build|build(){}[0]
        final fun embeddedFields(kotlin.collections/List<kotlin/String>): com.apollographql.apollo3.api/InterfaceType.Builder // com.apollographql.apollo3.api/InterfaceType.Builder.embeddedFields|embeddedFields(kotlin.collections.List<kotlin.String>){}[0]
        final fun interfaces(kotlin.collections/List<com.apollographql.apollo3.api/InterfaceType>): com.apollographql.apollo3.api/InterfaceType.Builder // com.apollographql.apollo3.api/InterfaceType.Builder.interfaces|interfaces(kotlin.collections.List<com.apollographql.apollo3.api.InterfaceType>){}[0]
        final fun keyFields(kotlin.collections/List<kotlin/String>): com.apollographql.apollo3.api/InterfaceType.Builder // com.apollographql.apollo3.api/InterfaceType.Builder.keyFields|keyFields(kotlin.collections.List<kotlin.String>){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api/InterfaceType.Builder // com.apollographql.apollo3.api/InterfaceType.newBuilder|newBuilder(){}[0]
    final val embeddedFields // com.apollographql.apollo3.api/InterfaceType.embeddedFields|{}embeddedFields[0]
        final fun <get-embeddedFields>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/InterfaceType.embeddedFields.<get-embeddedFields>|<get-embeddedFields>(){}[0]
    final val implements // com.apollographql.apollo3.api/InterfaceType.implements|{}implements[0]
        final fun <get-implements>(): kotlin.collections/List<com.apollographql.apollo3.api/InterfaceType> // com.apollographql.apollo3.api/InterfaceType.implements.<get-implements>|<get-implements>(){}[0]
    final val keyFields // com.apollographql.apollo3.api/InterfaceType.keyFields|{}keyFields[0]
        final fun <get-keyFields>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/InterfaceType.keyFields.<get-keyFields>|<get-keyFields>(){}[0]
}
final class com.apollographql.apollo3.api/ObjectType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/ObjectType|null[0]
    final class Builder { // com.apollographql.apollo3.api/ObjectType.Builder|null[0]
        constructor <init>(com.apollographql.apollo3.api/ObjectType) // com.apollographql.apollo3.api/ObjectType.Builder.<init>|<init>(com.apollographql.apollo3.api.ObjectType){}[0]
        constructor <init>(kotlin/String) // com.apollographql.apollo3.api/ObjectType.Builder.<init>|<init>(kotlin.String){}[0]
        final fun build(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/ObjectType.Builder.build|build(){}[0]
        final fun embeddedFields(kotlin.collections/List<kotlin/String>): com.apollographql.apollo3.api/ObjectType.Builder // com.apollographql.apollo3.api/ObjectType.Builder.embeddedFields|embeddedFields(kotlin.collections.List<kotlin.String>){}[0]
        final fun interfaces(kotlin.collections/List<com.apollographql.apollo3.api/InterfaceType>): com.apollographql.apollo3.api/ObjectType.Builder // com.apollographql.apollo3.api/ObjectType.Builder.interfaces|interfaces(kotlin.collections.List<com.apollographql.apollo3.api.InterfaceType>){}[0]
        final fun keyFields(kotlin.collections/List<kotlin/String>): com.apollographql.apollo3.api/ObjectType.Builder // com.apollographql.apollo3.api/ObjectType.Builder.keyFields|keyFields(kotlin.collections.List<kotlin.String>){}[0]
    }
    final fun newBuilder(): com.apollographql.apollo3.api/ObjectType.Builder // com.apollographql.apollo3.api/ObjectType.newBuilder|newBuilder(){}[0]
    final val embeddedFields // com.apollographql.apollo3.api/ObjectType.embeddedFields|{}embeddedFields[0]
        final fun <get-embeddedFields>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/ObjectType.embeddedFields.<get-embeddedFields>|<get-embeddedFields>(){}[0]
    final val implements // com.apollographql.apollo3.api/ObjectType.implements|{}implements[0]
        final fun <get-implements>(): kotlin.collections/List<com.apollographql.apollo3.api/InterfaceType> // com.apollographql.apollo3.api/ObjectType.implements.<get-implements>|<get-implements>(){}[0]
    final val keyFields // com.apollographql.apollo3.api/ObjectType.keyFields|{}keyFields[0]
        final fun <get-keyFields>(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/ObjectType.keyFields.<get-keyFields>|<get-keyFields>(){}[0]
}
final class com.apollographql.apollo3.api/ScalarType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/ScalarType|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api/ScalarType.<init>|<init>(kotlin.String){}[0]
}
final class com.apollographql.apollo3.api/UnionType : com.apollographql.apollo3.api/CompiledNamedType { // com.apollographql.apollo3.api/UnionType|null[0]
    constructor <init>(kotlin/String, kotlin/Array<out com.apollographql.apollo3.api/ObjectType>...) // com.apollographql.apollo3.api/UnionType.<init>|<init>(kotlin.String;kotlin.Array<out|com.apollographql.apollo3.api.ObjectType>...){}[0]
    final val members // com.apollographql.apollo3.api/UnionType.members|{}members[0]
        final fun <get-members>(): kotlin/Array<out com.apollographql.apollo3.api/ObjectType> // com.apollographql.apollo3.api/UnionType.members.<get-members>|<get-members>(){}[0]
}
final class com.apollographql.apollo3.exception/ApolloCompositeException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloCompositeException|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Throwable>) // com.apollographql.apollo3.exception/ApolloCompositeException.<init>|<init>(kotlin.collections.List<kotlin.Throwable>){}[0]
    constructor <init>(kotlin/Throwable?, kotlin/Throwable?) // com.apollographql.apollo3.exception/ApolloCompositeException.<init>|<init>(kotlin.Throwable?;kotlin.Throwable?){}[0]
}
final class com.apollographql.apollo3.exception/ApolloGraphQLException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloGraphQLException|null[0]
    constructor <init>(com.apollographql.apollo3.api/Error) // com.apollographql.apollo3.exception/ApolloGraphQLException.<init>|<init>(com.apollographql.apollo3.api.Error){}[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo3.api/Error>) // com.apollographql.apollo3.exception/ApolloGraphQLException.<init>|<init>(kotlin.collections.List<com.apollographql.apollo3.api.Error>){}[0]
    final val error // com.apollographql.apollo3.exception/ApolloGraphQLException.error|{}error[0]
        final fun <get-error>(): com.apollographql.apollo3.api/Error // com.apollographql.apollo3.exception/ApolloGraphQLException.error.<get-error>|<get-error>(){}[0]
    final val errors // com.apollographql.apollo3.exception/ApolloGraphQLException.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo3.api/Error> // com.apollographql.apollo3.exception/ApolloGraphQLException.errors.<get-errors>|<get-errors>(){}[0]
}
final class com.apollographql.apollo3.exception/ApolloHttpException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloHttpException|null[0]
    constructor <init>(kotlin/Int, kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>, okio/BufferedSource?, kotlin/String, kotlin/Throwable? = ...) // com.apollographql.apollo3.exception/ApolloHttpException.<init>|<init>(kotlin.Int;kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>;okio.BufferedSource?;kotlin.String;kotlin.Throwable?){}[0]
    final val body // com.apollographql.apollo3.exception/ApolloHttpException.body|{}body[0]
        final fun <get-body>(): okio/BufferedSource? // com.apollographql.apollo3.exception/ApolloHttpException.body.<get-body>|<get-body>(){}[0]
    final val headers // com.apollographql.apollo3.exception/ApolloHttpException.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader> // com.apollographql.apollo3.exception/ApolloHttpException.headers.<get-headers>|<get-headers>(){}[0]
    final val statusCode // com.apollographql.apollo3.exception/ApolloHttpException.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): kotlin/Int // com.apollographql.apollo3.exception/ApolloHttpException.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
}
final class com.apollographql.apollo3.exception/ApolloNetworkException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloNetworkException|null[0]
    constructor <init>(kotlin/String? = ..., kotlin/Any? = ...) // com.apollographql.apollo3.exception/ApolloNetworkException.<init>|<init>(kotlin.String?;kotlin.Any?){}[0]
    final val platformCause // com.apollographql.apollo3.exception/ApolloNetworkException.platformCause|{}platformCause[0]
        final fun <get-platformCause>(): kotlin/Any? // com.apollographql.apollo3.exception/ApolloNetworkException.platformCause.<get-platformCause>|<get-platformCause>(){}[0]
}
final class com.apollographql.apollo3.exception/ApolloParseException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloParseException|null[0]
    constructor <init>(kotlin/String? = ..., kotlin/Throwable? = ...) // com.apollographql.apollo3.exception/ApolloParseException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
}
final class com.apollographql.apollo3.exception/ApolloWebSocketClosedException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/ApolloWebSocketClosedException|null[0]
    constructor <init>(kotlin/Int, kotlin/String? = ..., kotlin/Throwable? = ...) // com.apollographql.apollo3.exception/ApolloWebSocketClosedException.<init>|<init>(kotlin.Int;kotlin.String?;kotlin.Throwable?){}[0]
    final val code // com.apollographql.apollo3.exception/ApolloWebSocketClosedException.code|{}code[0]
        final fun <get-code>(): kotlin/Int // com.apollographql.apollo3.exception/ApolloWebSocketClosedException.code.<get-code>|<get-code>(){}[0]
    final val reason // com.apollographql.apollo3.exception/ApolloWebSocketClosedException.reason|{}reason[0]
        final fun <get-reason>(): kotlin/String? // com.apollographql.apollo3.exception/ApolloWebSocketClosedException.reason.<get-reason>|<get-reason>(){}[0]
}
final class com.apollographql.apollo3.exception/AutoPersistedQueriesNotSupported : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/AutoPersistedQueriesNotSupported|null[0]
    constructor <init>() // com.apollographql.apollo3.exception/AutoPersistedQueriesNotSupported.<init>|<init>(){}[0]
}
final class com.apollographql.apollo3.exception/CacheMissException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/CacheMissException|null[0]
    constructor <init>(kotlin/String, kotlin/String?) // com.apollographql.apollo3.exception/CacheMissException.<init>|<init>(kotlin.String;kotlin.String?){}[0]
    final object Companion // com.apollographql.apollo3.exception/CacheMissException.Companion|null[0]
    final val fieldName // com.apollographql.apollo3.exception/CacheMissException.fieldName|{}fieldName[0]
        final fun <get-fieldName>(): kotlin/String? // com.apollographql.apollo3.exception/CacheMissException.fieldName.<get-fieldName>|<get-fieldName>(){}[0]
    final val key // com.apollographql.apollo3.exception/CacheMissException.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.apollographql.apollo3.exception/CacheMissException.key.<get-key>|<get-key>(){}[0]
}
final class com.apollographql.apollo3.exception/DefaultApolloException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/DefaultApolloException|null[0]
    constructor <init>(kotlin/String? = ..., kotlin/Throwable? = ...) // com.apollographql.apollo3.exception/DefaultApolloException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
}
final class com.apollographql.apollo3.exception/HttpCacheMissException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/HttpCacheMissException|null[0]
    constructor <init>(kotlin/String, kotlin/Exception? = ...) // com.apollographql.apollo3.exception/HttpCacheMissException.<init>|<init>(kotlin.String;kotlin.Exception?){}[0]
}
final class com.apollographql.apollo3.exception/JsonDataException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/JsonDataException|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.exception/JsonDataException.<init>|<init>(kotlin.String){}[0]
}
final class com.apollographql.apollo3.exception/JsonEncodingException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/JsonEncodingException|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.exception/JsonEncodingException.<init>|<init>(kotlin.String){}[0]
}
final class com.apollographql.apollo3.exception/MissingValueException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/MissingValueException|null[0]
    constructor <init>() // com.apollographql.apollo3.exception/MissingValueException.<init>|<init>(){}[0]
}
final class com.apollographql.apollo3.exception/NoDataException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/NoDataException|null[0]
    constructor <init>(kotlin/Throwable?) // com.apollographql.apollo3.exception/NoDataException.<init>|<init>(kotlin.Throwable?){}[0]
}
final class com.apollographql.apollo3.exception/NullOrMissingField : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/NullOrMissingField|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.exception/NullOrMissingField.<init>|<init>(kotlin.String){}[0]
}
final class com.apollographql.apollo3.exception/RouterError : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/RouterError|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo3.api/Error>) // com.apollographql.apollo3.exception/RouterError.<init>|<init>(kotlin.collections.List<com.apollographql.apollo3.api.Error>){}[0]
    final val errors // com.apollographql.apollo3.exception/RouterError.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<com.apollographql.apollo3.api/Error> // com.apollographql.apollo3.exception/RouterError.errors.<get-errors>|<get-errors>(){}[0]
}
final class com.apollographql.apollo3.exception/SubscriptionConnectionException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/SubscriptionConnectionException|null[0]
    constructor <init>(kotlin/Any?) // com.apollographql.apollo3.exception/SubscriptionConnectionException.<init>|<init>(kotlin.Any?){}[0]
    final val payload // com.apollographql.apollo3.exception/SubscriptionConnectionException.payload|{}payload[0]
        final fun <get-payload>(): kotlin/Any? // com.apollographql.apollo3.exception/SubscriptionConnectionException.payload.<get-payload>|<get-payload>(){}[0]
}
final class com.apollographql.apollo3.exception/SubscriptionOperationException : com.apollographql.apollo3.exception/ApolloException { // com.apollographql.apollo3.exception/SubscriptionOperationException|null[0]
    constructor <init>(kotlin/String, kotlin/Any?) // com.apollographql.apollo3.exception/SubscriptionOperationException.<init>|<init>(kotlin.String;kotlin.Any?){}[0]
    final val payload // com.apollographql.apollo3.exception/SubscriptionOperationException.payload|{}payload[0]
        final fun <get-payload>(): kotlin/Any? // com.apollographql.apollo3.exception/SubscriptionOperationException.payload.<get-payload>|<get-payload>(){}[0]
}
final enum class com.apollographql.apollo3.api.http/HttpMethod : kotlin/Enum<com.apollographql.apollo3.api.http/HttpMethod> { // com.apollographql.apollo3.api.http/HttpMethod|null[0]
    enum entry Get // com.apollographql.apollo3.api.http/HttpMethod.Get|null[0]
    enum entry Post // com.apollographql.apollo3.api.http/HttpMethod.Post|null[0]
    final fun valueOf(kotlin/String): com.apollographql.apollo3.api.http/HttpMethod // com.apollographql.apollo3.api.http/HttpMethod.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.apollographql.apollo3.api.http/HttpMethod> // com.apollographql.apollo3.api.http/HttpMethod.values|values#static(){}[0]
    final val entries // com.apollographql.apollo3.api.http/HttpMethod.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.apollo3.api.http/HttpMethod> // com.apollographql.apollo3.api.http/HttpMethod.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun (com.apollographql.apollo3.api.json/JsonReader).com.apollographql.apollo3.api.json/readTypename(): kotlin/String // com.apollographql.apollo3.api.json/readTypename|readTypename@com.apollographql.apollo3.api.json.JsonReader(){}[0]
final fun (com.apollographql.apollo3.api.json/JsonWriter).com.apollographql.apollo3.api.json/writeAny(kotlin/Any?) // com.apollographql.apollo3.api.json/writeAny|writeAny@com.apollographql.apollo3.api.json.JsonWriter(kotlin.Any?){}[0]
final fun (com.apollographql.apollo3.api/BooleanExpression<com.apollographql.apollo3.api/BTerm>).com.apollographql.apollo3.api/evaluate(kotlin.collections/Set<kotlin/String>?, kotlin/String?, kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>?, kotlin.collections/List<kotlin/Any>?): kotlin/Boolean // com.apollographql.apollo3.api/evaluate|evaluate@com.apollographql.apollo3.api.BooleanExpression<com.apollographql.apollo3.api.BTerm>(kotlin.collections.Set<kotlin.String>?;kotlin.String?;kotlin.collections.Set<com.apollographql.apollo3.api.DeferredFragmentIdentifier>?;kotlin.collections.List<kotlin.Any>?){}[0]
final fun (com.apollographql.apollo3.api/CompiledNamedType).com.apollographql.apollo3.api/isComposite(): kotlin/Boolean // com.apollographql.apollo3.api/isComposite|isComposite@com.apollographql.apollo3.api.CompiledNamedType(){}[0]
final fun (com.apollographql.apollo3.api/CompiledNamedType).com.apollographql.apollo3.api/keyFields(): kotlin.collections/List<kotlin/String> // com.apollographql.apollo3.api/keyFields|keyFields@com.apollographql.apollo3.api.CompiledNamedType(){}[0]
final fun (com.apollographql.apollo3.api/CompiledType).com.apollographql.apollo3.api/list(): com.apollographql.apollo3.api/CompiledListType // com.apollographql.apollo3.api/list|list@com.apollographql.apollo3.api.CompiledType(){}[0]
final fun (com.apollographql.apollo3.api/CompiledType).com.apollographql.apollo3.api/notNull(): com.apollographql.apollo3.api/CompiledNotNullType // com.apollographql.apollo3.api/notNull|notNull@com.apollographql.apollo3.api.CompiledType(){}[0]
final fun (com.apollographql.apollo3.api/Operation.Data).com.apollographql.apollo3.api/toJson(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters = ...) // com.apollographql.apollo3.api/toJson|toJson@com.apollographql.apollo3.api.Operation.Data(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
final fun (com.apollographql.apollo3.api/Operation.Data).com.apollographql.apollo3.api/toJson(com.apollographql.apollo3.api/CustomScalarAdapters = ...): kotlin/String // com.apollographql.apollo3.api/toJson|toJson@com.apollographql.apollo3.api.Operation.Data(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
final fun (com.apollographql.apollo3.api/Operation.Data).com.apollographql.apollo3.api/toResponseJson(com.apollographql.apollo3.api/CustomScalarAdapters = ...): kotlin/String // com.apollographql.apollo3.api/toResponseJson|toResponseJson@com.apollographql.apollo3.api.Operation.Data(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
final fun (kotlin.collections/List<com.apollographql.apollo3.api.http/HttpHeader>).com.apollographql.apollo3.api.http/valueOf(kotlin/String): kotlin/String? // com.apollographql.apollo3.api.http/valueOf|valueOf@kotlin.collections.List<com.apollographql.apollo3.api.http.HttpHeader>(kotlin.String){}[0]
final fun (kotlin.collections/Map<kotlin/String, kotlin/Any?>).com.apollographql.apollo3.api.json/jsonReader(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/jsonReader|jsonReader@kotlin.collections.Map<kotlin.String,kotlin.Any?>(){}[0]
final fun (kotlin/String).com.apollographql.apollo3.api.http.internal/urlDecode(): kotlin/String // com.apollographql.apollo3.api.http.internal/urlDecode|urlDecode@kotlin.String(){}[0]
final fun (kotlin/String).com.apollographql.apollo3.api.http.internal/urlEncode(): kotlin/String // com.apollographql.apollo3.api.http.internal/urlEncode|urlEncode@kotlin.String(){}[0]
final fun (okio/BufferedSource).com.apollographql.apollo3.api.json/jsonReader(): com.apollographql.apollo3.api.json/JsonReader // com.apollographql.apollo3.api.json/jsonReader|jsonReader@okio.BufferedSource(){}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.apollo3.api/composeData(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters, #A) // com.apollographql.apollo3.api/composeData|composeData@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters;0:0){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.apollo3.api/parseData(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters = ..., kotlin.collections/Set<kotlin/String>? = ..., kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>? = ..., kotlin.collections/List<com.apollographql.apollo3.api/Error>? = ...): #A? // com.apollographql.apollo3.api/parseData|parseData@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.collections.Set<kotlin.String>?;kotlin.collections.Set<com.apollographql.apollo3.api.DeferredFragmentIdentifier>?;kotlin.collections.List<com.apollographql.apollo3.api.Error>?){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.apollo3.api/variables(com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/Executable.Variables // com.apollographql.apollo3.api/variables|variables@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.CustomScalarAdapters){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Executable.Data> (com.apollographql.apollo3.api/Executable<#A>).com.apollographql.apollo3.api/variablesJson(com.apollographql.apollo3.api/CustomScalarAdapters): kotlin/String // com.apollographql.apollo3.api/variablesJson|variablesJson@com.apollographql.apollo3.api.Executable<0:0>(com.apollographql.apollo3.api.CustomScalarAdapters){0§<com.apollographql.apollo3.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Operation.Data> (com.apollographql.apollo3.api/Operation<#A>).com.apollographql.apollo3.api/composeJsonRequest(com.apollographql.apollo3.api.json/JsonWriter, com.apollographql.apollo3.api/CustomScalarAdapters = ...) // com.apollographql.apollo3.api/composeJsonRequest|composeJsonRequest@com.apollographql.apollo3.api.Operation<0:0>(com.apollographql.apollo3.api.json.JsonWriter;com.apollographql.apollo3.api.CustomScalarAdapters){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Operation.Data> (com.apollographql.apollo3.api/Operation<#A>).com.apollographql.apollo3.api/composeJsonResponse(com.apollographql.apollo3.api.json/JsonWriter, #A, com.apollographql.apollo3.api/CustomScalarAdapters = ...) // com.apollographql.apollo3.api/composeJsonResponse|composeJsonResponse@com.apollographql.apollo3.api.Operation<0:0>(com.apollographql.apollo3.api.json.JsonWriter;0:0;com.apollographql.apollo3.api.CustomScalarAdapters){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Operation.Data> (com.apollographql.apollo3.api/Operation<#A>).com.apollographql.apollo3.api/parseJsonResponse(com.apollographql.apollo3.api.json/JsonReader, com.apollographql.apollo3.api/CustomScalarAdapters = ..., kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>? = ...): com.apollographql.apollo3.api/ApolloResponse<#A> // com.apollographql.apollo3.api/parseJsonResponse|parseJsonResponse@com.apollographql.apollo3.api.Operation<0:0>(com.apollographql.apollo3.api.json.JsonReader;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.collections.Set<com.apollographql.apollo3.api.DeferredFragmentIdentifier>?){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
final fun <#A: com.apollographql.apollo3.api/Operation.Data> (com.apollographql.apollo3.api/Operation<#A>).com.apollographql.apollo3.api/parseResponse(com.apollographql.apollo3.api.json/JsonReader, com.benasher44.uuid/Uuid? = ..., com.apollographql.apollo3.api/CustomScalarAdapters = ..., kotlin.collections/Set<com.apollographql.apollo3.api/DeferredFragmentIdentifier>? = ...): com.apollographql.apollo3.api/ApolloResponse<#A> // com.apollographql.apollo3.api/parseResponse|parseResponse@com.apollographql.apollo3.api.Operation<0:0>(com.apollographql.apollo3.api.json.JsonReader;com.benasher44.uuid.Uuid?;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.collections.Set<com.apollographql.apollo3.api.DeferredFragmentIdentifier>?){0§<com.apollographql.apollo3.api.Operation.Data>}[0]
final fun <#A: kotlin/Any, #B: kotlin/Any> (com.apollographql.apollo3.api/BooleanExpression<#A>).com.apollographql.apollo3.api/firstElementOfType(kotlin.reflect/KClass<#B>): #B? // com.apollographql.apollo3.api/firstElementOfType|firstElementOfType@com.apollographql.apollo3.api.BooleanExpression<0:0>(kotlin.reflect.KClass<0:1>){0§<kotlin.Any>;1§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/nullable(): com.apollographql.apollo3.api/NullableAdapter<#A> // com.apollographql.apollo3.api/nullable|nullable@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.apollographql.apollo3.api/BooleanExpression<#A>).com.apollographql.apollo3.api/and(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A>>...): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/and|and@com.apollographql.apollo3.api.BooleanExpression<0:0>(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<0:0>>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.apollographql.apollo3.api/BooleanExpression<#A>).com.apollographql.apollo3.api/containsPossibleTypes(): kotlin/Boolean // com.apollographql.apollo3.api/containsPossibleTypes|containsPossibleTypes@com.apollographql.apollo3.api.BooleanExpression<0:0>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.apollographql.apollo3.api/BooleanExpression<#A>).com.apollographql.apollo3.api/evaluate(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // com.apollographql.apollo3.api/evaluate|evaluate@com.apollographql.apollo3.api.BooleanExpression<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (com.apollographql.apollo3.api/BooleanExpression<#A>).com.apollographql.apollo3.api/or(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A>>...): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/or|or@com.apollographql.apollo3.api.BooleanExpression<0:0>(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<0:0>>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.apollographql.apollo3.api/and(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A>>...): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/and|and(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<0:0>>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.apollographql.apollo3.api/not(com.apollographql.apollo3.api/BooleanExpression<#A>): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/not|not(com.apollographql.apollo3.api.BooleanExpression<0:0>){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> com.apollographql.apollo3.api/or(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A>>...): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/or|or(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<0:0>>...){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: com.apollographql.apollo3.api/ObjectBuilder<*>> com.apollographql.apollo3.api/buildData(com.apollographql.apollo3.api/BuilderFactory<#B>, kotlin/Function1<#B, kotlin/Unit>, com.apollographql.apollo3.api/Adapter<#A>, kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection>, kotlin/String, com.apollographql.apollo3.api/FakeResolver, com.apollographql.apollo3.api/CustomScalarAdapters): #A // com.apollographql.apollo3.api/buildData|buildData(com.apollographql.apollo3.api.BuilderFactory<0:1>;kotlin.Function1<0:1,kotlin.Unit>;com.apollographql.apollo3.api.Adapter<0:0>;kotlin.collections.List<com.apollographql.apollo3.api.CompiledSelection>;kotlin.String;com.apollographql.apollo3.api.FakeResolver;com.apollographql.apollo3.api.CustomScalarAdapters){0§<kotlin.Any?>;1§<com.apollographql.apollo3.api.ObjectBuilder<*>>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/catchToNull(): com.apollographql.apollo3.api/Adapter<#A?> // com.apollographql.apollo3.api/catchToNull|catchToNull@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/catchToResult(): com.apollographql.apollo3.api/Adapter<com.apollographql.apollo3.api/FieldResult<#A>> // com.apollographql.apollo3.api/catchToResult|catchToResult@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/errorAware(): com.apollographql.apollo3.api/Adapter<#A> // com.apollographql.apollo3.api/errorAware|errorAware@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/list(): com.apollographql.apollo3.api/ListAdapter<#A> // com.apollographql.apollo3.api/list|list@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/obj(kotlin/Boolean = ...): com.apollographql.apollo3.api/ObjectAdapter<#A> // com.apollographql.apollo3.api/obj|obj@com.apollographql.apollo3.api.Adapter<0:0>(kotlin.Boolean){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/optional(): com.apollographql.apollo3.api/PresentAdapter<#A> // com.apollographql.apollo3.api/optional|optional@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/present(): com.apollographql.apollo3.api/PresentAdapter<#A> // com.apollographql.apollo3.api/present|present@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/toJsonString(#A, com.apollographql.apollo3.api/CustomScalarAdapters = ..., kotlin/String? = ...): kotlin/String // com.apollographql.apollo3.api/toJsonString|toJsonString@com.apollographql.apollo3.api.Adapter<0:0>(0:0;com.apollographql.apollo3.api.CustomScalarAdapters;kotlin.String?){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A>).com.apollographql.apollo3.api/exceptionOrNull(): kotlin/Exception? // com.apollographql.apollo3.api/exceptionOrNull|exceptionOrNull@com.apollographql.apollo3.api.FieldResult<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A>).com.apollographql.apollo3.api/getOrElse(#A): #A // com.apollographql.apollo3.api/getOrElse|getOrElse@com.apollographql.apollo3.api.FieldResult<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A>).com.apollographql.apollo3.api/getOrNull(): #A? // com.apollographql.apollo3.api/getOrNull|getOrNull@com.apollographql.apollo3.api.FieldResult<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A>).com.apollographql.apollo3.api/getOrThrow(): #A // com.apollographql.apollo3.api/getOrThrow|getOrThrow@com.apollographql.apollo3.api.FieldResult<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A>).com.apollographql.apollo3.api/graphQLErrorOrNull(): com.apollographql.apollo3.api/Error? // com.apollographql.apollo3.api/graphQLErrorOrNull|graphQLErrorOrNull@com.apollographql.apollo3.api.FieldResult<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (com.apollographql.apollo3.api/Optional<#A>).com.apollographql.apollo3.api/getOrElse(#A): #A // com.apollographql.apollo3.api/getOrElse|getOrElse@com.apollographql.apollo3.api.Optional<0:0>(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.apollographql.apollo3.api/adaptValue(com.apollographql.apollo3.api/Adapter<#A>, #A): kotlin/Any? // com.apollographql.apollo3.api/adaptValue|adaptValue(com.apollographql.apollo3.api.Adapter<0:0>;0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> com.apollographql.apollo3.api/buildData(com.apollographql.apollo3.api/Adapter<#A>, kotlin.collections/List<com.apollographql.apollo3.api/CompiledSelection>, kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo3.api/FakeResolver, com.apollographql.apollo3.api/CustomScalarAdapters): #A // com.apollographql.apollo3.api/buildData|buildData(com.apollographql.apollo3.api.Adapter<0:0>;kotlin.collections.List<com.apollographql.apollo3.api.CompiledSelection>;kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo3.api.FakeResolver;com.apollographql.apollo3.api.CustomScalarAdapters){0§<kotlin.Any?>}[0]
final fun com.apollographql.apollo3.api/Builder(com.apollographql.apollo3.api/CustomScalarAdapters): com.apollographql.apollo3.api/BuilderScope // com.apollographql.apollo3.api/Builder|Builder(com.apollographql.apollo3.api.CustomScalarAdapters){}[0]
final fun com.apollographql.apollo3.api/assertOneOf(kotlin/Array<out com.apollographql.apollo3.api/Optional<*>>...) // com.apollographql.apollo3.api/assertOneOf|assertOneOf(kotlin.Array<out|com.apollographql.apollo3.api.Optional<*>>...){}[0]
final fun com.apollographql.apollo3.api/checkFieldNotMissing(kotlin/Any?, kotlin/String) // com.apollographql.apollo3.api/checkFieldNotMissing|checkFieldNotMissing(kotlin.Any?;kotlin.String){}[0]
final fun com.apollographql.apollo3.api/label(kotlin/String? = ...): com.apollographql.apollo3.api/BooleanExpression<com.apollographql.apollo3.api/BLabel> // com.apollographql.apollo3.api/label|label(kotlin.String?){}[0]
final fun com.apollographql.apollo3.api/missingField(com.apollographql.apollo3.api.json/JsonReader, kotlin/String): kotlin/Nothing // com.apollographql.apollo3.api/missingField|missingField(com.apollographql.apollo3.api.json.JsonReader;kotlin.String){}[0]
final fun com.apollographql.apollo3.api/possibleTypes(kotlin.collections/List<com.apollographql.apollo3.api/CompiledType>, com.apollographql.apollo3.api/CompiledNamedType): kotlin.collections/List<com.apollographql.apollo3.api/ObjectType> // com.apollographql.apollo3.api/possibleTypes|possibleTypes(kotlin.collections.List<com.apollographql.apollo3.api.CompiledType>;com.apollographql.apollo3.api.CompiledNamedType){}[0]
final fun com.apollographql.apollo3.api/possibleTypes(kotlin/Array<out kotlin/String>...): com.apollographql.apollo3.api/BooleanExpression<com.apollographql.apollo3.api/BPossibleTypes> // com.apollographql.apollo3.api/possibleTypes|possibleTypes(kotlin.Array<out|kotlin.String>...){}[0]
final fun com.apollographql.apollo3.api/variable(kotlin/String): com.apollographql.apollo3.api/BooleanExpression<com.apollographql.apollo3.api/BVariable> // com.apollographql.apollo3.api/variable|variable(kotlin.String){}[0]
final inline fun (com.apollographql.apollo3.api.json/JsonWriter).com.apollographql.apollo3.api.json/writeArray(crossinline kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>) // com.apollographql.apollo3.api.json/writeArray|writeArray@com.apollographql.apollo3.api.json.JsonWriter(kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){}[0]
final inline fun (com.apollographql.apollo3.api.json/JsonWriter).com.apollographql.apollo3.api.json/writeObject(crossinline kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>) // com.apollographql.apollo3.api.json/writeObject|writeObject@com.apollographql.apollo3.api.json.JsonWriter(kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){}[0]
final inline fun <#A: reified kotlin/Any?> (com.apollographql.apollo3.api/Adapter<#A>).com.apollographql.apollo3.api/array(): com.apollographql.apollo3.api/Adapter<kotlin/Array<#A>> // com.apollographql.apollo3.api/array|array@com.apollographql.apollo3.api.Adapter<0:0>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin/Any).com.apollographql.apollo3.api/apolloUnsafeCast(): #A // com.apollographql.apollo3.api/apolloUnsafeCast|apolloUnsafeCast@kotlin.Any(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin/Any).com.apollographql.apollo3.api/defaultApolloUnsafeCast(): #A // com.apollographql.apollo3.api/defaultApolloUnsafeCast|defaultApolloUnsafeCast@kotlin.Any(){0§<kotlin.Any?>}[0]
final inline fun com.apollographql.apollo3.api.json/buildJsonByteString(kotlin/String? = ..., crossinline kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>): okio/ByteString // com.apollographql.apollo3.api.json/buildJsonByteString|buildJsonByteString(kotlin.String?;kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){}[0]
final inline fun com.apollographql.apollo3.api.json/buildJsonMap(crossinline kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>): kotlin/Any? // com.apollographql.apollo3.api.json/buildJsonMap|buildJsonMap(kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){}[0]
final inline fun com.apollographql.apollo3.api.json/buildJsonString(kotlin/String? = ..., crossinline kotlin/Function1<com.apollographql.apollo3.api.json/JsonWriter, kotlin/Unit>): kotlin/String // com.apollographql.apollo3.api.json/buildJsonString|buildJsonString(kotlin.String?;kotlin.Function1<com.apollographql.apollo3.api.json.JsonWriter,kotlin.Unit>){}[0]
final val com.apollographql.apollo3.api/AnyAdapter // com.apollographql.apollo3.api/AnyAdapter|{}AnyAdapter[0]
    final fun <get-AnyAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Any> // com.apollographql.apollo3.api/AnyAdapter.<get-AnyAdapter>|<get-AnyAdapter>(){}[0]
final val com.apollographql.apollo3.api/ApolloOptionalAnyAdapter // com.apollographql.apollo3.api/ApolloOptionalAnyAdapter|{}ApolloOptionalAnyAdapter[0]
    final fun <get-ApolloOptionalAnyAdapter>(): com.apollographql.apollo3.api/ApolloOptionalAdapter<kotlin/Any> // com.apollographql.apollo3.api/ApolloOptionalAnyAdapter.<get-ApolloOptionalAnyAdapter>|<get-ApolloOptionalAnyAdapter>(){}[0]
final val com.apollographql.apollo3.api/ApolloOptionalBooleanAdapter // com.apollographql.apollo3.api/ApolloOptionalBooleanAdapter|{}ApolloOptionalBooleanAdapter[0]
    final fun <get-ApolloOptionalBooleanAdapter>(): com.apollographql.apollo3.api/ApolloOptionalAdapter<kotlin/Boolean> // com.apollographql.apollo3.api/ApolloOptionalBooleanAdapter.<get-ApolloOptionalBooleanAdapter>|<get-ApolloOptionalBooleanAdapter>(){}[0]
final val com.apollographql.apollo3.api/ApolloOptionalDoubleAdapter // com.apollographql.apollo3.api/ApolloOptionalDoubleAdapter|{}ApolloOptionalDoubleAdapter[0]
    final fun <get-ApolloOptionalDoubleAdapter>(): com.apollographql.apollo3.api/ApolloOptionalAdapter<kotlin/Double> // com.apollographql.apollo3.api/ApolloOptionalDoubleAdapter.<get-ApolloOptionalDoubleAdapter>|<get-ApolloOptionalDoubleAdapter>(){}[0]
final val com.apollographql.apollo3.api/ApolloOptionalIntAdapter // com.apollographql.apollo3.api/ApolloOptionalIntAdapter|{}ApolloOptionalIntAdapter[0]
    final fun <get-ApolloOptionalIntAdapter>(): com.apollographql.apollo3.api/ApolloOptionalAdapter<kotlin/Int> // com.apollographql.apollo3.api/ApolloOptionalIntAdapter.<get-ApolloOptionalIntAdapter>|<get-ApolloOptionalIntAdapter>(){}[0]
final val com.apollographql.apollo3.api/ApolloOptionalStringAdapter // com.apollographql.apollo3.api/ApolloOptionalStringAdapter|{}ApolloOptionalStringAdapter[0]
    final fun <get-ApolloOptionalStringAdapter>(): com.apollographql.apollo3.api/ApolloOptionalAdapter<kotlin/String> // com.apollographql.apollo3.api/ApolloOptionalStringAdapter.<get-ApolloOptionalStringAdapter>|<get-ApolloOptionalStringAdapter>(){}[0]
final val com.apollographql.apollo3.api/BooleanAdapter // com.apollographql.apollo3.api/BooleanAdapter|{}BooleanAdapter[0]
    final fun <get-BooleanAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Boolean> // com.apollographql.apollo3.api/BooleanAdapter.<get-BooleanAdapter>|<get-BooleanAdapter>(){}[0]
final val com.apollographql.apollo3.api/CompiledDirectiveType // com.apollographql.apollo3.api/CompiledDirectiveType|{}CompiledDirectiveType[0]
    final fun <get-CompiledDirectiveType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledDirectiveType.<get-CompiledDirectiveType>|<get-CompiledDirectiveType>(){}[0]
final val com.apollographql.apollo3.api/CompiledEnumValueType // com.apollographql.apollo3.api/CompiledEnumValueType|{}CompiledEnumValueType[0]
    final fun <get-CompiledEnumValueType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledEnumValueType.<get-CompiledEnumValueType>|<get-CompiledEnumValueType>(){}[0]
final val com.apollographql.apollo3.api/CompiledFieldType // com.apollographql.apollo3.api/CompiledFieldType|{}CompiledFieldType[0]
    final fun <get-CompiledFieldType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledFieldType.<get-CompiledFieldType>|<get-CompiledFieldType>(){}[0]
final val com.apollographql.apollo3.api/CompiledInputValueType // com.apollographql.apollo3.api/CompiledInputValueType|{}CompiledInputValueType[0]
    final fun <get-CompiledInputValueType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledInputValueType.<get-CompiledInputValueType>|<get-CompiledInputValueType>(){}[0]
final val com.apollographql.apollo3.api/CompiledSchemaType // com.apollographql.apollo3.api/CompiledSchemaType|{}CompiledSchemaType[0]
    final fun <get-CompiledSchemaType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledSchemaType.<get-CompiledSchemaType>|<get-CompiledSchemaType>(){}[0]
final val com.apollographql.apollo3.api/CompiledTypeType // com.apollographql.apollo3.api/CompiledTypeType|{}CompiledTypeType[0]
    final fun <get-CompiledTypeType>(): com.apollographql.apollo3.api/ObjectType // com.apollographql.apollo3.api/CompiledTypeType.<get-CompiledTypeType>|<get-CompiledTypeType>(){}[0]
final val com.apollographql.apollo3.api/DoubleAdapter // com.apollographql.apollo3.api/DoubleAdapter|{}DoubleAdapter[0]
    final fun <get-DoubleAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Double> // com.apollographql.apollo3.api/DoubleAdapter.<get-DoubleAdapter>|<get-DoubleAdapter>(){}[0]
final val com.apollographql.apollo3.api/FloatAdapter // com.apollographql.apollo3.api/FloatAdapter|{}FloatAdapter[0]
    final fun <get-FloatAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Float> // com.apollographql.apollo3.api/FloatAdapter.<get-FloatAdapter>|<get-FloatAdapter>(){}[0]
final val com.apollographql.apollo3.api/GlobalBuilder // com.apollographql.apollo3.api/GlobalBuilder|{}GlobalBuilder[0]
    final fun <get-GlobalBuilder>(): com.apollographql.apollo3.api/BuilderScope // com.apollographql.apollo3.api/GlobalBuilder.<get-GlobalBuilder>|<get-GlobalBuilder>(){}[0]
final val com.apollographql.apollo3.api/IntAdapter // com.apollographql.apollo3.api/IntAdapter|{}IntAdapter[0]
    final fun <get-IntAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Int> // com.apollographql.apollo3.api/IntAdapter.<get-IntAdapter>|<get-IntAdapter>(){}[0]
final val com.apollographql.apollo3.api/LongAdapter // com.apollographql.apollo3.api/LongAdapter|{}LongAdapter[0]
    final fun <get-LongAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/Long> // com.apollographql.apollo3.api/LongAdapter.<get-LongAdapter>|<get-LongAdapter>(){}[0]
final val com.apollographql.apollo3.api/NullableAnyAdapter // com.apollographql.apollo3.api/NullableAnyAdapter|{}NullableAnyAdapter[0]
    final fun <get-NullableAnyAdapter>(): com.apollographql.apollo3.api/NullableAdapter<kotlin/Any> // com.apollographql.apollo3.api/NullableAnyAdapter.<get-NullableAnyAdapter>|<get-NullableAnyAdapter>(){}[0]
final val com.apollographql.apollo3.api/NullableBooleanAdapter // com.apollographql.apollo3.api/NullableBooleanAdapter|{}NullableBooleanAdapter[0]
    final fun <get-NullableBooleanAdapter>(): com.apollographql.apollo3.api/NullableAdapter<kotlin/Boolean> // com.apollographql.apollo3.api/NullableBooleanAdapter.<get-NullableBooleanAdapter>|<get-NullableBooleanAdapter>(){}[0]
final val com.apollographql.apollo3.api/NullableDoubleAdapter // com.apollographql.apollo3.api/NullableDoubleAdapter|{}NullableDoubleAdapter[0]
    final fun <get-NullableDoubleAdapter>(): com.apollographql.apollo3.api/NullableAdapter<kotlin/Double> // com.apollographql.apollo3.api/NullableDoubleAdapter.<get-NullableDoubleAdapter>|<get-NullableDoubleAdapter>(){}[0]
final val com.apollographql.apollo3.api/NullableIntAdapter // com.apollographql.apollo3.api/NullableIntAdapter|{}NullableIntAdapter[0]
    final fun <get-NullableIntAdapter>(): com.apollographql.apollo3.api/NullableAdapter<kotlin/Int> // com.apollographql.apollo3.api/NullableIntAdapter.<get-NullableIntAdapter>|<get-NullableIntAdapter>(){}[0]
final val com.apollographql.apollo3.api/NullableStringAdapter // com.apollographql.apollo3.api/NullableStringAdapter|{}NullableStringAdapter[0]
    final fun <get-NullableStringAdapter>(): com.apollographql.apollo3.api/NullableAdapter<kotlin/String> // com.apollographql.apollo3.api/NullableStringAdapter.<get-NullableStringAdapter>|<get-NullableStringAdapter>(){}[0]
final val com.apollographql.apollo3.api/StringAdapter // com.apollographql.apollo3.api/StringAdapter|{}StringAdapter[0]
    final fun <get-StringAdapter>(): com.apollographql.apollo3.api/Adapter<kotlin/String> // com.apollographql.apollo3.api/StringAdapter.<get-StringAdapter>|<get-StringAdapter>(){}[0]
final val com.apollographql.apollo3.api/UploadAdapter // com.apollographql.apollo3.api/UploadAdapter|{}UploadAdapter[0]
    final fun <get-UploadAdapter>(): com.apollographql.apollo3.api/Adapter<com.apollographql.apollo3.api/Upload> // com.apollographql.apollo3.api/UploadAdapter.<get-UploadAdapter>|<get-UploadAdapter>(){}[0]
final val com.apollographql.apollo3.api/isSuccess // com.apollographql.apollo3.api/isSuccess|@com.apollographql.apollo3.api.FieldResult<0:0>{0§<kotlin.Any?>}isSuccess[0]
    final fun <#A1: kotlin/Any?> (com.apollographql.apollo3.api/FieldResult<#A1>).<get-isSuccess>(): kotlin/Boolean // com.apollographql.apollo3.api/isSuccess.<get-isSuccess>|<get-isSuccess>@com.apollographql.apollo3.api.FieldResult<0:0>(){0§<kotlin.Any?>}[0]
open class com.apollographql.apollo3.api/DefaultFakeResolver : com.apollographql.apollo3.api/FakeResolver { // com.apollographql.apollo3.api/DefaultFakeResolver|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo3.api/CompiledNamedType>) // com.apollographql.apollo3.api/DefaultFakeResolver.<init>|<init>(kotlin.collections.List<com.apollographql.apollo3.api.CompiledNamedType>){}[0]
    open fun resolveLeaf(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Any // com.apollographql.apollo3.api/DefaultFakeResolver.resolveLeaf|resolveLeaf(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    open fun resolveListSize(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Int // com.apollographql.apollo3.api/DefaultFakeResolver.resolveListSize|resolveListSize(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    open fun resolveMaybeNull(com.apollographql.apollo3.api/FakeResolverContext): kotlin/Boolean // com.apollographql.apollo3.api/DefaultFakeResolver.resolveMaybeNull|resolveMaybeNull(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    open fun resolveTypename(com.apollographql.apollo3.api/FakeResolverContext): kotlin/String // com.apollographql.apollo3.api/DefaultFakeResolver.resolveTypename|resolveTypename(com.apollographql.apollo3.api.FakeResolverContext){}[0]
    open fun stableIdForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo3.api/CompiledField): kotlin/String? // com.apollographql.apollo3.api/DefaultFakeResolver.stableIdForObject|stableIdForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo3.api.CompiledField){}[0]
}
sealed class <#A: out kotlin/Any> com.apollographql.apollo3.api/BooleanExpression { // com.apollographql.apollo3.api/BooleanExpression|null[0]
    abstract fun simplify(): com.apollographql.apollo3.api/BooleanExpression<#A> // com.apollographql.apollo3.api/BooleanExpression.simplify|simplify(){}[0]
    constructor <init>() // com.apollographql.apollo3.api/BooleanExpression.<init>|<init>(){}[0]
    final class <#A1: kotlin/Any> And : com.apollographql.apollo3.api/BooleanExpression<#A1> { // com.apollographql.apollo3.api/BooleanExpression.And|null[0]
        constructor <init>(kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>>) // com.apollographql.apollo3.api/BooleanExpression.And.<init>|<init>(kotlin.collections.Set<com.apollographql.apollo3.api.BooleanExpression<1:0>>){}[0]
        constructor <init>(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A1>>...) // com.apollographql.apollo3.api/BooleanExpression.And.<init>|<init>(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<1:0>>...){}[0]
        final fun component1(): kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> // com.apollographql.apollo3.api/BooleanExpression.And.component1|component1(){}[0]
        final fun copy(kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> = ...): com.apollographql.apollo3.api/BooleanExpression.And<#A1> // com.apollographql.apollo3.api/BooleanExpression.And.copy|copy(kotlin.collections.Set<com.apollographql.apollo3.api.BooleanExpression<1:0>>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BooleanExpression.And.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BooleanExpression.And.hashCode|hashCode(){}[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression<#A1> // com.apollographql.apollo3.api/BooleanExpression.And.simplify|simplify(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/BooleanExpression.And.toString|toString(){}[0]
        final val operands // com.apollographql.apollo3.api/BooleanExpression.And.operands|{}operands[0]
            final fun <get-operands>(): kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> // com.apollographql.apollo3.api/BooleanExpression.And.operands.<get-operands>|<get-operands>(){}[0]
    }
    final class <#A1: kotlin/Any> Or : com.apollographql.apollo3.api/BooleanExpression<#A1> { // com.apollographql.apollo3.api/BooleanExpression.Or|null[0]
        constructor <init>(kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>>) // com.apollographql.apollo3.api/BooleanExpression.Or.<init>|<init>(kotlin.collections.Set<com.apollographql.apollo3.api.BooleanExpression<1:0>>){}[0]
        constructor <init>(kotlin/Array<out com.apollographql.apollo3.api/BooleanExpression<#A1>>...) // com.apollographql.apollo3.api/BooleanExpression.Or.<init>|<init>(kotlin.Array<out|com.apollographql.apollo3.api.BooleanExpression<1:0>>...){}[0]
        final fun component1(): kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> // com.apollographql.apollo3.api/BooleanExpression.Or.component1|component1(){}[0]
        final fun copy(kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> = ...): com.apollographql.apollo3.api/BooleanExpression.Or<#A1> // com.apollographql.apollo3.api/BooleanExpression.Or.copy|copy(kotlin.collections.Set<com.apollographql.apollo3.api.BooleanExpression<1:0>>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BooleanExpression.Or.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BooleanExpression.Or.hashCode|hashCode(){}[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression<#A1> // com.apollographql.apollo3.api/BooleanExpression.Or.simplify|simplify(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/BooleanExpression.Or.toString|toString(){}[0]
        final val operands // com.apollographql.apollo3.api/BooleanExpression.Or.operands|{}operands[0]
            final fun <get-operands>(): kotlin.collections/Set<com.apollographql.apollo3.api/BooleanExpression<#A1>> // com.apollographql.apollo3.api/BooleanExpression.Or.operands.<get-operands>|<get-operands>(){}[0]
    }
    final class <#A1: out kotlin/Any> Element : com.apollographql.apollo3.api/BooleanExpression<#A1> { // com.apollographql.apollo3.api/BooleanExpression.Element|null[0]
        constructor <init>(#A1) // com.apollographql.apollo3.api/BooleanExpression.Element.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // com.apollographql.apollo3.api/BooleanExpression.Element.component1|component1(){}[0]
        final fun copy(#A1 = ...): com.apollographql.apollo3.api/BooleanExpression.Element<#A1> // com.apollographql.apollo3.api/BooleanExpression.Element.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BooleanExpression.Element.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BooleanExpression.Element.hashCode|hashCode(){}[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression.Element<#A1> // com.apollographql.apollo3.api/BooleanExpression.Element.simplify|simplify(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/BooleanExpression.Element.toString|toString(){}[0]
        final val value // com.apollographql.apollo3.api/BooleanExpression.Element.value|{}value[0]
            final fun <get-value>(): #A1 // com.apollographql.apollo3.api/BooleanExpression.Element.value.<get-value>|<get-value>(){}[0]
    }
    final class <#A1: out kotlin/Any> Not : com.apollographql.apollo3.api/BooleanExpression<#A1> { // com.apollographql.apollo3.api/BooleanExpression.Not|null[0]
        constructor <init>(com.apollographql.apollo3.api/BooleanExpression<#A1>) // com.apollographql.apollo3.api/BooleanExpression.Not.<init>|<init>(com.apollographql.apollo3.api.BooleanExpression<1:0>){}[0]
        final fun component1(): com.apollographql.apollo3.api/BooleanExpression<#A1> // com.apollographql.apollo3.api/BooleanExpression.Not.component1|component1(){}[0]
        final fun copy(com.apollographql.apollo3.api/BooleanExpression<#A1> = ...): com.apollographql.apollo3.api/BooleanExpression.Not<#A1> // com.apollographql.apollo3.api/BooleanExpression.Not.copy|copy(com.apollographql.apollo3.api.BooleanExpression<1:0>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/BooleanExpression.Not.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/BooleanExpression.Not.hashCode|hashCode(){}[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression<#A1> // com.apollographql.apollo3.api/BooleanExpression.Not.simplify|simplify(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/BooleanExpression.Not.toString|toString(){}[0]
        final val operand // com.apollographql.apollo3.api/BooleanExpression.Not.operand|{}operand[0]
            final fun <get-operand>(): com.apollographql.apollo3.api/BooleanExpression<#A1> // com.apollographql.apollo3.api/BooleanExpression.Not.operand.<get-operand>|<get-operand>(){}[0]
    }
    final object False : com.apollographql.apollo3.api/BooleanExpression<kotlin/Nothing> { // com.apollographql.apollo3.api/BooleanExpression.False|null[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression.False // com.apollographql.apollo3.api/BooleanExpression.False.simplify|simplify(){}[0]
    }
    final object True : com.apollographql.apollo3.api/BooleanExpression<kotlin/Nothing> { // com.apollographql.apollo3.api/BooleanExpression.True|null[0]
        final fun simplify(): com.apollographql.apollo3.api/BooleanExpression.True // com.apollographql.apollo3.api/BooleanExpression.True.simplify|simplify(){}[0]
    }
}
sealed class <#A: out kotlin/Any?> com.apollographql.apollo3.api/Optional { // com.apollographql.apollo3.api/Optional|null[0]
    constructor <init>() // com.apollographql.apollo3.api/Optional.<init>|<init>(){}[0]
    final class <#A1: kotlin/Any?> Present : com.apollographql.apollo3.api/Optional<#A1> { // com.apollographql.apollo3.api/Optional.Present|null[0]
        constructor <init>(#A1) // com.apollographql.apollo3.api/Optional.Present.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // com.apollographql.apollo3.api/Optional.Present.component1|component1(){}[0]
        final fun copy(#A1 = ...): com.apollographql.apollo3.api/Optional.Present<#A1> // com.apollographql.apollo3.api/Optional.Present.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api/Optional.Present.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api/Optional.Present.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api/Optional.Present.toString|toString(){}[0]
        final val value // com.apollographql.apollo3.api/Optional.Present.value|{}value[0]
            final fun <get-value>(): #A1 // com.apollographql.apollo3.api/Optional.Present.value.<get-value>|<get-value>(){}[0]
    }
    final fun getOrNull(): #A? // com.apollographql.apollo3.api/Optional.getOrNull|getOrNull(){}[0]
    final fun getOrThrow(): #A // com.apollographql.apollo3.api/Optional.getOrThrow|getOrThrow(){}[0]
    final object Absent : com.apollographql.apollo3.api/Optional<kotlin/Nothing> // com.apollographql.apollo3.api/Optional.Absent|null[0]
    final object Companion { // com.apollographql.apollo3.api/Optional.Companion|null[0]
        final fun <#A2: kotlin/Any> presentIfNotNull(#A2?): com.apollographql.apollo3.api/Optional<#A2> // com.apollographql.apollo3.api/Optional.Companion.presentIfNotNull|presentIfNotNull(0:0?){0§<kotlin.Any>}[0]
        final fun <#A2: kotlin/Any?> present(#A2): com.apollographql.apollo3.api/Optional.Present<#A2> // com.apollographql.apollo3.api/Optional.Companion.present|present(0:0){0§<kotlin.Any?>}[0]
        final fun absent(): com.apollographql.apollo3.api/Optional.Absent // com.apollographql.apollo3.api/Optional.Companion.absent|absent(){}[0]
    }
}
sealed class com.apollographql.apollo3.api/BTerm { // com.apollographql.apollo3.api/BTerm|null[0]
    constructor <init>() // com.apollographql.apollo3.api/BTerm.<init>|<init>(){}[0]
}
sealed class com.apollographql.apollo3.api/CompiledNamedType : com.apollographql.apollo3.api/CompiledType { // com.apollographql.apollo3.api/CompiledNamedType|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo3.api/CompiledNamedType.<init>|<init>(kotlin.String){}[0]
    final val name // com.apollographql.apollo3.api/CompiledNamedType.name|{}name[0]
        final fun <get-name>(): kotlin/String // com.apollographql.apollo3.api/CompiledNamedType.name.<get-name>|<get-name>(){}[0]
    open fun leafType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledNamedType.leafType|leafType(){}[0]
    open fun rawType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledNamedType.rawType|rawType(){}[0]
}
sealed class com.apollographql.apollo3.api/CompiledSelection { // com.apollographql.apollo3.api/CompiledSelection|null[0]
    constructor <init>() // com.apollographql.apollo3.api/CompiledSelection.<init>|<init>(){}[0]
}
sealed class com.apollographql.apollo3.api/CompiledType { // com.apollographql.apollo3.api/CompiledType|null[0]
    abstract fun leafType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledType.leafType|leafType(){}[0]
    abstract fun rawType(): com.apollographql.apollo3.api/CompiledNamedType // com.apollographql.apollo3.api/CompiledType.rawType|rawType(){}[0]
    constructor <init>() // com.apollographql.apollo3.api/CompiledType.<init>|<init>(){}[0]
}
sealed class com.apollographql.apollo3.exception/ApolloException : kotlin/RuntimeException { // com.apollographql.apollo3.exception/ApolloException|null[0]
    constructor <init>(kotlin/String? = ..., kotlin/Throwable? = ...) // com.apollographql.apollo3.exception/ApolloException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
}
sealed interface <#A: out kotlin/Any?> com.apollographql.apollo3.api/FieldResult { // com.apollographql.apollo3.api/FieldResult|null[0]
    final class <#A1: kotlin/Any?> Success : com.apollographql.apollo3.api/FieldResult<#A1> { // com.apollographql.apollo3.api/FieldResult.Success|null[0]
        constructor <init>(#A1) // com.apollographql.apollo3.api/FieldResult.Success.<init>|<init>(1:0){}[0]
        final val value // com.apollographql.apollo3.api/FieldResult.Success.value|{}value[0]
            final fun <get-value>(): #A1 // com.apollographql.apollo3.api/FieldResult.Success.value.<get-value>|<get-value>(){}[0]
    }
    final class Failure : com.apollographql.apollo3.api/FieldResult<kotlin/Nothing> { // com.apollographql.apollo3.api/FieldResult.Failure|null[0]
        constructor <init>(com.apollographql.apollo3.exception/ApolloException) // com.apollographql.apollo3.api/FieldResult.Failure.<init>|<init>(com.apollographql.apollo3.exception.ApolloException){}[0]
        final val exception // com.apollographql.apollo3.api/FieldResult.Failure.exception|{}exception[0]
            final fun <get-exception>(): com.apollographql.apollo3.exception/ApolloException // com.apollographql.apollo3.api/FieldResult.Failure.exception.<get-exception>|<get-exception>(){}[0]
    }
}
// Targets: [native]
final fun (okio/Path).com.apollographql.apollo3.api/toUpload(kotlin/String, okio/FileSystem = ...): com.apollographql.apollo3.api/Upload // com.apollographql.apollo3.api/toUpload|toUpload@okio.Path(kotlin.String;okio.FileSystem){}[0]
// Targets: [apple]
final val com.apollographql.apollo3.exception/nsError // com.apollographql.apollo3.exception/nsError|@com.apollographql.apollo3.exception.ApolloNetworkException{}nsError[0]
    final fun (com.apollographql.apollo3.exception/ApolloNetworkException).<get-nsError>(): platform.Foundation/NSError? // com.apollographql.apollo3.exception/nsError.<get-nsError>|<get-nsError>@com.apollographql.apollo3.exception.ApolloNetworkException(){}[0]
// Targets: [js]
final class com.apollographql.apollo3.api.json/DynamicJsJsonReader : com.apollographql.apollo3.api.json/JsonReader { // com.apollographql.apollo3.api.json/DynamicJsJsonReader|null[0]
    constructor <init>(dynamic, kotlin/Array<kotlin/Any> = ...) // com.apollographql.apollo3.api.json/DynamicJsJsonReader.<init>|<init>(<dynamic>;kotlin.Array<kotlin.Any>){}[0]
    final fun beginArray(): com.apollographql.apollo3.api.json/DynamicJsJsonReader // com.apollographql.apollo3.api.json/DynamicJsJsonReader.beginArray|beginArray(){}[0]
    final fun beginObject(): com.apollographql.apollo3.api.json/DynamicJsJsonReader // com.apollographql.apollo3.api.json/DynamicJsJsonReader.beginObject|beginObject(){}[0]
    final fun close() // com.apollographql.apollo3.api.json/DynamicJsJsonReader.close|close(){}[0]
    final fun endArray(): com.apollographql.apollo3.api.json/DynamicJsJsonReader // com.apollographql.apollo3.api.json/DynamicJsJsonReader.endArray|endArray(){}[0]
    final fun endObject(): com.apollographql.apollo3.api.json/DynamicJsJsonReader // com.apollographql.apollo3.api.json/DynamicJsJsonReader.endObject|endObject(){}[0]
    final fun getPath(): kotlin.collections/List<kotlin/Any> // com.apollographql.apollo3.api.json/DynamicJsJsonReader.getPath|getPath(){}[0]
    final fun hasNext(): kotlin/Boolean // com.apollographql.apollo3.api.json/DynamicJsJsonReader.hasNext|hasNext(){}[0]
    final fun nextBoolean(): kotlin/Boolean // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextBoolean|nextBoolean(){}[0]
    final fun nextDouble(): kotlin/Double // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextDouble|nextDouble(){}[0]
    final fun nextInt(): kotlin/Int // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextInt|nextInt(){}[0]
    final fun nextLong(): kotlin/Long // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextLong|nextLong(){}[0]
    final fun nextName(): kotlin/String // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextName|nextName(){}[0]
    final fun nextNull(): kotlin/Nothing? // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextNull|nextNull(){}[0]
    final fun nextNumber(): com.apollographql.apollo3.api.json/JsonNumber // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextNumber|nextNumber(){}[0]
    final fun nextString(): kotlin/String // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextString|nextString(){}[0]
    final fun nextValue(): kotlin/Any // com.apollographql.apollo3.api.json/DynamicJsJsonReader.nextValue|nextValue(){}[0]
    final fun peek(): com.apollographql.apollo3.api.json/JsonReader.Token // com.apollographql.apollo3.api.json/DynamicJsJsonReader.peek|peek(){}[0]
    final fun rewind() // com.apollographql.apollo3.api.json/DynamicJsJsonReader.rewind|rewind(){}[0]
    final fun selectName(kotlin.collections/List<kotlin/String>): kotlin/Int // com.apollographql.apollo3.api.json/DynamicJsJsonReader.selectName|selectName(kotlin.collections.List<kotlin.String>){}[0]
    final fun skipValue() // com.apollographql.apollo3.api.json/DynamicJsJsonReader.skipValue|skipValue(){}[0]
    final val root // com.apollographql.apollo3.api.json/DynamicJsJsonReader.root|{}root[0]
        final fun <get-root>(): dynamic // com.apollographql.apollo3.api.json/DynamicJsJsonReader.root.<get-root>|<get-root>(){}[0]
}
// Targets: [js]
sealed interface com.apollographql.apollo3.api.json/IteratorWrapper { // com.apollographql.apollo3.api.json/IteratorWrapper|null[0]
    abstract val iterator // com.apollographql.apollo3.api.json/IteratorWrapper.iterator|{}iterator[0]
        abstract fun <get-iterator>(): kotlin.collections/Iterator<*> // com.apollographql.apollo3.api.json/IteratorWrapper.iterator.<get-iterator>|<get-iterator>(){}[0]
    final class EntryIterator : com.apollographql.apollo3.api.json/IteratorWrapper { // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator|null[0]
        constructor <init>(kotlin.collections/Iterator<kotlin/Array<kotlin/Any>>) // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.<init>|<init>(kotlin.collections.Iterator<kotlin.Array<kotlin.Any>>){}[0]
        final fun component1(): kotlin.collections/Iterator<kotlin/Array<kotlin/Any>> // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.component1|component1(){}[0]
        final fun copy(kotlin.collections/Iterator<kotlin/Array<kotlin/Any>> = ...): com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.copy|copy(kotlin.collections.Iterator<kotlin.Array<kotlin.Any>>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.toString|toString(){}[0]
        final val iterator // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.iterator|{}iterator[0]
            final fun <get-iterator>(): kotlin.collections/Iterator<kotlin/Array<kotlin/Any>> // com.apollographql.apollo3.api.json/IteratorWrapper.EntryIterator.iterator.<get-iterator>|<get-iterator>(){}[0]
    }
    final class StandardIterator : com.apollographql.apollo3.api.json/IteratorWrapper { // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator|null[0]
        constructor <init>(kotlin.collections/Iterator<*>) // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.<init>|<init>(kotlin.collections.Iterator<*>){}[0]
        final fun component1(): kotlin.collections/Iterator<*> // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.component1|component1(){}[0]
        final fun copy(kotlin.collections/Iterator<*> = ...): com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.copy|copy(kotlin.collections.Iterator<*>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.toString|toString(){}[0]
        final val iterator // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.iterator|{}iterator[0]
            final fun <get-iterator>(): kotlin.collections/Iterator<*> // com.apollographql.apollo3.api.json/IteratorWrapper.StandardIterator.iterator.<get-iterator>|<get-iterator>(){}[0]
    }
}
