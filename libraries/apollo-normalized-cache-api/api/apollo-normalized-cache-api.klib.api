// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.apollo:apollo-normalized-cache-api>
abstract interface com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator { // com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator|null[0]
    abstract fun cacheKeyForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext): com.apollographql.apollo.cache.normalized.api/CacheKey? // com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator.cacheKeyForObject|cacheKeyForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo.cache.normalized.api.CacheKeyGeneratorContext){}[0]
}

abstract interface com.apollographql.apollo.cache.normalized.api/CacheResolver { // com.apollographql.apollo.cache.normalized.api/CacheResolver|null[0]
    abstract fun resolveField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.apollo.cache.normalized.api/CacheResolver.resolveField|resolveField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}

abstract interface com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache { // com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache|null[0]
    abstract fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.apollo.cache.normalized.api/Record>> // com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache.dump|dump(){}[0]
    abstract fun loadRecord(kotlin/String, com.apollographql.apollo.cache.normalized.api/CacheHeaders): com.apollographql.apollo.cache.normalized.api/Record? // com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache.loadRecord|loadRecord(kotlin.String;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    abstract fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.apollo.cache.normalized.api/Record> // com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
}

abstract class com.apollographql.apollo.cache.normalized.api/CacheKeyResolver : com.apollographql.apollo.cache.normalized.api/CacheResolver { // com.apollographql.apollo.cache.normalized.api/CacheKeyResolver|null[0]
    constructor <init>() // com.apollographql.apollo.cache.normalized.api/CacheKeyResolver.<init>|<init>(){}[0]

    abstract fun cacheKeyForField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables): com.apollographql.apollo.cache.normalized.api/CacheKey? // com.apollographql.apollo.cache.normalized.api/CacheKeyResolver.cacheKeyForField|cacheKeyForField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables){}[0]
    final fun resolveField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.apollo.cache.normalized.api/CacheKeyResolver.resolveField|resolveField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
    open fun listOfCacheKeysForField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables): kotlin.collections/List<com.apollographql.apollo.cache.normalized.api/CacheKey?>? // com.apollographql.apollo.cache.normalized.api/CacheKeyResolver.listOfCacheKeysForField|listOfCacheKeysForField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables){}[0]
}

abstract class com.apollographql.apollo.cache.normalized.api/NormalizedCache : com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache { // com.apollographql.apollo.cache.normalized.api/NormalizedCache|null[0]
    constructor <init>() // com.apollographql.apollo.cache.normalized.api/NormalizedCache.<init>|<init>(){}[0]

    final var nextCache // com.apollographql.apollo.cache.normalized.api/NormalizedCache.nextCache|{}nextCache[0]
        final fun <get-nextCache>(): com.apollographql.apollo.cache.normalized.api/NormalizedCache? // com.apollographql.apollo.cache.normalized.api/NormalizedCache.nextCache.<get-nextCache>|<get-nextCache>(){}[0]

    abstract fun clearAll() // com.apollographql.apollo.cache.normalized.api/NormalizedCache.clearAll|clearAll(){}[0]
    abstract fun merge(com.apollographql.apollo.cache.normalized.api/Record, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/NormalizedCache.merge|merge(com.apollographql.apollo.cache.normalized.api.Record;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    abstract fun merge(kotlin.collections/Collection<com.apollographql.apollo.cache.normalized.api/Record>, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/NormalizedCache.merge|merge(kotlin.collections.Collection<com.apollographql.apollo.cache.normalized.api.Record>;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    abstract fun remove(com.apollographql.apollo.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/NormalizedCache.remove|remove(com.apollographql.apollo.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    abstract fun remove(kotlin/String): kotlin/Int // com.apollographql.apollo.cache.normalized.api/NormalizedCache.remove|remove(kotlin.String){}[0]
    final fun chain(com.apollographql.apollo.cache.normalized.api/NormalizedCache): com.apollographql.apollo.cache.normalized.api/NormalizedCache // com.apollographql.apollo.cache.normalized.api/NormalizedCache.chain|chain(com.apollographql.apollo.cache.normalized.api.NormalizedCache){}[0]

    final object Companion { // com.apollographql.apollo.cache.normalized.api/NormalizedCache.Companion|null[0]
        final fun patternToRegex(kotlin/String): kotlin.text/Regex // com.apollographql.apollo.cache.normalized.api/NormalizedCache.Companion.patternToRegex|patternToRegex(kotlin.String){}[0]
        final fun prettifyDump(kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.apollo.cache.normalized.api/Record>>): kotlin/String // com.apollographql.apollo.cache.normalized.api/NormalizedCache.Companion.prettifyDump|prettifyDump(kotlin.collections.Map<kotlin.reflect.KClass<*>,kotlin.collections.Map<kotlin.String,com.apollographql.apollo.cache.normalized.api.Record>>){}[0]
    }
}

abstract class com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory { // com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory|null[0]
    constructor <init>() // com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory.<init>|<init>(){}[0]

    abstract fun create(): com.apollographql.apollo.cache.normalized.api/NormalizedCache // com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory.create|create(){}[0]
    final fun chain(com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory): com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory // com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory.chain|chain(com.apollographql.apollo.cache.normalized.api.NormalizedCacheFactory){}[0]
    final fun createChain(): com.apollographql.apollo.cache.normalized.api/NormalizedCache // com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory.createChain|createChain(){}[0]
}

final class com.apollographql.apollo.cache.normalized.api/CacheHeaders { // com.apollographql.apollo.cache.normalized.api/CacheHeaders|null[0]
    final fun hasHeader(kotlin/String): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/CacheHeaders.hasHeader|hasHeader(kotlin.String){}[0]
    final fun headerValue(kotlin/String): kotlin/String? // com.apollographql.apollo.cache.normalized.api/CacheHeaders.headerValue|headerValue(kotlin.String){}[0]
    final fun newBuilder(): com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder // com.apollographql.apollo.cache.normalized.api/CacheHeaders.newBuilder|newBuilder(){}[0]
    final fun plus(com.apollographql.apollo.cache.normalized.api/CacheHeaders): com.apollographql.apollo.cache.normalized.api/CacheHeaders // com.apollographql.apollo.cache.normalized.api/CacheHeaders.plus|plus(com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]

    final class Builder { // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder|null[0]
        constructor <init>() // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder.<init>|<init>(){}[0]

        final fun addHeader(kotlin/String, kotlin/String): com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
        final fun addHeaders(kotlin.collections/Map<kotlin/String, kotlin/String>): com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder.addHeaders|addHeaders(kotlin.collections.Map<kotlin.String,kotlin.String>){}[0]
        final fun build(): com.apollographql.apollo.cache.normalized.api/CacheHeaders // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder.build|build(){}[0]
    }

    final object Companion { // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Companion|null[0]
        final val NONE // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Companion.NONE|{}NONE[0]
            final fun <get-NONE>(): com.apollographql.apollo.cache.normalized.api/CacheHeaders // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Companion.NONE.<get-NONE>|<get-NONE>(){}[0]

        final fun builder(): com.apollographql.apollo.cache.normalized.api/CacheHeaders.Builder // com.apollographql.apollo.cache.normalized.api/CacheHeaders.Companion.builder|builder(){}[0]
    }
}

final class com.apollographql.apollo.cache.normalized.api/CacheKey { // com.apollographql.apollo.cache.normalized.api/CacheKey|null[0]
    constructor <init>(kotlin/String) // com.apollographql.apollo.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin.collections/List<kotlin/String>) // com.apollographql.apollo.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
    constructor <init>(kotlin/String, kotlin/Array<out kotlin/String>...) // com.apollographql.apollo.cache.normalized.api/CacheKey.<init>|<init>(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]

    final val key // com.apollographql.apollo.cache.normalized.api/CacheKey.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.apollographql.apollo.cache.normalized.api/CacheKey.key.<get-key>|<get-key>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/CacheKey.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.apollographql.apollo.cache.normalized.api/CacheKey.hashCode|hashCode(){}[0]
    final fun serialize(): kotlin/String // com.apollographql.apollo.cache.normalized.api/CacheKey.serialize|serialize(){}[0]
    final fun toString(): kotlin/String // com.apollographql.apollo.cache.normalized.api/CacheKey.toString|toString(){}[0]

    final object Companion { // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion|null[0]
        final fun canDeserialize(kotlin/String): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion.canDeserialize|canDeserialize(kotlin.String){}[0]
        final fun deserialize(kotlin/String): com.apollographql.apollo.cache.normalized.api/CacheKey // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion.deserialize|deserialize(kotlin.String){}[0]
        final fun from(kotlin/String, kotlin.collections/List<kotlin/String>): com.apollographql.apollo.cache.normalized.api/CacheKey // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion.from|from(kotlin.String;kotlin.collections.List<kotlin.String>){}[0]
        final fun from(kotlin/String, kotlin/Array<out kotlin/String>...): com.apollographql.apollo.cache.normalized.api/CacheKey // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion.from|from(kotlin.String;kotlin.Array<out|kotlin.String>...){}[0]
        final fun rootKey(): com.apollographql.apollo.cache.normalized.api/CacheKey // com.apollographql.apollo.cache.normalized.api/CacheKey.Companion.rootKey|rootKey(){}[0]
    }
}

final class com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext { // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext|null[0]
    constructor <init>(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables) // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext.<init>|<init>(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables){}[0]

    final val field // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext.field|{}field[0]
        final fun <get-field>(): com.apollographql.apollo.api/CompiledField // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext.field.<get-field>|<get-field>(){}[0]
    final val variables // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext.variables|{}variables[0]
        final fun <get-variables>(): com.apollographql.apollo.api/Executable.Variables // com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext.variables.<get-variables>|<get-variables>(){}[0]
}

final class com.apollographql.apollo.cache.normalized.api/MemoryCache : com.apollographql.apollo.cache.normalized.api/NormalizedCache { // com.apollographql.apollo.cache.normalized.api/MemoryCache|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Long = ...) // com.apollographql.apollo.cache.normalized.api/MemoryCache.<init>|<init>(kotlin.Int;kotlin.Long){}[0]

    final val size // com.apollographql.apollo.cache.normalized.api/MemoryCache.size|{}size[0]
        final fun <get-size>(): kotlin/Int // com.apollographql.apollo.cache.normalized.api/MemoryCache.size.<get-size>|<get-size>(){}[0]

    final fun clearAll() // com.apollographql.apollo.cache.normalized.api/MemoryCache.clearAll|clearAll(){}[0]
    final fun dump(): kotlin.collections/Map<kotlin.reflect/KClass<*>, kotlin.collections/Map<kotlin/String, com.apollographql.apollo.cache.normalized.api/Record>> // com.apollographql.apollo.cache.normalized.api/MemoryCache.dump|dump(){}[0]
    final fun loadRecord(kotlin/String, com.apollographql.apollo.cache.normalized.api/CacheHeaders): com.apollographql.apollo.cache.normalized.api/Record? // com.apollographql.apollo.cache.normalized.api/MemoryCache.loadRecord|loadRecord(kotlin.String;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    final fun loadRecords(kotlin.collections/Collection<kotlin/String>, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Collection<com.apollographql.apollo.cache.normalized.api/Record> // com.apollographql.apollo.cache.normalized.api/MemoryCache.loadRecords|loadRecords(kotlin.collections.Collection<kotlin.String>;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    final fun merge(com.apollographql.apollo.cache.normalized.api/Record, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/MemoryCache.merge|merge(com.apollographql.apollo.cache.normalized.api.Record;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    final fun merge(kotlin.collections/Collection<com.apollographql.apollo.cache.normalized.api/Record>, com.apollographql.apollo.cache.normalized.api/CacheHeaders): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/MemoryCache.merge|merge(kotlin.collections.Collection<com.apollographql.apollo.cache.normalized.api.Record>;com.apollographql.apollo.cache.normalized.api.CacheHeaders){}[0]
    final fun remove(com.apollographql.apollo.cache.normalized.api/CacheKey, kotlin/Boolean): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/MemoryCache.remove|remove(com.apollographql.apollo.cache.normalized.api.CacheKey;kotlin.Boolean){}[0]
    final fun remove(kotlin/String): kotlin/Int // com.apollographql.apollo.cache.normalized.api/MemoryCache.remove|remove(kotlin.String){}[0]
}

final class com.apollographql.apollo.cache.normalized.api/MemoryCacheFactory : com.apollographql.apollo.cache.normalized.api/NormalizedCacheFactory { // com.apollographql.apollo.cache.normalized.api/MemoryCacheFactory|null[0]
    constructor <init>(kotlin/Int = ..., kotlin/Long = ...) // com.apollographql.apollo.cache.normalized.api/MemoryCacheFactory.<init>|<init>(kotlin.Int;kotlin.Long){}[0]

    final fun create(): com.apollographql.apollo.cache.normalized.api/MemoryCache // com.apollographql.apollo.cache.normalized.api/MemoryCacheFactory.create|create(){}[0]
}

final class com.apollographql.apollo.cache.normalized.api/Record : kotlin.collections/Map<kotlin/String, kotlin/Any?> { // com.apollographql.apollo.cache.normalized.api/Record|null[0]
    constructor <init>(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.benasher44.uuid/Uuid? = ...) // com.apollographql.apollo.cache.normalized.api/Record.<init>|<init>(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.benasher44.uuid.Uuid?){}[0]

    final val entries // com.apollographql.apollo.cache.normalized.api/Record.entries|{}entries[0]
        final fun <get-entries>(): kotlin.collections/Set<kotlin.collections/Map.Entry<kotlin/String, kotlin/Any?>> // com.apollographql.apollo.cache.normalized.api/Record.entries.<get-entries>|<get-entries>(){}[0]
    final val fields // com.apollographql.apollo.cache.normalized.api/Record.fields|{}fields[0]
        final fun <get-fields>(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.apollo.cache.normalized.api/Record.fields.<get-fields>|<get-fields>(){}[0]
    final val key // com.apollographql.apollo.cache.normalized.api/Record.key|{}key[0]
        final fun <get-key>(): kotlin/String // com.apollographql.apollo.cache.normalized.api/Record.key.<get-key>|<get-key>(){}[0]
    final val keys // com.apollographql.apollo.cache.normalized.api/Record.keys|{}keys[0]
        final fun <get-keys>(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/Record.keys.<get-keys>|<get-keys>(){}[0]
    final val mutationId // com.apollographql.apollo.cache.normalized.api/Record.mutationId|{}mutationId[0]
        final fun <get-mutationId>(): com.benasher44.uuid/Uuid? // com.apollographql.apollo.cache.normalized.api/Record.mutationId.<get-mutationId>|<get-mutationId>(){}[0]
    final val size // com.apollographql.apollo.cache.normalized.api/Record.size|{}size[0]
        final fun <get-size>(): kotlin/Int // com.apollographql.apollo.cache.normalized.api/Record.size.<get-size>|<get-size>(){}[0]
    final val sizeInBytes // com.apollographql.apollo.cache.normalized.api/Record.sizeInBytes|{}sizeInBytes[0]
        final fun <get-sizeInBytes>(): kotlin/Int // com.apollographql.apollo.cache.normalized.api/Record.sizeInBytes.<get-sizeInBytes>|<get-sizeInBytes>(){}[0]
    final val values // com.apollographql.apollo.cache.normalized.api/Record.values|{}values[0]
        final fun <get-values>(): kotlin.collections/Collection<kotlin/Any?> // com.apollographql.apollo.cache.normalized.api/Record.values.<get-values>|<get-values>(){}[0]

    final fun containsKey(kotlin/String): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/Record.containsKey|containsKey(kotlin.String){}[0]
    final fun containsValue(kotlin/Any?): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/Record.containsValue|containsValue(kotlin.Any?){}[0]
    final fun fieldKeys(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/Record.fieldKeys|fieldKeys(){}[0]
    final fun get(kotlin/String): kotlin/Any? // com.apollographql.apollo.cache.normalized.api/Record.get|get(kotlin.String){}[0]
    final fun isEmpty(): kotlin/Boolean // com.apollographql.apollo.cache.normalized.api/Record.isEmpty|isEmpty(){}[0]
    final fun mergeWith(com.apollographql.apollo.cache.normalized.api/Record): kotlin/Pair<com.apollographql.apollo.cache.normalized.api/Record, kotlin.collections/Set<kotlin/String>> // com.apollographql.apollo.cache.normalized.api/Record.mergeWith|mergeWith(com.apollographql.apollo.cache.normalized.api.Record){}[0]
    final fun referencedFields(): kotlin.collections/List<com.apollographql.apollo.cache.normalized.api/CacheKey> // com.apollographql.apollo.cache.normalized.api/Record.referencedFields|referencedFields(){}[0]

    final object Companion // com.apollographql.apollo.cache.normalized.api/Record.Companion|null[0]

    // Targets: [js]
    final fun asJsReadonlyMapView(): kotlin.js.collections/JsReadonlyMap<kotlin/String, kotlin/Any?> // com.apollographql.apollo.cache.normalized.api/Record.asJsReadonlyMapView|asJsReadonlyMapView(){}[0]
}

final object com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders { // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders|null[0]
    final const val DO_NOT_STORE // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.DO_NOT_STORE|{}DO_NOT_STORE[0]
        final fun <get-DO_NOT_STORE>(): kotlin/String // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.DO_NOT_STORE.<get-DO_NOT_STORE>|<get-DO_NOT_STORE>(){}[0]
    final const val EVICT_AFTER_READ // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.EVICT_AFTER_READ|{}EVICT_AFTER_READ[0]
        final fun <get-EVICT_AFTER_READ>(): kotlin/String // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.EVICT_AFTER_READ.<get-EVICT_AFTER_READ>|<get-EVICT_AFTER_READ>(){}[0]
    final const val MEMORY_CACHE_ONLY // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.MEMORY_CACHE_ONLY|{}MEMORY_CACHE_ONLY[0]
        final fun <get-MEMORY_CACHE_ONLY>(): kotlin/String // com.apollographql.apollo.cache.normalized.api/ApolloCacheHeaders.MEMORY_CACHE_ONLY.<get-MEMORY_CACHE_ONLY>|<get-MEMORY_CACHE_ONLY>(){}[0]
}

final object com.apollographql.apollo.cache.normalized.api/DefaultCacheResolver : com.apollographql.apollo.cache.normalized.api/CacheResolver { // com.apollographql.apollo.cache.normalized.api/DefaultCacheResolver|null[0]
    final fun resolveField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.apollo.cache.normalized.api/DefaultCacheResolver.resolveField|resolveField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}

final object com.apollographql.apollo.cache.normalized.api/FieldPolicyCacheResolver : com.apollographql.apollo.cache.normalized.api/CacheResolver { // com.apollographql.apollo.cache.normalized.api/FieldPolicyCacheResolver|null[0]
    final fun resolveField(com.apollographql.apollo.api/CompiledField, com.apollographql.apollo.api/Executable.Variables, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/String): kotlin/Any? // com.apollographql.apollo.cache.normalized.api/FieldPolicyCacheResolver.resolveField|resolveField(com.apollographql.apollo.api.CompiledField;com.apollographql.apollo.api.Executable.Variables;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.String){}[0]
}

final object com.apollographql.apollo.cache.normalized.api/TypePolicyCacheKeyGenerator : com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator { // com.apollographql.apollo.cache.normalized.api/TypePolicyCacheKeyGenerator|null[0]
    final fun cacheKeyForObject(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo.cache.normalized.api/CacheKeyGeneratorContext): com.apollographql.apollo.cache.normalized.api/CacheKey? // com.apollographql.apollo.cache.normalized.api/TypePolicyCacheKeyGenerator.cacheKeyForObject|cacheKeyForObject(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo.cache.normalized.api.CacheKeyGeneratorContext){}[0]
}

final fun (kotlin.collections/Collection<com.apollographql.apollo.cache.normalized.api/Record>?).com.apollographql.apollo.cache.normalized.api/dependentKeys(): kotlin.collections/Set<kotlin/String> // com.apollographql.apollo.cache.normalized.api/dependentKeys|dependentKeys@kotlin.collections.Collection<com.apollographql.apollo.cache.normalized.api.Record>?(){}[0]
final fun <#A: com.apollographql.apollo.api/Executable.Data> (com.apollographql.apollo.api/Executable<#A>).com.apollographql.apollo.cache.normalized.api/normalize(#A, com.apollographql.apollo.api/CustomScalarAdapters, com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator, kotlin/String): kotlin.collections/Map<kotlin/String, com.apollographql.apollo.cache.normalized.api/Record> // com.apollographql.apollo.cache.normalized.api/normalize|normalize@com.apollographql.apollo.api.Executable<0:0>(0:0;com.apollographql.apollo.api.CustomScalarAdapters;com.apollographql.apollo.cache.normalized.api.CacheKeyGenerator;kotlin.String){0§<com.apollographql.apollo.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo.api/Executable.Data> (com.apollographql.apollo.api/Executable<#A>).com.apollographql.apollo.cache.normalized.api/readDataFromCache(com.apollographql.apollo.api/CustomScalarAdapters, com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.apollo.cache.normalized.api/CacheResolver, com.apollographql.apollo.cache.normalized.api/CacheHeaders): #A // com.apollographql.apollo.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo.api.Executable<0:0>(com.apollographql.apollo.api.CustomScalarAdapters;com.apollographql.apollo.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.apollo.cache.normalized.api.CacheResolver;com.apollographql.apollo.cache.normalized.api.CacheHeaders){0§<com.apollographql.apollo.api.Executable.Data>}[0]
final fun <#A: com.apollographql.apollo.api/Fragment.Data> (com.apollographql.apollo.api/Fragment<#A>).com.apollographql.apollo.cache.normalized.api/readDataFromCache(com.apollographql.apollo.cache.normalized.api/CacheKey, com.apollographql.apollo.api/CustomScalarAdapters, com.apollographql.apollo.cache.normalized.api/ReadOnlyNormalizedCache, com.apollographql.apollo.cache.normalized.api/CacheResolver, com.apollographql.apollo.cache.normalized.api/CacheHeaders): #A // com.apollographql.apollo.cache.normalized.api/readDataFromCache|readDataFromCache@com.apollographql.apollo.api.Fragment<0:0>(com.apollographql.apollo.cache.normalized.api.CacheKey;com.apollographql.apollo.api.CustomScalarAdapters;com.apollographql.apollo.cache.normalized.api.ReadOnlyNormalizedCache;com.apollographql.apollo.cache.normalized.api.CacheResolver;com.apollographql.apollo.cache.normalized.api.CacheHeaders){0§<com.apollographql.apollo.api.Fragment.Data>}[0]
final fun <#A: com.apollographql.apollo.api/Operation.Data> (com.apollographql.apollo.api/Operation<#A>).com.apollographql.apollo.cache.normalized.api/normalize(#A, com.apollographql.apollo.api/CustomScalarAdapters, com.apollographql.apollo.cache.normalized.api/CacheKeyGenerator): kotlin.collections/Map<kotlin/String, com.apollographql.apollo.cache.normalized.api/Record> // com.apollographql.apollo.cache.normalized.api/normalize|normalize@com.apollographql.apollo.api.Operation<0:0>(0:0;com.apollographql.apollo.api.CustomScalarAdapters;com.apollographql.apollo.cache.normalized.api.CacheKeyGenerator){0§<com.apollographql.apollo.api.Operation.Data>}[0]
