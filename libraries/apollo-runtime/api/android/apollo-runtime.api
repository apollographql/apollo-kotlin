public final class com/apollographql/apollo/ApolloCall : com/apollographql/apollo/api/MutableExecutionOptions {
	public fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Ljava/lang/Object;
	public fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	public fun canBeBatched (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun canBeBatched (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun copy ()Lcom/apollographql/apollo/ApolloCall;
	public fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun execute (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun executeV3 (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun failFastIfOffline (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public fun getCanBeBatched ()Ljava/lang/Boolean;
	public fun getEnableAutoPersistedQueries ()Ljava/lang/Boolean;
	public fun getExecutionContext ()Lcom/apollographql/apollo/api/ExecutionContext;
	public fun getHttpHeaders ()Ljava/util/List;
	public fun getHttpMethod ()Lcom/apollographql/apollo/api/http/HttpMethod;
	public final fun getIgnoreApolloClientHttpHeaders ()Ljava/lang/Boolean;
	public final fun getOperation ()Lcom/apollographql/apollo/api/Operation;
	public fun getSendApqExtensions ()Ljava/lang/Boolean;
	public fun getSendDocument ()Ljava/lang/Boolean;
	public fun httpHeaders (Ljava/util/List;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun httpHeaders (Ljava/util/List;)Ljava/lang/Object;
	public fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Ljava/lang/Object;
	public final fun ignoreApolloClientHttpHeaders (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public fun sendApqExtensions (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun sendApqExtensions (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun sendDocument (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloCall;
	public synthetic fun sendDocument (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun toFlow ()Lkotlinx/coroutines/flow/Flow;
	public final fun toFlowV3 ()Lkotlinx/coroutines/flow/Flow;
}

public final class com/apollographql/apollo/ApolloClient : com/apollographql/apollo/api/ExecutionOptions, java/io/Closeable {
	public static final field Companion Lcom/apollographql/apollo/ApolloClient$Companion;
	public synthetic fun <init> (Lcom/apollographql/apollo/ApolloClient$Builder;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun builder ()Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun close ()V
	public final fun dispose ()V
	public final fun executeAsFlow (Lcom/apollographql/apollo/api/ApolloRequest;)Lkotlinx/coroutines/flow/Flow;
	public fun getCanBeBatched ()Ljava/lang/Boolean;
	public final fun getCustomScalarAdapters ()Lcom/apollographql/apollo/api/CustomScalarAdapters;
	public fun getEnableAutoPersistedQueries ()Ljava/lang/Boolean;
	public fun getExecutionContext ()Lcom/apollographql/apollo/api/ExecutionContext;
	public fun getHttpHeaders ()Ljava/util/List;
	public fun getHttpMethod ()Lcom/apollographql/apollo/api/http/HttpMethod;
	public final fun getInterceptors ()Ljava/util/List;
	public final fun getNetworkTransport ()Lcom/apollographql/apollo/network/NetworkTransport;
	public fun getSendApqExtensions ()Ljava/lang/Boolean;
	public fun getSendDocument ()Ljava/lang/Boolean;
	public final fun getSubscriptionNetworkTransport ()Lcom/apollographql/apollo/network/NetworkTransport;
	public final fun mutation (Lcom/apollographql/apollo/api/Mutation;)Lcom/apollographql/apollo/ApolloCall;
	public final fun newBuilder ()Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun query (Lcom/apollographql/apollo/api/Query;)Lcom/apollographql/apollo/ApolloCall;
	public final fun subscription (Lcom/apollographql/apollo/api/Subscription;)Lcom/apollographql/apollo/ApolloCall;
}

public final class com/apollographql/apollo/ApolloClient$Builder : com/apollographql/apollo/api/MutableExecutionOptions {
	public fun <init> ()V
	public final fun addCustomScalarAdapter (Lcom/apollographql/apollo/api/CustomScalarType;Lcom/apollographql/apollo/api/Adapter;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Ljava/lang/Object;
	public fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	public final fun addHttpInterceptor (Lcom/apollographql/apollo/network/http/HttpInterceptor;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun addInterceptor (Lcom/apollographql/apollo/interceptor/ApolloInterceptor;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun addInterceptors (Ljava/util/List;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun autoPersistedQueries ()Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;Z)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static synthetic fun autoPersistedQueries$default (Lcom/apollographql/apollo/ApolloClient$Builder;Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;ZILjava/lang/Object;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun build ()Lcom/apollographql/apollo/ApolloClient;
	public fun canBeBatched (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun canBeBatched (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun copy ()Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun customScalarAdapters (Lcom/apollographql/apollo/api/CustomScalarAdapters;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun dispatcher (Lkotlinx/coroutines/CoroutineDispatcher;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun executionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun getCanBeBatched ()Ljava/lang/Boolean;
	public final fun getCustomScalarAdapters ()Lcom/apollographql/apollo/api/CustomScalarAdapters;
	public final fun getDispatcher ()Lkotlinx/coroutines/CoroutineDispatcher;
	public fun getEnableAutoPersistedQueries ()Ljava/lang/Boolean;
	public fun getExecutionContext ()Lcom/apollographql/apollo/api/ExecutionContext;
	public final fun getHttpEngine ()Lcom/apollographql/apollo/network/http/HttpEngine;
	public final fun getHttpExposeErrorBody ()Ljava/lang/Boolean;
	public fun getHttpHeaders ()Ljava/util/List;
	public final fun getHttpInterceptors ()Ljava/util/List;
	public fun getHttpMethod ()Lcom/apollographql/apollo/api/http/HttpMethod;
	public final fun getHttpServerUrl ()Ljava/lang/String;
	public final fun getInterceptors ()Ljava/util/List;
	public final fun getNetworkTransport ()Lcom/apollographql/apollo/network/NetworkTransport;
	public fun getSendApqExtensions ()Ljava/lang/Boolean;
	public fun getSendDocument ()Ljava/lang/Boolean;
	public final fun getSubscriptionNetworkTransport ()Lcom/apollographql/apollo/network/NetworkTransport;
	public final fun getWebSocketEngine ()Lcom/apollographql/apollo/network/ws/WebSocketEngine;
	public final fun getWebSocketIdleTimeoutMillis ()Ljava/lang/Long;
	public final fun getWebSocketReopenServerUrl ()Lkotlin/jvm/functions/Function1;
	public final fun getWebSocketReopenWhen ()Lkotlin/jvm/functions/Function3;
	public final fun getWebSocketServerUrl ()Ljava/lang/String;
	public final fun getWsProtocolFactory ()Lcom/apollographql/apollo/network/ws/WsProtocol$Factory;
	public final fun httpBatching ()Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun httpBatching (J)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun httpBatching (JI)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun httpBatching (JIZ)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static synthetic fun httpBatching$default (Lcom/apollographql/apollo/ApolloClient$Builder;JIZILjava/lang/Object;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun httpEngine (Lcom/apollographql/apollo/network/http/HttpEngine;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun httpExposeErrorBody (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun httpHeaders (Ljava/util/List;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun httpHeaders (Ljava/util/List;)Ljava/lang/Object;
	public final fun httpInterceptors (Ljava/util/List;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Ljava/lang/Object;
	public final fun httpServerUrl (Ljava/lang/String;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun interceptors (Ljava/util/List;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun networkTransport (Lcom/apollographql/apollo/network/NetworkTransport;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun removeHttpInterceptor (Lcom/apollographql/apollo/network/http/HttpInterceptor;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun removeInterceptor (Lcom/apollographql/apollo/interceptor/ApolloInterceptor;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public fun sendApqExtensions (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun sendApqExtensions (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun sendDocument (Ljava/lang/Boolean;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public synthetic fun sendDocument (Ljava/lang/Boolean;)Ljava/lang/Object;
	public final fun serverUrl (Ljava/lang/String;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun subscriptionNetworkTransport (Lcom/apollographql/apollo/network/NetworkTransport;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun webSocketEngine (Lcom/apollographql/apollo/network/ws/WebSocketEngine;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun webSocketIdleTimeoutMillis (Ljava/lang/Long;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun webSocketReopenWhen (Lkotlin/jvm/functions/Function3;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun webSocketServerUrl (Ljava/lang/String;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun webSocketServerUrl (Lkotlin/jvm/functions/Function1;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public final fun wsProtocol (Lcom/apollographql/apollo/network/ws/WsProtocol$Factory;)Lcom/apollographql/apollo/ApolloClient$Builder;
}

public final class com/apollographql/apollo/ApolloClient$Companion {
	public final fun builder ()Lcom/apollographql/apollo/ApolloClient$Builder;
}

public final class com/apollographql/apollo/AutoPersistedQueryInfo : com/apollographql/apollo/api/ExecutionContext$Element {
	public static final field Key Lcom/apollographql/apollo/AutoPersistedQueryInfo$Key;
	public fun <init> (Z)V
	public final fun getHit ()Z
	public fun getKey ()Lcom/apollographql/apollo/api/ExecutionContext$Key;
}

public final class com/apollographql/apollo/AutoPersistedQueryInfo$Key : com/apollographql/apollo/api/ExecutionContext$Key {
}

public final class com/apollographql/apollo/AutoPersistedQueryInfoKt {
	public static final fun getAutoPersistedQueryInfo (Lcom/apollographql/apollo/api/ApolloResponse;)Lcom/apollographql/apollo/AutoPersistedQueryInfo;
}

public final class com/apollographql/apollo/ConcurrencyInfo$Key : com/apollographql/apollo/api/ExecutionContext$Key {
}

public abstract interface class com/apollographql/apollo/interceptor/ApolloInterceptor {
	public abstract fun intercept (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/apollo/interceptor/ApolloInterceptorChain;)Lkotlinx/coroutines/flow/Flow;
}

public abstract interface class com/apollographql/apollo/interceptor/ApolloInterceptorChain {
	public abstract fun proceed (Lcom/apollographql/apollo/api/ApolloRequest;)Lkotlinx/coroutines/flow/Flow;
}

public final class com/apollographql/apollo/interceptor/AutoPersistedQueryInterceptor : com/apollographql/apollo/interceptor/ApolloInterceptor {
	public static final field Companion Lcom/apollographql/apollo/interceptor/AutoPersistedQueryInterceptor$Companion;
	public static final field PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED Ljava/lang/String;
	public static final field PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND Ljava/lang/String;
	public fun <init> (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;)V
	public fun intercept (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/apollo/interceptor/ApolloInterceptorChain;)Lkotlinx/coroutines/flow/Flow;
}

public final class com/apollographql/apollo/interceptor/AutoPersistedQueryInterceptor$Companion {
}

public abstract interface class com/apollographql/apollo/network/NetworkTransport {
	public abstract fun dispose ()V
	public abstract fun execute (Lcom/apollographql/apollo/api/ApolloRequest;)Lkotlinx/coroutines/flow/Flow;
}

public final class com/apollographql/apollo/network/OkHttpExtensionsKt {
	public static final fun okHttpCallFactory (Lcom/apollographql/apollo/ApolloClient$Builder;Lkotlin/jvm/functions/Function0;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static final fun okHttpCallFactory (Lcom/apollographql/apollo/ApolloClient$Builder;Lokhttp3/Call$Factory;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static final fun okHttpCallFactory (Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;Lokhttp3/Call$Factory;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public static final fun okHttpClient (Lcom/apollographql/apollo/ApolloClient$Builder;Lokhttp3/OkHttpClient;)Lcom/apollographql/apollo/ApolloClient$Builder;
	public static final fun okHttpClient (Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;Lokhttp3/OkHttpClient;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public static final fun okHttpClient (Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;Lokhttp3/OkHttpClient;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
}

public final class com/apollographql/apollo/network/http/ApolloClientAwarenessInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/BatchingHttpInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public static final field Companion Lcom/apollographql/apollo/network/http/BatchingHttpInterceptor$Companion;
	public fun <init> ()V
	public fun <init> (J)V
	public fun <init> (JI)V
	public fun <init> (JIZ)V
	public synthetic fun <init> (JIZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public static final fun configureApolloCall (Lcom/apollographql/apollo/ApolloCall;Z)V
	public static final fun configureApolloClientBuilder (Lcom/apollographql/apollo/ApolloClient$Builder;Z)V
	public fun dispose ()V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/BatchingHttpInterceptor$Companion {
	public final fun configureApolloCall (Lcom/apollographql/apollo/ApolloCall;Z)V
	public final fun configureApolloClientBuilder (Lcom/apollographql/apollo/ApolloClient$Builder;Z)V
}

public final class com/apollographql/apollo/network/http/BatchingHttpInterceptor$PendingRequest {
	public fun <init> (Lcom/apollographql/apollo/api/http/HttpRequest;)V
	public final fun getDeferred ()Lkotlinx/coroutines/CompletableDeferred;
	public final fun getRequest ()Lcom/apollographql/apollo/api/http/HttpRequest;
}

public final class com/apollographql/apollo/network/http/DefaultHttpEngine {
	public static final fun DefaultHttpEngine (J)Lcom/apollographql/apollo/network/http/HttpEngine;
	public static final fun DefaultHttpEngine (JJ)Lcom/apollographql/apollo/network/http/HttpEngine;
	public static final fun DefaultHttpEngine (Lkotlin/jvm/functions/Function0;)Lcom/apollographql/apollo/network/http/HttpEngine;
	public static final fun DefaultHttpEngine (Lokhttp3/Call$Factory;)Lcom/apollographql/apollo/network/http/HttpEngine;
	public static final fun DefaultHttpEngine (Lokhttp3/OkHttpClient;)Lcom/apollographql/apollo/network/http/HttpEngine;
	public static synthetic fun DefaultHttpEngine$default (JILjava/lang/Object;)Lcom/apollographql/apollo/network/http/HttpEngine;
}

public final class com/apollographql/apollo/network/http/HeadersInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public fun <init> (Ljava/util/List;)V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/HttpCall {
	public fun <init> (Lcom/apollographql/apollo/network/http/HttpEngine;Lcom/apollographql/apollo/api/http/HttpMethod;Ljava/lang/String;)V
	public final fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/apollo/network/http/HttpCall;
	public final fun addHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/apollo/network/http/HttpCall;
	public final fun addHeaders (Ljava/util/List;)Lcom/apollographql/apollo/network/http/HttpCall;
	public final fun body (Lcom/apollographql/apollo/api/http/HttpBody;)Lcom/apollographql/apollo/network/http/HttpCall;
	public final fun execute (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun headers (Ljava/util/List;)Lcom/apollographql/apollo/network/http/HttpCall;
}

public abstract interface class com/apollographql/apollo/network/http/HttpEngine : java/io/Closeable {
	public fun close ()V
	public fun dispose ()V
	public abstract fun execute (Lcom/apollographql/apollo/api/http/HttpRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/HttpEngineKt {
	public static final fun get (Lcom/apollographql/apollo/network/http/HttpEngine;Ljava/lang/String;)Lcom/apollographql/apollo/network/http/HttpCall;
	public static final fun post (Lcom/apollographql/apollo/network/http/HttpEngine;Ljava/lang/String;)Lcom/apollographql/apollo/network/http/HttpCall;
}

public final class com/apollographql/apollo/network/http/HttpInfo : com/apollographql/apollo/api/ExecutionContext$Element {
	public static final field Key Lcom/apollographql/apollo/network/http/HttpInfo$Key;
	public fun <init> (JJILjava/util/List;)V
	public final fun getEndMillis ()J
	public final fun getHeaders ()Ljava/util/List;
	public fun getKey ()Lcom/apollographql/apollo/api/ExecutionContext$Key;
	public final fun getMillisEnd ()J
	public final fun getMillisStart ()J
	public final fun getStartMillis ()J
	public final fun getStatusCode ()I
}

public final class com/apollographql/apollo/network/http/HttpInfo$Key : com/apollographql/apollo/api/ExecutionContext$Key {
}

public abstract interface class com/apollographql/apollo/network/http/HttpInterceptor {
	public fun dispose ()V
	public abstract fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class com/apollographql/apollo/network/http/HttpInterceptorChain {
	public abstract fun proceed (Lcom/apollographql/apollo/api/http/HttpRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/HttpNetworkTransport : com/apollographql/apollo/network/NetworkTransport {
	public synthetic fun <init> (Lcom/apollographql/apollo/api/http/HttpRequestComposer;Lcom/apollographql/apollo/network/http/HttpEngine;Ljava/util/List;ZLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun dispose ()V
	public fun execute (Lcom/apollographql/apollo/api/ApolloRequest;)Lkotlinx/coroutines/flow/Flow;
	public final fun execute (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/api/CustomScalarAdapters;)Lkotlinx/coroutines/flow/Flow;
	public final fun getInterceptors ()Ljava/util/List;
	public final fun newBuilder ()Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
}

public final class com/apollographql/apollo/network/http/HttpNetworkTransport$Builder {
	public fun <init> ()V
	public final fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun addInterceptor (Lcom/apollographql/apollo/network/http/HttpInterceptor;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun build ()Lcom/apollographql/apollo/network/http/HttpNetworkTransport;
	public final fun exposeErrorBody (Z)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun httpEngine (Lcom/apollographql/apollo/network/http/HttpEngine;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun httpHeaders (Ljava/util/List;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun httpRequestComposer (Lcom/apollographql/apollo/api/http/HttpRequestComposer;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun interceptors (Ljava/util/List;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
	public final fun serverUrl (Ljava/lang/String;)Lcom/apollographql/apollo/network/http/HttpNetworkTransport$Builder;
}

public final class com/apollographql/apollo/network/http/HttpNetworkTransport$EngineInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public fun <init> (Lcom/apollographql/apollo/network/http/HttpNetworkTransport;)V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/LoggingInterceptor : com/apollographql/apollo/network/http/HttpInterceptor {
	public fun <init> ()V
	public fun <init> (Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/apollo/network/http/HttpInterceptorChain;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/http/LoggingInterceptor$Level : java/lang/Enum {
	public static final field BASIC Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
	public static final field BODY Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
	public static final field HEADERS Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
	public static final field NONE Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
	public static fun values ()[Lcom/apollographql/apollo/network/http/LoggingInterceptor$Level;
}

public final class com/apollographql/apollo/network/websocket/WebSocketEngine_jvmKt {
	public static final fun WebSocketEngine ()Lcom/apollographql/apollo/network/websocket/WebSocketEngine;
}

public final class com/apollographql/apollo/network/ws/AppSyncWsProtocol : com/apollographql/apollo/network/ws/WsProtocol {
	public static final field Companion Lcom/apollographql/apollo/network/ws/AppSyncWsProtocol$Companion;
	public fun <init> (JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;)V
	public synthetic fun <init> (JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;JLcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;)V
	public fun connectionInit (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public final class com/apollographql/apollo/network/ws/AppSyncWsProtocol$Companion {
	public final fun buildUrl (Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)Ljava/lang/String;
	public static synthetic fun buildUrl$default (Lcom/apollographql/apollo/network/ws/AppSyncWsProtocol$Companion;Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;ILjava/lang/Object;)Ljava/lang/String;
}

public final class com/apollographql/apollo/network/ws/AppSyncWsProtocol$Factory : com/apollographql/apollo/network/ws/WsProtocol$Factory {
	public fun <init> ()V
	public fun <init> (JLkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (JLkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;J)V
	public synthetic fun <init> (Ljava/util/Map;JILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;)Lcom/apollographql/apollo/network/ws/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public final class com/apollographql/apollo/network/ws/DefaultWebSocketEngine : com/apollographql/apollo/network/ws/WebSocketEngine {
	public fun <init> ()V
	public fun <init> (Lokhttp3/WebSocket$Factory;)V
	public fun open (Ljava/lang/String;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/ws/GraphQLWsProtocol : com/apollographql/apollo/network/ws/WsProtocol {
	public fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/Map;Ljava/util/Map;JJLcom/apollographql/apollo/network/ws/WsFrameType;Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/Map;Ljava/util/Map;JJLcom/apollographql/apollo/network/ws/WsFrameType;Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun connectionInit (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun run (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public final class com/apollographql/apollo/network/ws/GraphQLWsProtocol$Factory : com/apollographql/apollo/network/ws/WsProtocol$Factory {
	public fun <init> ()V
	public fun <init> (Lkotlin/jvm/functions/Function1;JLjava/util/Map;Ljava/util/Map;JLcom/apollographql/apollo/network/ws/WsFrameType;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;JLjava/util/Map;Ljava/util/Map;JLcom/apollographql/apollo/network/ws/WsFrameType;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;)Lcom/apollographql/apollo/network/ws/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public final class com/apollographql/apollo/network/ws/SubscriptionWsProtocol : com/apollographql/apollo/network/ws/WsProtocol {
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;)V
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;J)V
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;JLkotlin/jvm/functions/Function1;)V
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WsFrameType;)V
	public synthetic fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WsFrameType;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun connectionInit (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public final class com/apollographql/apollo/network/ws/SubscriptionWsProtocol$Factory : com/apollographql/apollo/network/ws/WsProtocol$Factory {
	public fun <init> ()V
	public fun <init> (J)V
	public fun <init> (JLkotlin/jvm/functions/Function1;)V
	public fun <init> (JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WsFrameType;)V
	public synthetic fun <init> (JLkotlin/jvm/functions/Function1;Lcom/apollographql/apollo/network/ws/WsFrameType;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;)Lcom/apollographql/apollo/network/ws/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public class com/apollographql/apollo/network/ws/SubscriptionWsProtocolAdapter : com/apollographql/apollo/network/ws/WsProtocol {
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;)V
	public fun connectionInit (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public abstract interface class com/apollographql/apollo/network/ws/WebSocketConnection {
	public abstract fun close ()V
	public abstract fun receive (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send (Ljava/lang/String;)V
	public abstract fun send (Lokio/ByteString;)V
}

public abstract interface class com/apollographql/apollo/network/ws/WebSocketEngine {
	public abstract fun open (Ljava/lang/String;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun open$default (Lcom/apollographql/apollo/network/ws/WebSocketEngine;Ljava/lang/String;Ljava/util/List;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class com/apollographql/apollo/network/ws/WebSocketEngineKt {
	public static final field CLOSE_GOING_AWAY I
	public static final field CLOSE_NORMAL I
}

public final class com/apollographql/apollo/network/ws/WebSocketNetworkTransport : com/apollographql/apollo/network/NetworkTransport {
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/List;Lcom/apollographql/apollo/network/ws/WebSocketEngine;JLcom/apollographql/apollo/network/ws/WsProtocol$Factory;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun closeConnection (Ljava/lang/Throwable;)V
	public fun dispose ()V
	public fun execute (Lcom/apollographql/apollo/api/ApolloRequest;)Lkotlinx/coroutines/flow/Flow;
	public final fun getSubscriptionCount ()Lkotlinx/coroutines/flow/StateFlow;
}

public final class com/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder {
	public fun <init> ()V
	public final fun addHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun addHeaders (Ljava/util/List;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun build ()Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport;
	public final fun headers (Ljava/util/List;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun idleTimeoutMillis (J)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun protocol (Lcom/apollographql/apollo/network/ws/WsProtocol$Factory;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun reopenWhen (Lkotlin/jvm/functions/Function3;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun serverUrl (Ljava/lang/String;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun serverUrl (Lkotlin/jvm/functions/Function1;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
	public final fun webSocketEngine (Lcom/apollographql/apollo/network/ws/WebSocketEngine;)Lcom/apollographql/apollo/network/ws/WebSocketNetworkTransport$Builder;
}

public final class com/apollographql/apollo/network/ws/WebSocketNetworkTransportKt {
	public static final fun closeConnection (Lcom/apollographql/apollo/network/NetworkTransport;Ljava/lang/Throwable;)V
}

public final class com/apollographql/apollo/network/ws/WsFrameType : java/lang/Enum {
	public static final field Binary Lcom/apollographql/apollo/network/ws/WsFrameType;
	public static final field Text Lcom/apollographql/apollo/network/ws/WsFrameType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lcom/apollographql/apollo/network/ws/WsFrameType;
	public static fun values ()[Lcom/apollographql/apollo/network/ws/WsFrameType;
}

public abstract class com/apollographql/apollo/network/ws/WsProtocol {
	public fun <init> (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;)V
	public fun close ()V
	public abstract fun connectionInit (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun getListener ()Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;
	protected final fun getWebSocketConnection ()Lcom/apollographql/apollo/network/ws/WebSocketConnection;
	public abstract fun handleServerMessage (Ljava/util/Map;)V
	protected final fun receiveMessageMap (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun run (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun sendMessageMap (Ljava/util/Map;Lcom/apollographql/apollo/network/ws/WsFrameType;)V
	protected final fun sendMessageMapBinary (Ljava/util/Map;)V
	protected final fun sendMessageMapText (Ljava/util/Map;)V
	public abstract fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public abstract fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	protected final fun toByteString (Ljava/util/Map;)Lokio/ByteString;
	protected final fun toMessageMap (Ljava/lang/String;)Ljava/util/Map;
	protected final fun toUtf8 (Ljava/util/Map;)Ljava/lang/String;
}

public abstract interface class com/apollographql/apollo/network/ws/WsProtocol$Factory {
	public abstract fun create (Lcom/apollographql/apollo/network/ws/WebSocketConnection;Lcom/apollographql/apollo/network/ws/WsProtocol$Listener;Lkotlinx/coroutines/CoroutineScope;)Lcom/apollographql/apollo/network/ws/WsProtocol;
	public abstract fun getName ()Ljava/lang/String;
}

public abstract interface class com/apollographql/apollo/network/ws/WsProtocol$Listener {
	public abstract fun generalError (Ljava/util/Map;)V
	public abstract fun networkError (Ljava/lang/Throwable;)V
	public abstract fun operationComplete (Ljava/lang/String;)V
	public abstract fun operationError (Ljava/lang/String;Ljava/util/Map;)V
	public abstract fun operationResponse (Ljava/lang/String;Ljava/util/Map;)V
}

