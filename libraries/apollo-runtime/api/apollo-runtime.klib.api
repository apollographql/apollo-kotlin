// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Alias: apple => [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64]
// Alias: ios => [iosArm64, iosSimulatorArm64, iosX64]
// Alias: macos => [macosArm64, macosX64]
// Alias: tvos => [tvosArm64, tvosSimulatorArm64, tvosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.apollographql.apollo:apollo-runtime>
final enum class com.apollographql.apollo.network.ws/WsFrameType : kotlin/Enum<com.apollographql.apollo.network.ws/WsFrameType> { // com.apollographql.apollo.network.ws/WsFrameType|null[0]
    enum entry Binary // com.apollographql.apollo.network.ws/WsFrameType.Binary|null[0]
    enum entry Text // com.apollographql.apollo.network.ws/WsFrameType.Text|null[0]

    final val entries // com.apollographql.apollo.network.ws/WsFrameType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.apollo.network.ws/WsFrameType> // com.apollographql.apollo.network.ws/WsFrameType.entries.<get-entries>|<get-entries>#static(){}[0]

    final fun valueOf(kotlin/String): com.apollographql.apollo.network.ws/WsFrameType // com.apollographql.apollo.network.ws/WsFrameType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<com.apollographql.apollo.network.ws/WsFrameType> // com.apollographql.apollo.network.ws/WsFrameType.values|values#static(){}[0]
}

abstract interface com.apollographql.apollo.interceptor/ApolloInterceptor { // com.apollographql.apollo.interceptor/ApolloInterceptor|null[0]
    abstract fun <#A1: com.apollographql.apollo.api/Operation.Data> intercept(com.apollographql.apollo.api/ApolloRequest<#A1>, com.apollographql.apollo.interceptor/ApolloInterceptorChain): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.interceptor/ApolloInterceptor.intercept|intercept(com.apollographql.apollo.api.ApolloRequest<0:0>;com.apollographql.apollo.interceptor.ApolloInterceptorChain){0§<com.apollographql.apollo.api.Operation.Data>}[0]
}

abstract interface com.apollographql.apollo.interceptor/ApolloInterceptorChain { // com.apollographql.apollo.interceptor/ApolloInterceptorChain|null[0]
    abstract fun <#A1: com.apollographql.apollo.api/Operation.Data> proceed(com.apollographql.apollo.api/ApolloRequest<#A1>): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.interceptor/ApolloInterceptorChain.proceed|proceed(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
}

abstract interface com.apollographql.apollo.network.http/HttpEngine : okio/Closeable { // com.apollographql.apollo.network.http/HttpEngine|null[0]
    abstract suspend fun execute(com.apollographql.apollo.api.http/HttpRequest): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HttpEngine.execute|execute(com.apollographql.apollo.api.http.HttpRequest){}[0]
    open fun close() // com.apollographql.apollo.network.http/HttpEngine.close|close(){}[0]
    open fun dispose() // com.apollographql.apollo.network.http/HttpEngine.dispose|dispose(){}[0]
}

abstract interface com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/HttpInterceptor|null[0]
    abstract suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HttpInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]
    open fun dispose() // com.apollographql.apollo.network.http/HttpInterceptor.dispose|dispose(){}[0]
}

abstract interface com.apollographql.apollo.network.http/HttpInterceptorChain { // com.apollographql.apollo.network.http/HttpInterceptorChain|null[0]
    abstract suspend fun proceed(com.apollographql.apollo.api.http/HttpRequest): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HttpInterceptorChain.proceed|proceed(com.apollographql.apollo.api.http.HttpRequest){}[0]
}

abstract interface com.apollographql.apollo.network.ws/WebSocketConnection { // com.apollographql.apollo.network.ws/WebSocketConnection|null[0]
    abstract fun close() // com.apollographql.apollo.network.ws/WebSocketConnection.close|close(){}[0]
    abstract fun send(kotlin/String) // com.apollographql.apollo.network.ws/WebSocketConnection.send|send(kotlin.String){}[0]
    abstract fun send(okio/ByteString) // com.apollographql.apollo.network.ws/WebSocketConnection.send|send(okio.ByteString){}[0]
    abstract suspend fun receive(): kotlin/String // com.apollographql.apollo.network.ws/WebSocketConnection.receive|receive(){}[0]
}

abstract interface com.apollographql.apollo.network.ws/WebSocketEngine { // com.apollographql.apollo.network.ws/WebSocketEngine|null[0]
    abstract suspend fun open(kotlin/String, kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader> = ...): com.apollographql.apollo.network.ws/WebSocketConnection // com.apollographql.apollo.network.ws/WebSocketEngine.open|open(kotlin.String;kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
}

abstract interface com.apollographql.apollo.network/NetworkTransport { // com.apollographql.apollo.network/NetworkTransport|null[0]
    abstract fun <#A1: com.apollographql.apollo.api/Operation.Data> execute(com.apollographql.apollo.api/ApolloRequest<#A1>): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.network/NetworkTransport.execute|execute(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    abstract fun dispose() // com.apollographql.apollo.network/NetworkTransport.dispose|dispose(){}[0]
}

abstract class com.apollographql.apollo.network.ws/WsProtocol { // com.apollographql.apollo.network.ws/WsProtocol|null[0]
    constructor <init>(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener) // com.apollographql.apollo.network.ws/WsProtocol.<init>|<init>(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener){}[0]

    final val listener // com.apollographql.apollo.network.ws/WsProtocol.listener|{}listener[0]
        final fun <get-listener>(): com.apollographql.apollo.network.ws/WsProtocol.Listener // com.apollographql.apollo.network.ws/WsProtocol.listener.<get-listener>|<get-listener>(){}[0]
    final val webSocketConnection // com.apollographql.apollo.network.ws/WsProtocol.webSocketConnection|{}webSocketConnection[0]
        final fun <get-webSocketConnection>(): com.apollographql.apollo.network.ws/WebSocketConnection // com.apollographql.apollo.network.ws/WsProtocol.webSocketConnection.<get-webSocketConnection>|<get-webSocketConnection>(){}[0]

    abstract fun <#A1: com.apollographql.apollo.api/Operation.Data> startOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/WsProtocol.startOperation|startOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    abstract fun <#A1: com.apollographql.apollo.api/Operation.Data> stopOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/WsProtocol.stopOperation|stopOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    abstract fun handleServerMessage(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/WsProtocol.handleServerMessage|handleServerMessage(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    abstract suspend fun connectionInit() // com.apollographql.apollo.network.ws/WsProtocol.connectionInit|connectionInit(){}[0]
    final fun (kotlin.collections/Map<kotlin/String, kotlin/Any?>).toByteString(): okio/ByteString // com.apollographql.apollo.network.ws/WsProtocol.toByteString|toByteString@kotlin.collections.Map<kotlin.String,kotlin.Any?>(){}[0]
    final fun (kotlin.collections/Map<kotlin/String, kotlin/Any?>).toUtf8(): kotlin/String // com.apollographql.apollo.network.ws/WsProtocol.toUtf8|toUtf8@kotlin.collections.Map<kotlin.String,kotlin.Any?>(){}[0]
    final fun (kotlin/String).toMessageMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?>? // com.apollographql.apollo.network.ws/WsProtocol.toMessageMap|toMessageMap@kotlin.String(){}[0]
    final fun sendMessageMap(kotlin.collections/Map<kotlin/String, kotlin/Any?>, com.apollographql.apollo.network.ws/WsFrameType) // com.apollographql.apollo.network.ws/WsProtocol.sendMessageMap|sendMessageMap(kotlin.collections.Map<kotlin.String,kotlin.Any?>;com.apollographql.apollo.network.ws.WsFrameType){}[0]
    final fun sendMessageMapBinary(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/WsProtocol.sendMessageMapBinary|sendMessageMapBinary(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final fun sendMessageMapText(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/WsProtocol.sendMessageMapText|sendMessageMapText(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final suspend fun receiveMessageMap(): kotlin.collections/Map<kotlin/String, kotlin/Any?> // com.apollographql.apollo.network.ws/WsProtocol.receiveMessageMap|receiveMessageMap(){}[0]
    open fun close() // com.apollographql.apollo.network.ws/WsProtocol.close|close(){}[0]
    open suspend fun run() // com.apollographql.apollo.network.ws/WsProtocol.run|run(){}[0]

    abstract interface Factory { // com.apollographql.apollo.network.ws/WsProtocol.Factory|null[0]
        abstract val name // com.apollographql.apollo.network.ws/WsProtocol.Factory.name|{}name[0]
            abstract fun <get-name>(): kotlin/String // com.apollographql.apollo.network.ws/WsProtocol.Factory.name.<get-name>|<get-name>(){}[0]

        abstract fun create(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlinx.coroutines/CoroutineScope): com.apollographql.apollo.network.ws/WsProtocol // com.apollographql.apollo.network.ws/WsProtocol.Factory.create|create(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlinx.coroutines.CoroutineScope){}[0]
    }

    abstract interface Listener { // com.apollographql.apollo.network.ws/WsProtocol.Listener|null[0]
        abstract fun generalError(kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.apollo.network.ws/WsProtocol.Listener.generalError|generalError(kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        abstract fun networkError(kotlin/Throwable) // com.apollographql.apollo.network.ws/WsProtocol.Listener.networkError|networkError(kotlin.Throwable){}[0]
        abstract fun operationComplete(kotlin/String) // com.apollographql.apollo.network.ws/WsProtocol.Listener.operationComplete|operationComplete(kotlin.String){}[0]
        abstract fun operationError(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>?) // com.apollographql.apollo.network.ws/WsProtocol.Listener.operationError|operationError(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>?){}[0]
        abstract fun operationResponse(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/WsProtocol.Listener.operationResponse|operationResponse(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    }
}

final class <#A: com.apollographql.apollo.api/Operation.Data> com.apollographql.apollo/ApolloCall : com.apollographql.apollo.api/MutableExecutionOptions<com.apollographql.apollo/ApolloCall<#A>> { // com.apollographql.apollo/ApolloCall|null[0]
    final val canBeBatched // com.apollographql.apollo/ApolloCall.canBeBatched|{}canBeBatched[0]
        final fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo/ApolloCall.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
    final val enableAutoPersistedQueries // com.apollographql.apollo/ApolloCall.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
        final fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo/ApolloCall.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
    final val executionContext // com.apollographql.apollo/ApolloCall.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo.api/ExecutionContext // com.apollographql.apollo/ApolloCall.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val httpHeaders // com.apollographql.apollo/ApolloCall.httpHeaders|{}httpHeaders[0]
        final fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>? // com.apollographql.apollo/ApolloCall.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
    final val httpMethod // com.apollographql.apollo/ApolloCall.httpMethod|{}httpMethod[0]
        final fun <get-httpMethod>(): com.apollographql.apollo.api.http/HttpMethod? // com.apollographql.apollo/ApolloCall.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
    final val ignoreApolloClientHttpHeaders // com.apollographql.apollo/ApolloCall.ignoreApolloClientHttpHeaders|{}ignoreApolloClientHttpHeaders[0]
        final fun <get-ignoreApolloClientHttpHeaders>(): kotlin/Boolean? // com.apollographql.apollo/ApolloCall.ignoreApolloClientHttpHeaders.<get-ignoreApolloClientHttpHeaders>|<get-ignoreApolloClientHttpHeaders>(){}[0]
    final val operation // com.apollographql.apollo/ApolloCall.operation|{}operation[0]
        final fun <get-operation>(): com.apollographql.apollo.api/Operation<#A> // com.apollographql.apollo/ApolloCall.operation.<get-operation>|<get-operation>(){}[0]
    final val sendApqExtensions // com.apollographql.apollo/ApolloCall.sendApqExtensions|{}sendApqExtensions[0]
        final fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo/ApolloCall.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
    final val sendDocument // com.apollographql.apollo/ApolloCall.sendDocument|{}sendDocument[0]
        final fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo/ApolloCall.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]

    final fun addExecutionContext(com.apollographql.apollo.api/ExecutionContext): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.addExecutionContext|addExecutionContext(com.apollographql.apollo.api.ExecutionContext){}[0]
    final fun addHttpHeader(kotlin/String, kotlin/String): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.addHttpHeader|addHttpHeader(kotlin.String;kotlin.String){}[0]
    final fun canBeBatched(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.canBeBatched|canBeBatched(kotlin.Boolean?){}[0]
    final fun copy(): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.copy|copy(){}[0]
    final fun enableAutoPersistedQueries(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.enableAutoPersistedQueries|enableAutoPersistedQueries(kotlin.Boolean?){}[0]
    final fun failFastIfOffline(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.failFastIfOffline|failFastIfOffline(kotlin.Boolean?){}[0]
    final fun httpHeaders(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.httpHeaders|httpHeaders(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>?){}[0]
    final fun httpMethod(com.apollographql.apollo.api.http/HttpMethod?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.httpMethod|httpMethod(com.apollographql.apollo.api.http.HttpMethod?){}[0]
    final fun ignoreApolloClientHttpHeaders(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.ignoreApolloClientHttpHeaders|ignoreApolloClientHttpHeaders(kotlin.Boolean?){}[0]
    final fun sendApqExtensions(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.sendApqExtensions|sendApqExtensions(kotlin.Boolean?){}[0]
    final fun sendDocument(kotlin/Boolean?): com.apollographql.apollo/ApolloCall<#A> // com.apollographql.apollo/ApolloCall.sendDocument|sendDocument(kotlin.Boolean?){}[0]
    final fun toFlow(): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A>> // com.apollographql.apollo/ApolloCall.toFlow|toFlow(){}[0]
    final fun toFlowV3(): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A>> // com.apollographql.apollo/ApolloCall.toFlowV3|toFlowV3(){}[0]
    final suspend fun execute(): com.apollographql.apollo.api/ApolloResponse<#A> // com.apollographql.apollo/ApolloCall.execute|execute(){}[0]
    final suspend fun executeV3(): com.apollographql.apollo.api/ApolloResponse<#A> // com.apollographql.apollo/ApolloCall.executeV3|executeV3(){}[0]
}

final class com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor : com.apollographql.apollo.interceptor/ApolloInterceptor { // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor|null[0]
    constructor <init>(com.apollographql.apollo.api.http/HttpMethod, com.apollographql.apollo.api.http/HttpMethod) // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.<init>|<init>(com.apollographql.apollo.api.http.HttpMethod;com.apollographql.apollo.api.http.HttpMethod){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> intercept(com.apollographql.apollo.api/ApolloRequest<#A1>, com.apollographql.apollo.interceptor/ApolloInterceptorChain): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.intercept|intercept(com.apollographql.apollo.api.ApolloRequest<0:0>;com.apollographql.apollo.interceptor.ApolloInterceptorChain){0§<com.apollographql.apollo.api.Operation.Data>}[0]

    final object Companion { // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.Companion|null[0]
        final const val PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.Companion.PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED|{}PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED[0]
            final fun <get-PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED>(): kotlin/String // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.Companion.PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED.<get-PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED>|<get-PROTOCOL_NEGOTIATION_ERROR_NOT_SUPPORTED>(){}[0]
        final const val PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.Companion.PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND|{}PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND[0]
            final fun <get-PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND>(): kotlin/String // com.apollographql.apollo.interceptor/AutoPersistedQueryInterceptor.Companion.PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND.<get-PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND>|<get-PROTOCOL_NEGOTIATION_ERROR_QUERY_NOT_FOUND>(){}[0]
    }
}

final class com.apollographql.apollo.network.http/ApolloClientAwarenessInterceptor : com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/ApolloClientAwarenessInterceptor|null[0]
    constructor <init>(kotlin/String, kotlin/String) // com.apollographql.apollo.network.http/ApolloClientAwarenessInterceptor.<init>|<init>(kotlin.String;kotlin.String){}[0]

    final suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/ApolloClientAwarenessInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]
}

final class com.apollographql.apollo.network.http/BatchingHttpInterceptor : com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/BatchingHttpInterceptor|null[0]
    constructor <init>(kotlin/Long = ..., kotlin/Int = ..., kotlin/Boolean = ...) // com.apollographql.apollo.network.http/BatchingHttpInterceptor.<init>|<init>(kotlin.Long;kotlin.Int;kotlin.Boolean){}[0]

    final fun dispose() // com.apollographql.apollo.network.http/BatchingHttpInterceptor.dispose|dispose(){}[0]
    final suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/BatchingHttpInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]

    final class PendingRequest { // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest|null[0]
        constructor <init>(com.apollographql.apollo.api.http/HttpRequest) // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest.<init>|<init>(com.apollographql.apollo.api.http.HttpRequest){}[0]

        final val deferred // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest.deferred|{}deferred[0]
            final fun <get-deferred>(): kotlinx.coroutines/CompletableDeferred<com.apollographql.apollo.api.http/HttpResponse> // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest.deferred.<get-deferred>|<get-deferred>(){}[0]
        final val request // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest.request|{}request[0]
            final fun <get-request>(): com.apollographql.apollo.api.http/HttpRequest // com.apollographql.apollo.network.http/BatchingHttpInterceptor.PendingRequest.request.<get-request>|<get-request>(){}[0]
    }

    final object Companion { // com.apollographql.apollo.network.http/BatchingHttpInterceptor.Companion|null[0]
        final fun <#A2: com.apollographql.apollo.api/Operation.Data> configureApolloCall(com.apollographql.apollo/ApolloCall<#A2>, kotlin/Boolean) // com.apollographql.apollo.network.http/BatchingHttpInterceptor.Companion.configureApolloCall|configureApolloCall(com.apollographql.apollo.ApolloCall<0:0>;kotlin.Boolean){0§<com.apollographql.apollo.api.Operation.Data>}[0]
        final fun configureApolloClientBuilder(com.apollographql.apollo/ApolloClient.Builder, kotlin/Boolean) // com.apollographql.apollo.network.http/BatchingHttpInterceptor.Companion.configureApolloClientBuilder|configureApolloClientBuilder(com.apollographql.apollo.ApolloClient.Builder;kotlin.Boolean){}[0]
    }
}

final class com.apollographql.apollo.network.http/HeadersInterceptor : com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/HeadersInterceptor|null[0]
    constructor <init>(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>) // com.apollographql.apollo.network.http/HeadersInterceptor.<init>|<init>(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]

    final suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HeadersInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]
}

final class com.apollographql.apollo.network.http/HttpCall { // com.apollographql.apollo.network.http/HttpCall|null[0]
    constructor <init>(com.apollographql.apollo.network.http/HttpEngine, com.apollographql.apollo.api.http/HttpMethod, kotlin/String) // com.apollographql.apollo.network.http/HttpCall.<init>|<init>(com.apollographql.apollo.network.http.HttpEngine;com.apollographql.apollo.api.http.HttpMethod;kotlin.String){}[0]

    final fun addExecutionContext(com.apollographql.apollo.api/ExecutionContext): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/HttpCall.addExecutionContext|addExecutionContext(com.apollographql.apollo.api.ExecutionContext){}[0]
    final fun addHeader(kotlin/String, kotlin/String): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/HttpCall.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
    final fun addHeaders(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/HttpCall.addHeaders|addHeaders(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
    final fun body(com.apollographql.apollo.api.http/HttpBody): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/HttpCall.body|body(com.apollographql.apollo.api.http.HttpBody){}[0]
    final fun headers(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/HttpCall.headers|headers(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
    final suspend fun execute(): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HttpCall.execute|execute(){}[0]
}

final class com.apollographql.apollo.network.http/HttpInfo : com.apollographql.apollo.api/ExecutionContext.Element { // com.apollographql.apollo.network.http/HttpInfo|null[0]
    constructor <init>(kotlin/Long, kotlin/Long, kotlin/Int, kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>) // com.apollographql.apollo.network.http/HttpInfo.<init>|<init>(kotlin.Long;kotlin.Long;kotlin.Int;kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]

    final val endMillis // com.apollographql.apollo.network.http/HttpInfo.endMillis|{}endMillis[0]
        final fun <get-endMillis>(): kotlin/Long // com.apollographql.apollo.network.http/HttpInfo.endMillis.<get-endMillis>|<get-endMillis>(){}[0]
    final val headers // com.apollographql.apollo.network.http/HttpInfo.headers|{}headers[0]
        final fun <get-headers>(): kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader> // com.apollographql.apollo.network.http/HttpInfo.headers.<get-headers>|<get-headers>(){}[0]
    final val key // com.apollographql.apollo.network.http/HttpInfo.key|{}key[0]
        final fun <get-key>(): com.apollographql.apollo.api/ExecutionContext.Key<*> // com.apollographql.apollo.network.http/HttpInfo.key.<get-key>|<get-key>(){}[0]
    final val millisEnd // com.apollographql.apollo.network.http/HttpInfo.millisEnd|{}millisEnd[0]
        final fun <get-millisEnd>(): kotlin/Long // com.apollographql.apollo.network.http/HttpInfo.millisEnd.<get-millisEnd>|<get-millisEnd>(){}[0]
    final val millisStart // com.apollographql.apollo.network.http/HttpInfo.millisStart|{}millisStart[0]
        final fun <get-millisStart>(): kotlin/Long // com.apollographql.apollo.network.http/HttpInfo.millisStart.<get-millisStart>|<get-millisStart>(){}[0]
    final val startMillis // com.apollographql.apollo.network.http/HttpInfo.startMillis|{}startMillis[0]
        final fun <get-startMillis>(): kotlin/Long // com.apollographql.apollo.network.http/HttpInfo.startMillis.<get-startMillis>|<get-startMillis>(){}[0]
    final val statusCode // com.apollographql.apollo.network.http/HttpInfo.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): kotlin/Int // com.apollographql.apollo.network.http/HttpInfo.statusCode.<get-statusCode>|<get-statusCode>(){}[0]

    final object Key : com.apollographql.apollo.api/ExecutionContext.Key<com.apollographql.apollo.network.http/HttpInfo> // com.apollographql.apollo.network.http/HttpInfo.Key|null[0]
}

final class com.apollographql.apollo.network.http/HttpNetworkTransport : com.apollographql.apollo.network/NetworkTransport { // com.apollographql.apollo.network.http/HttpNetworkTransport|null[0]
    final val interceptors // com.apollographql.apollo.network.http/HttpNetworkTransport.interceptors|{}interceptors[0]
        final fun <get-interceptors>(): kotlin.collections/List<com.apollographql.apollo.network.http/HttpInterceptor> // com.apollographql.apollo.network.http/HttpNetworkTransport.interceptors.<get-interceptors>|<get-interceptors>(){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> execute(com.apollographql.apollo.api/ApolloRequest<#A1>): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.network.http/HttpNetworkTransport.execute|execute(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> execute(com.apollographql.apollo.api/ApolloRequest<#A1>, com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.api/CustomScalarAdapters): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.network.http/HttpNetworkTransport.execute|execute(com.apollographql.apollo.api.ApolloRequest<0:0>;com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.api.CustomScalarAdapters){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun dispose() // com.apollographql.apollo.network.http/HttpNetworkTransport.dispose|dispose(){}[0]
    final fun newBuilder(): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.newBuilder|newBuilder(){}[0]

    final class Builder { // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder|null[0]
        constructor <init>() // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.<init>|<init>(){}[0]

        final fun addHttpHeader(kotlin/String, kotlin/String): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.addHttpHeader|addHttpHeader(kotlin.String;kotlin.String){}[0]
        final fun addInterceptor(com.apollographql.apollo.network.http/HttpInterceptor): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.addInterceptor|addInterceptor(com.apollographql.apollo.network.http.HttpInterceptor){}[0]
        final fun build(): com.apollographql.apollo.network.http/HttpNetworkTransport // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.build|build(){}[0]
        final fun exposeErrorBody(kotlin/Boolean): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.exposeErrorBody|exposeErrorBody(kotlin.Boolean){}[0]
        final fun httpEngine(com.apollographql.apollo.network.http/HttpEngine): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.httpEngine|httpEngine(com.apollographql.apollo.network.http.HttpEngine){}[0]
        final fun httpHeaders(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.httpHeaders|httpHeaders(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
        final fun httpRequestComposer(com.apollographql.apollo.api.http/HttpRequestComposer): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.httpRequestComposer|httpRequestComposer(com.apollographql.apollo.api.http.HttpRequestComposer){}[0]
        final fun interceptors(kotlin.collections/List<com.apollographql.apollo.network.http/HttpInterceptor>): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.interceptors|interceptors(kotlin.collections.List<com.apollographql.apollo.network.http.HttpInterceptor>){}[0]
        final fun serverUrl(kotlin/String): com.apollographql.apollo.network.http/HttpNetworkTransport.Builder // com.apollographql.apollo.network.http/HttpNetworkTransport.Builder.serverUrl|serverUrl(kotlin.String){}[0]
    }

    final inner class EngineInterceptor : com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/HttpNetworkTransport.EngineInterceptor|null[0]
        constructor <init>() // com.apollographql.apollo.network.http/HttpNetworkTransport.EngineInterceptor.<init>|<init>(){}[0]

        final suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/HttpNetworkTransport.EngineInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]
    }
}

final class com.apollographql.apollo.network.http/LoggingInterceptor : com.apollographql.apollo.network.http/HttpInterceptor { // com.apollographql.apollo.network.http/LoggingInterceptor|null[0]
    constructor <init>(com.apollographql.apollo.network.http/LoggingInterceptor.Level, kotlin/Function1<kotlin/String, kotlin/Unit> = ...) // com.apollographql.apollo.network.http/LoggingInterceptor.<init>|<init>(com.apollographql.apollo.network.http.LoggingInterceptor.Level;kotlin.Function1<kotlin.String,kotlin.Unit>){}[0]
    constructor <init>(kotlin/Function1<kotlin/String, kotlin/Unit> = ...) // com.apollographql.apollo.network.http/LoggingInterceptor.<init>|<init>(kotlin.Function1<kotlin.String,kotlin.Unit>){}[0]

    final suspend fun intercept(com.apollographql.apollo.api.http/HttpRequest, com.apollographql.apollo.network.http/HttpInterceptorChain): com.apollographql.apollo.api.http/HttpResponse // com.apollographql.apollo.network.http/LoggingInterceptor.intercept|intercept(com.apollographql.apollo.api.http.HttpRequest;com.apollographql.apollo.network.http.HttpInterceptorChain){}[0]

    final enum class Level : kotlin/Enum<com.apollographql.apollo.network.http/LoggingInterceptor.Level> { // com.apollographql.apollo.network.http/LoggingInterceptor.Level|null[0]
        enum entry BASIC // com.apollographql.apollo.network.http/LoggingInterceptor.Level.BASIC|null[0]
        enum entry BODY // com.apollographql.apollo.network.http/LoggingInterceptor.Level.BODY|null[0]
        enum entry HEADERS // com.apollographql.apollo.network.http/LoggingInterceptor.Level.HEADERS|null[0]
        enum entry NONE // com.apollographql.apollo.network.http/LoggingInterceptor.Level.NONE|null[0]

        final val entries // com.apollographql.apollo.network.http/LoggingInterceptor.Level.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.apollographql.apollo.network.http/LoggingInterceptor.Level> // com.apollographql.apollo.network.http/LoggingInterceptor.Level.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.apollographql.apollo.network.http/LoggingInterceptor.Level // com.apollographql.apollo.network.http/LoggingInterceptor.Level.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.apollographql.apollo.network.http/LoggingInterceptor.Level> // com.apollographql.apollo.network.http/LoggingInterceptor.Level.values|values#static(){}[0]
    }
}

final class com.apollographql.apollo.network.ws/AppSyncWsProtocol : com.apollographql.apollo.network.ws/WsProtocol { // com.apollographql.apollo.network.ws/AppSyncWsProtocol|null[0]
    constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/Long, com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.Long;com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener){}[0]
    constructor <init>(kotlin/Long, kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ..., com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.<init>|<init>(kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>;com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> startOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.startOperation|startOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> stopOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.stopOperation|stopOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun handleServerMessage(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.handleServerMessage|handleServerMessage(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final suspend fun connectionInit() // com.apollographql.apollo.network.ws/AppSyncWsProtocol.connectionInit|connectionInit(){}[0]

    final class Factory : com.apollographql.apollo.network.ws/WsProtocol.Factory { // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory|null[0]
        constructor <init>(kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin/Long = ...) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory.<init>|<init>(kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.Long){}[0]
        constructor <init>(kotlin/Long = ..., kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ...) // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory.<init>|<init>(kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>){}[0]

        final val name // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory.name|{}name[0]
            final fun <get-name>(): kotlin/String // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory.name.<get-name>|<get-name>(){}[0]

        final fun create(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlinx.coroutines/CoroutineScope): com.apollographql.apollo.network.ws/WsProtocol // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Factory.create|create(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlinx.coroutines.CoroutineScope){}[0]
    }

    final object Companion { // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Companion|null[0]
        final fun buildUrl(kotlin/String, kotlin.collections/Map<kotlin/String, kotlin/Any?>, kotlin.collections/Map<kotlin/String, kotlin/Any?> = ...): kotlin/String // com.apollographql.apollo.network.ws/AppSyncWsProtocol.Companion.buildUrl|buildUrl(kotlin.String;kotlin.collections.Map<kotlin.String,kotlin.Any?>;kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    }
}

final class com.apollographql.apollo.network.ws/DefaultWebSocketEngine : com.apollographql.apollo.network.ws/WebSocketEngine { // com.apollographql.apollo.network.ws/DefaultWebSocketEngine|null[0]
    constructor <init>() // com.apollographql.apollo.network.ws/DefaultWebSocketEngine.<init>|<init>(){}[0]

    final suspend fun open(kotlin/String, kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.ws/WebSocketConnection // com.apollographql.apollo.network.ws/DefaultWebSocketEngine.open|open(kotlin.String;kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]

    // Targets: [apple]
    constructor <init>(kotlin/Function2<platform.Foundation/NSURLRequest, com.apollographql.apollo.network.ws/WebSocketConnectionListener, platform.Foundation/NSURLSessionWebSocketTask>) // com.apollographql.apollo.network.ws/DefaultWebSocketEngine.<init>|<init>(kotlin.Function2<platform.Foundation.NSURLRequest,com.apollographql.apollo.network.ws.WebSocketConnectionListener,platform.Foundation.NSURLSessionWebSocketTask>){}[0]
}

final class com.apollographql.apollo.network.ws/GraphQLWsProtocol : com.apollographql.apollo.network.ws/WsProtocol { // com.apollographql.apollo.network.ws/GraphQLWsProtocol|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?>? = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?>? = ..., kotlin/Long, kotlin/Long, com.apollographql.apollo.network.ws/WsFrameType, com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlinx.coroutines/CoroutineScope) // com.apollographql.apollo.network.ws/GraphQLWsProtocol.<init>|<init>(kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>;kotlin.collections.Map<kotlin.String,kotlin.Any?>?;kotlin.collections.Map<kotlin.String,kotlin.Any?>?;kotlin.Long;kotlin.Long;com.apollographql.apollo.network.ws.WsFrameType;com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlinx.coroutines.CoroutineScope){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> startOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/GraphQLWsProtocol.startOperation|startOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> stopOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/GraphQLWsProtocol.stopOperation|stopOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun handleServerMessage(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/GraphQLWsProtocol.handleServerMessage|handleServerMessage(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final suspend fun connectionInit() // com.apollographql.apollo.network.ws/GraphQLWsProtocol.connectionInit|connectionInit(){}[0]
    final suspend fun run() // com.apollographql.apollo.network.ws/GraphQLWsProtocol.run|run(){}[0]

    final class Factory : com.apollographql.apollo.network.ws/WsProtocol.Factory { // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory|null[0]
        constructor <init>() // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory.<init>|<init>(){}[0]
        constructor <init>(kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ..., kotlin/Long = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?>? = ..., kotlin.collections/Map<kotlin/String, kotlin/Any?>? = ..., kotlin/Long = ..., com.apollographql.apollo.network.ws/WsFrameType = ...) // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory.<init>|<init>(kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>;kotlin.Long;kotlin.collections.Map<kotlin.String,kotlin.Any?>?;kotlin.collections.Map<kotlin.String,kotlin.Any?>?;kotlin.Long;com.apollographql.apollo.network.ws.WsFrameType){}[0]

        final val name // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory.name|{}name[0]
            final fun <get-name>(): kotlin/String // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory.name.<get-name>|<get-name>(){}[0]

        final fun create(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlinx.coroutines/CoroutineScope): com.apollographql.apollo.network.ws/WsProtocol // com.apollographql.apollo.network.ws/GraphQLWsProtocol.Factory.create|create(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlinx.coroutines.CoroutineScope){}[0]
    }
}

final class com.apollographql.apollo.network.ws/SubscriptionWsProtocol : com.apollographql.apollo.network.ws/WsProtocol { // com.apollographql.apollo.network.ws/SubscriptionWsProtocol|null[0]
    constructor <init>(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlin/Long = ..., kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ..., com.apollographql.apollo.network.ws/WsFrameType = ...) // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.<init>|<init>(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>;com.apollographql.apollo.network.ws.WsFrameType){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> startOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.startOperation|startOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> stopOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.stopOperation|stopOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun handleServerMessage(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.handleServerMessage|handleServerMessage(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    final suspend fun connectionInit() // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.connectionInit|connectionInit(){}[0]

    final class Factory : com.apollographql.apollo.network.ws/WsProtocol.Factory { // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.Factory|null[0]
        constructor <init>(kotlin/Long = ..., kotlin.coroutines/SuspendFunction0<kotlin.collections/Map<kotlin/String, kotlin/Any?>?> = ..., com.apollographql.apollo.network.ws/WsFrameType = ...) // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.Factory.<init>|<init>(kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.collections.Map<kotlin.String,kotlin.Any?>?>;com.apollographql.apollo.network.ws.WsFrameType){}[0]

        final val name // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.Factory.name|{}name[0]
            final fun <get-name>(): kotlin/String // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.Factory.name.<get-name>|<get-name>(){}[0]

        final fun create(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener, kotlinx.coroutines/CoroutineScope): com.apollographql.apollo.network.ws/WsProtocol // com.apollographql.apollo.network.ws/SubscriptionWsProtocol.Factory.create|create(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener;kotlinx.coroutines.CoroutineScope){}[0]
    }
}

final class com.apollographql.apollo.network.ws/WebSocketNetworkTransport : com.apollographql.apollo.network/NetworkTransport { // com.apollographql.apollo.network.ws/WebSocketNetworkTransport|null[0]
    final val subscriptionCount // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.subscriptionCount|{}subscriptionCount[0]
        final fun <get-subscriptionCount>(): kotlinx.coroutines.flow/StateFlow<kotlin/Int> // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.subscriptionCount.<get-subscriptionCount>|<get-subscriptionCount>(){}[0]

    final fun <#A1: com.apollographql.apollo.api/Operation.Data> execute(com.apollographql.apollo.api/ApolloRequest<#A1>): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.execute|execute(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun closeConnection(kotlin/Throwable) // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.closeConnection|closeConnection(kotlin.Throwable){}[0]
    final fun dispose() // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.dispose|dispose(){}[0]

    final class Builder { // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder|null[0]
        constructor <init>() // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.<init>|<init>(){}[0]

        final fun addHeader(kotlin/String, kotlin/String): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.addHeader|addHeader(kotlin.String;kotlin.String){}[0]
        final fun addHeaders(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.addHeaders|addHeaders(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
        final fun build(): com.apollographql.apollo.network.ws/WebSocketNetworkTransport // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.build|build(){}[0]
        final fun headers(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.headers|headers(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>){}[0]
        final fun idleTimeoutMillis(kotlin/Long): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.idleTimeoutMillis|idleTimeoutMillis(kotlin.Long){}[0]
        final fun protocol(com.apollographql.apollo.network.ws/WsProtocol.Factory): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.protocol|protocol(com.apollographql.apollo.network.ws.WsProtocol.Factory){}[0]
        final fun reopenWhen(kotlin.coroutines/SuspendFunction2<kotlin/Throwable, kotlin/Long, kotlin/Boolean>?): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.reopenWhen|reopenWhen(kotlin.coroutines.SuspendFunction2<kotlin.Throwable,kotlin.Long,kotlin.Boolean>?){}[0]
        final fun serverUrl(kotlin.coroutines/SuspendFunction0<kotlin/String>?): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.serverUrl|serverUrl(kotlin.coroutines.SuspendFunction0<kotlin.String>?){}[0]
        final fun serverUrl(kotlin/String): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.serverUrl|serverUrl(kotlin.String){}[0]
        final fun webSocketEngine(com.apollographql.apollo.network.ws/WebSocketEngine): com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder // com.apollographql.apollo.network.ws/WebSocketNetworkTransport.Builder.webSocketEngine|webSocketEngine(com.apollographql.apollo.network.ws.WebSocketEngine){}[0]
    }
}

final class com.apollographql.apollo/ApolloClient : com.apollographql.apollo.api/ExecutionOptions, okio/Closeable { // com.apollographql.apollo/ApolloClient|null[0]
    final val canBeBatched // com.apollographql.apollo/ApolloClient.canBeBatched|{}canBeBatched[0]
        final fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
    final val customScalarAdapters // com.apollographql.apollo/ApolloClient.customScalarAdapters|{}customScalarAdapters[0]
        final fun <get-customScalarAdapters>(): com.apollographql.apollo.api/CustomScalarAdapters // com.apollographql.apollo/ApolloClient.customScalarAdapters.<get-customScalarAdapters>|<get-customScalarAdapters>(){}[0]
    final val enableAutoPersistedQueries // com.apollographql.apollo/ApolloClient.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
        final fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
    final val executionContext // com.apollographql.apollo/ApolloClient.executionContext|{}executionContext[0]
        final fun <get-executionContext>(): com.apollographql.apollo.api/ExecutionContext // com.apollographql.apollo/ApolloClient.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
    final val httpHeaders // com.apollographql.apollo/ApolloClient.httpHeaders|{}httpHeaders[0]
        final fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>? // com.apollographql.apollo/ApolloClient.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
    final val httpMethod // com.apollographql.apollo/ApolloClient.httpMethod|{}httpMethod[0]
        final fun <get-httpMethod>(): com.apollographql.apollo.api.http/HttpMethod? // com.apollographql.apollo/ApolloClient.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
    final val interceptors // com.apollographql.apollo/ApolloClient.interceptors|{}interceptors[0]
        final fun <get-interceptors>(): kotlin.collections/List<com.apollographql.apollo.interceptor/ApolloInterceptor> // com.apollographql.apollo/ApolloClient.interceptors.<get-interceptors>|<get-interceptors>(){}[0]
    final val networkTransport // com.apollographql.apollo/ApolloClient.networkTransport|{}networkTransport[0]
        final fun <get-networkTransport>(): com.apollographql.apollo.network/NetworkTransport // com.apollographql.apollo/ApolloClient.networkTransport.<get-networkTransport>|<get-networkTransport>(){}[0]
    final val sendApqExtensions // com.apollographql.apollo/ApolloClient.sendApqExtensions|{}sendApqExtensions[0]
        final fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
    final val sendDocument // com.apollographql.apollo/ApolloClient.sendDocument|{}sendDocument[0]
        final fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]
    final val subscriptionNetworkTransport // com.apollographql.apollo/ApolloClient.subscriptionNetworkTransport|{}subscriptionNetworkTransport[0]
        final fun <get-subscriptionNetworkTransport>(): com.apollographql.apollo.network/NetworkTransport // com.apollographql.apollo/ApolloClient.subscriptionNetworkTransport.<get-subscriptionNetworkTransport>|<get-subscriptionNetworkTransport>(){}[0]

    final fun <#A1: com.apollographql.apollo.api/Mutation.Data> mutation(com.apollographql.apollo.api/Mutation<#A1>): com.apollographql.apollo/ApolloCall<#A1> // com.apollographql.apollo/ApolloClient.mutation|mutation(com.apollographql.apollo.api.Mutation<0:0>){0§<com.apollographql.apollo.api.Mutation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> executeAsFlow(com.apollographql.apollo.api/ApolloRequest<#A1>): kotlinx.coroutines.flow/Flow<com.apollographql.apollo.api/ApolloResponse<#A1>> // com.apollographql.apollo/ApolloClient.executeAsFlow|executeAsFlow(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Query.Data> query(com.apollographql.apollo.api/Query<#A1>): com.apollographql.apollo/ApolloCall<#A1> // com.apollographql.apollo/ApolloClient.query|query(com.apollographql.apollo.api.Query<0:0>){0§<com.apollographql.apollo.api.Query.Data>}[0]
    final fun <#A1: com.apollographql.apollo.api/Subscription.Data> subscription(com.apollographql.apollo.api/Subscription<#A1>): com.apollographql.apollo/ApolloCall<#A1> // com.apollographql.apollo/ApolloClient.subscription|subscription(com.apollographql.apollo.api.Subscription<0:0>){0§<com.apollographql.apollo.api.Subscription.Data>}[0]
    final fun close() // com.apollographql.apollo/ApolloClient.close|close(){}[0]
    final fun dispose() // com.apollographql.apollo/ApolloClient.dispose|dispose(){}[0]
    final fun newBuilder(): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.newBuilder|newBuilder(){}[0]

    final class Builder : com.apollographql.apollo.api/MutableExecutionOptions<com.apollographql.apollo/ApolloClient.Builder> { // com.apollographql.apollo/ApolloClient.Builder|null[0]
        constructor <init>() // com.apollographql.apollo/ApolloClient.Builder.<init>|<init>(){}[0]

        final val customScalarAdapters // com.apollographql.apollo/ApolloClient.Builder.customScalarAdapters|{}customScalarAdapters[0]
            final fun <get-customScalarAdapters>(): com.apollographql.apollo.api/CustomScalarAdapters // com.apollographql.apollo/ApolloClient.Builder.customScalarAdapters.<get-customScalarAdapters>|<get-customScalarAdapters>(){}[0]
        final val httpInterceptors // com.apollographql.apollo/ApolloClient.Builder.httpInterceptors|{}httpInterceptors[0]
            final fun <get-httpInterceptors>(): kotlin.collections/List<com.apollographql.apollo.network.http/HttpInterceptor> // com.apollographql.apollo/ApolloClient.Builder.httpInterceptors.<get-httpInterceptors>|<get-httpInterceptors>(){}[0]
        final val interceptors // com.apollographql.apollo/ApolloClient.Builder.interceptors|{}interceptors[0]
            final fun <get-interceptors>(): kotlin.collections/List<com.apollographql.apollo.interceptor/ApolloInterceptor> // com.apollographql.apollo/ApolloClient.Builder.interceptors.<get-interceptors>|<get-interceptors>(){}[0]

        final var canBeBatched // com.apollographql.apollo/ApolloClient.Builder.canBeBatched|{}canBeBatched[0]
            final fun <get-canBeBatched>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.Builder.canBeBatched.<get-canBeBatched>|<get-canBeBatched>(){}[0]
        final var dispatcher // com.apollographql.apollo/ApolloClient.Builder.dispatcher|{}dispatcher[0]
            final fun <get-dispatcher>(): kotlinx.coroutines/CoroutineDispatcher? // com.apollographql.apollo/ApolloClient.Builder.dispatcher.<get-dispatcher>|<get-dispatcher>(){}[0]
        final var enableAutoPersistedQueries // com.apollographql.apollo/ApolloClient.Builder.enableAutoPersistedQueries|{}enableAutoPersistedQueries[0]
            final fun <get-enableAutoPersistedQueries>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.Builder.enableAutoPersistedQueries.<get-enableAutoPersistedQueries>|<get-enableAutoPersistedQueries>(){}[0]
        final var executionContext // com.apollographql.apollo/ApolloClient.Builder.executionContext|{}executionContext[0]
            final fun <get-executionContext>(): com.apollographql.apollo.api/ExecutionContext // com.apollographql.apollo/ApolloClient.Builder.executionContext.<get-executionContext>|<get-executionContext>(){}[0]
        final var httpEngine // com.apollographql.apollo/ApolloClient.Builder.httpEngine|{}httpEngine[0]
            final fun <get-httpEngine>(): com.apollographql.apollo.network.http/HttpEngine? // com.apollographql.apollo/ApolloClient.Builder.httpEngine.<get-httpEngine>|<get-httpEngine>(){}[0]
        final var httpExposeErrorBody // com.apollographql.apollo/ApolloClient.Builder.httpExposeErrorBody|{}httpExposeErrorBody[0]
            final fun <get-httpExposeErrorBody>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.Builder.httpExposeErrorBody.<get-httpExposeErrorBody>|<get-httpExposeErrorBody>(){}[0]
        final var httpHeaders // com.apollographql.apollo/ApolloClient.Builder.httpHeaders|{}httpHeaders[0]
            final fun <get-httpHeaders>(): kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>? // com.apollographql.apollo/ApolloClient.Builder.httpHeaders.<get-httpHeaders>|<get-httpHeaders>(){}[0]
        final var httpMethod // com.apollographql.apollo/ApolloClient.Builder.httpMethod|{}httpMethod[0]
            final fun <get-httpMethod>(): com.apollographql.apollo.api.http/HttpMethod? // com.apollographql.apollo/ApolloClient.Builder.httpMethod.<get-httpMethod>|<get-httpMethod>(){}[0]
        final var httpServerUrl // com.apollographql.apollo/ApolloClient.Builder.httpServerUrl|{}httpServerUrl[0]
            final fun <get-httpServerUrl>(): kotlin/String? // com.apollographql.apollo/ApolloClient.Builder.httpServerUrl.<get-httpServerUrl>|<get-httpServerUrl>(){}[0]
        final var networkTransport // com.apollographql.apollo/ApolloClient.Builder.networkTransport|{}networkTransport[0]
            final fun <get-networkTransport>(): com.apollographql.apollo.network/NetworkTransport? // com.apollographql.apollo/ApolloClient.Builder.networkTransport.<get-networkTransport>|<get-networkTransport>(){}[0]
        final var sendApqExtensions // com.apollographql.apollo/ApolloClient.Builder.sendApqExtensions|{}sendApqExtensions[0]
            final fun <get-sendApqExtensions>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.Builder.sendApqExtensions.<get-sendApqExtensions>|<get-sendApqExtensions>(){}[0]
        final var sendDocument // com.apollographql.apollo/ApolloClient.Builder.sendDocument|{}sendDocument[0]
            final fun <get-sendDocument>(): kotlin/Boolean? // com.apollographql.apollo/ApolloClient.Builder.sendDocument.<get-sendDocument>|<get-sendDocument>(){}[0]
        final var subscriptionNetworkTransport // com.apollographql.apollo/ApolloClient.Builder.subscriptionNetworkTransport|{}subscriptionNetworkTransport[0]
            final fun <get-subscriptionNetworkTransport>(): com.apollographql.apollo.network/NetworkTransport? // com.apollographql.apollo/ApolloClient.Builder.subscriptionNetworkTransport.<get-subscriptionNetworkTransport>|<get-subscriptionNetworkTransport>(){}[0]
        final var webSocketEngine // com.apollographql.apollo/ApolloClient.Builder.webSocketEngine|{}webSocketEngine[0]
            final fun <get-webSocketEngine>(): com.apollographql.apollo.network.ws/WebSocketEngine? // com.apollographql.apollo/ApolloClient.Builder.webSocketEngine.<get-webSocketEngine>|<get-webSocketEngine>(){}[0]
        final var webSocketIdleTimeoutMillis // com.apollographql.apollo/ApolloClient.Builder.webSocketIdleTimeoutMillis|{}webSocketIdleTimeoutMillis[0]
            final fun <get-webSocketIdleTimeoutMillis>(): kotlin/Long? // com.apollographql.apollo/ApolloClient.Builder.webSocketIdleTimeoutMillis.<get-webSocketIdleTimeoutMillis>|<get-webSocketIdleTimeoutMillis>(){}[0]
        final var webSocketReopenServerUrl // com.apollographql.apollo/ApolloClient.Builder.webSocketReopenServerUrl|{}webSocketReopenServerUrl[0]
            final fun <get-webSocketReopenServerUrl>(): kotlin.coroutines/SuspendFunction0<kotlin/String>? // com.apollographql.apollo/ApolloClient.Builder.webSocketReopenServerUrl.<get-webSocketReopenServerUrl>|<get-webSocketReopenServerUrl>(){}[0]
        final var webSocketReopenWhen // com.apollographql.apollo/ApolloClient.Builder.webSocketReopenWhen|{}webSocketReopenWhen[0]
            final fun <get-webSocketReopenWhen>(): kotlin.coroutines/SuspendFunction2<kotlin/Throwable, kotlin/Long, kotlin/Boolean>? // com.apollographql.apollo/ApolloClient.Builder.webSocketReopenWhen.<get-webSocketReopenWhen>|<get-webSocketReopenWhen>(){}[0]
        final var webSocketServerUrl // com.apollographql.apollo/ApolloClient.Builder.webSocketServerUrl|{}webSocketServerUrl[0]
            final fun <get-webSocketServerUrl>(): kotlin/String? // com.apollographql.apollo/ApolloClient.Builder.webSocketServerUrl.<get-webSocketServerUrl>|<get-webSocketServerUrl>(){}[0]
        final var wsProtocolFactory // com.apollographql.apollo/ApolloClient.Builder.wsProtocolFactory|{}wsProtocolFactory[0]
            final fun <get-wsProtocolFactory>(): com.apollographql.apollo.network.ws/WsProtocol.Factory? // com.apollographql.apollo/ApolloClient.Builder.wsProtocolFactory.<get-wsProtocolFactory>|<get-wsProtocolFactory>(){}[0]

        final fun <#A2: kotlin/Any?> addCustomScalarAdapter(com.apollographql.apollo.api/CustomScalarType, com.apollographql.apollo.api/Adapter<#A2>): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addCustomScalarAdapter|addCustomScalarAdapter(com.apollographql.apollo.api.CustomScalarType;com.apollographql.apollo.api.Adapter<0:0>){0§<kotlin.Any?>}[0]
        final fun addExecutionContext(com.apollographql.apollo.api/ExecutionContext): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addExecutionContext|addExecutionContext(com.apollographql.apollo.api.ExecutionContext){}[0]
        final fun addHttpHeader(kotlin/String, kotlin/String): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addHttpHeader|addHttpHeader(kotlin.String;kotlin.String){}[0]
        final fun addHttpInterceptor(com.apollographql.apollo.network.http/HttpInterceptor): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addHttpInterceptor|addHttpInterceptor(com.apollographql.apollo.network.http.HttpInterceptor){}[0]
        final fun addInterceptor(com.apollographql.apollo.interceptor/ApolloInterceptor): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addInterceptor|addInterceptor(com.apollographql.apollo.interceptor.ApolloInterceptor){}[0]
        final fun addInterceptors(kotlin.collections/List<com.apollographql.apollo.interceptor/ApolloInterceptor>): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.addInterceptors|addInterceptors(kotlin.collections.List<com.apollographql.apollo.interceptor.ApolloInterceptor>){}[0]
        final fun autoPersistedQueries(com.apollographql.apollo.api.http/HttpMethod = ..., com.apollographql.apollo.api.http/HttpMethod = ..., kotlin/Boolean = ...): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.autoPersistedQueries|autoPersistedQueries(com.apollographql.apollo.api.http.HttpMethod;com.apollographql.apollo.api.http.HttpMethod;kotlin.Boolean){}[0]
        final fun build(): com.apollographql.apollo/ApolloClient // com.apollographql.apollo/ApolloClient.Builder.build|build(){}[0]
        final fun canBeBatched(kotlin/Boolean?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.canBeBatched|canBeBatched(kotlin.Boolean?){}[0]
        final fun copy(): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.copy|copy(){}[0]
        final fun customScalarAdapters(com.apollographql.apollo.api/CustomScalarAdapters): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.customScalarAdapters|customScalarAdapters(com.apollographql.apollo.api.CustomScalarAdapters){}[0]
        final fun dispatcher(kotlinx.coroutines/CoroutineDispatcher?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.dispatcher|dispatcher(kotlinx.coroutines.CoroutineDispatcher?){}[0]
        final fun enableAutoPersistedQueries(kotlin/Boolean?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.enableAutoPersistedQueries|enableAutoPersistedQueries(kotlin.Boolean?){}[0]
        final fun executionContext(com.apollographql.apollo.api/ExecutionContext): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.executionContext|executionContext(com.apollographql.apollo.api.ExecutionContext){}[0]
        final fun httpBatching(kotlin/Long = ..., kotlin/Int = ..., kotlin/Boolean = ...): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpBatching|httpBatching(kotlin.Long;kotlin.Int;kotlin.Boolean){}[0]
        final fun httpEngine(com.apollographql.apollo.network.http/HttpEngine?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpEngine|httpEngine(com.apollographql.apollo.network.http.HttpEngine?){}[0]
        final fun httpExposeErrorBody(kotlin/Boolean?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpExposeErrorBody|httpExposeErrorBody(kotlin.Boolean?){}[0]
        final fun httpHeaders(kotlin.collections/List<com.apollographql.apollo.api.http/HttpHeader>?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpHeaders|httpHeaders(kotlin.collections.List<com.apollographql.apollo.api.http.HttpHeader>?){}[0]
        final fun httpInterceptors(kotlin.collections/List<com.apollographql.apollo.network.http/HttpInterceptor>): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpInterceptors|httpInterceptors(kotlin.collections.List<com.apollographql.apollo.network.http.HttpInterceptor>){}[0]
        final fun httpMethod(com.apollographql.apollo.api.http/HttpMethod?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpMethod|httpMethod(com.apollographql.apollo.api.http.HttpMethod?){}[0]
        final fun httpServerUrl(kotlin/String?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.httpServerUrl|httpServerUrl(kotlin.String?){}[0]
        final fun interceptors(kotlin.collections/List<com.apollographql.apollo.interceptor/ApolloInterceptor>): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.interceptors|interceptors(kotlin.collections.List<com.apollographql.apollo.interceptor.ApolloInterceptor>){}[0]
        final fun networkTransport(com.apollographql.apollo.network/NetworkTransport?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.networkTransport|networkTransport(com.apollographql.apollo.network.NetworkTransport?){}[0]
        final fun removeHttpInterceptor(com.apollographql.apollo.network.http/HttpInterceptor): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.removeHttpInterceptor|removeHttpInterceptor(com.apollographql.apollo.network.http.HttpInterceptor){}[0]
        final fun removeInterceptor(com.apollographql.apollo.interceptor/ApolloInterceptor): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.removeInterceptor|removeInterceptor(com.apollographql.apollo.interceptor.ApolloInterceptor){}[0]
        final fun sendApqExtensions(kotlin/Boolean?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.sendApqExtensions|sendApqExtensions(kotlin.Boolean?){}[0]
        final fun sendDocument(kotlin/Boolean?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.sendDocument|sendDocument(kotlin.Boolean?){}[0]
        final fun serverUrl(kotlin/String): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.serverUrl|serverUrl(kotlin.String){}[0]
        final fun subscriptionNetworkTransport(com.apollographql.apollo.network/NetworkTransport?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.subscriptionNetworkTransport|subscriptionNetworkTransport(com.apollographql.apollo.network.NetworkTransport?){}[0]
        final fun webSocketEngine(com.apollographql.apollo.network.ws/WebSocketEngine?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.webSocketEngine|webSocketEngine(com.apollographql.apollo.network.ws.WebSocketEngine?){}[0]
        final fun webSocketIdleTimeoutMillis(kotlin/Long?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.webSocketIdleTimeoutMillis|webSocketIdleTimeoutMillis(kotlin.Long?){}[0]
        final fun webSocketReopenWhen(kotlin.coroutines/SuspendFunction2<kotlin/Throwable, kotlin/Long, kotlin/Boolean>?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.webSocketReopenWhen|webSocketReopenWhen(kotlin.coroutines.SuspendFunction2<kotlin.Throwable,kotlin.Long,kotlin.Boolean>?){}[0]
        final fun webSocketServerUrl(kotlin.coroutines/SuspendFunction0<kotlin/String>?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.webSocketServerUrl|webSocketServerUrl(kotlin.coroutines.SuspendFunction0<kotlin.String>?){}[0]
        final fun webSocketServerUrl(kotlin/String?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.webSocketServerUrl|webSocketServerUrl(kotlin.String?){}[0]
        final fun wsProtocol(com.apollographql.apollo.network.ws/WsProtocol.Factory?): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Builder.wsProtocol|wsProtocol(com.apollographql.apollo.network.ws.WsProtocol.Factory?){}[0]
    }

    final object Companion { // com.apollographql.apollo/ApolloClient.Companion|null[0]
        final fun builder(): com.apollographql.apollo/ApolloClient.Builder // com.apollographql.apollo/ApolloClient.Companion.builder|builder(){}[0]
    }
}

final class com.apollographql.apollo/AutoPersistedQueryInfo : com.apollographql.apollo.api/ExecutionContext.Element { // com.apollographql.apollo/AutoPersistedQueryInfo|null[0]
    constructor <init>(kotlin/Boolean) // com.apollographql.apollo/AutoPersistedQueryInfo.<init>|<init>(kotlin.Boolean){}[0]

    final val hit // com.apollographql.apollo/AutoPersistedQueryInfo.hit|{}hit[0]
        final fun <get-hit>(): kotlin/Boolean // com.apollographql.apollo/AutoPersistedQueryInfo.hit.<get-hit>|<get-hit>(){}[0]
    final val key // com.apollographql.apollo/AutoPersistedQueryInfo.key|{}key[0]
        final fun <get-key>(): com.apollographql.apollo.api/ExecutionContext.Key<*> // com.apollographql.apollo/AutoPersistedQueryInfo.key.<get-key>|<get-key>(){}[0]

    final object Key : com.apollographql.apollo.api/ExecutionContext.Key<com.apollographql.apollo/AutoPersistedQueryInfo> // com.apollographql.apollo/AutoPersistedQueryInfo.Key|null[0]
}

open class com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter : com.apollographql.apollo.network.ws/WsProtocol { // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter|null[0]
    constructor <init>(com.apollographql.apollo.network.ws/WebSocketConnection, com.apollographql.apollo.network.ws/WsProtocol.Listener) // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter.<init>|<init>(com.apollographql.apollo.network.ws.WebSocketConnection;com.apollographql.apollo.network.ws.WsProtocol.Listener){}[0]

    open fun <#A1: com.apollographql.apollo.api/Operation.Data> startOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter.startOperation|startOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    open fun <#A1: com.apollographql.apollo.api/Operation.Data> stopOperation(com.apollographql.apollo.api/ApolloRequest<#A1>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter.stopOperation|stopOperation(com.apollographql.apollo.api.ApolloRequest<0:0>){0§<com.apollographql.apollo.api.Operation.Data>}[0]
    open fun handleServerMessage(kotlin.collections/Map<kotlin/String, kotlin/Any?>) // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter.handleServerMessage|handleServerMessage(kotlin.collections.Map<kotlin.String,kotlin.Any?>){}[0]
    open suspend fun connectionInit() // com.apollographql.apollo.network.ws/SubscriptionWsProtocolAdapter.connectionInit|connectionInit(){}[0]
}

final const val com.apollographql.apollo.network.ws/CLOSE_GOING_AWAY // com.apollographql.apollo.network.ws/CLOSE_GOING_AWAY|{}CLOSE_GOING_AWAY[0]
    final fun <get-CLOSE_GOING_AWAY>(): kotlin/Int // com.apollographql.apollo.network.ws/CLOSE_GOING_AWAY.<get-CLOSE_GOING_AWAY>|<get-CLOSE_GOING_AWAY>(){}[0]
final const val com.apollographql.apollo.network.ws/CLOSE_NORMAL // com.apollographql.apollo.network.ws/CLOSE_NORMAL|{}CLOSE_NORMAL[0]
    final fun <get-CLOSE_NORMAL>(): kotlin/Int // com.apollographql.apollo.network.ws/CLOSE_NORMAL.<get-CLOSE_NORMAL>|<get-CLOSE_NORMAL>(){}[0]

final val com.apollographql.apollo/autoPersistedQueryInfo // com.apollographql.apollo/autoPersistedQueryInfo|@com.apollographql.apollo.api.ApolloResponse<0:0>{0§<com.apollographql.apollo.api.Operation.Data>}autoPersistedQueryInfo[0]
    final fun <#A1: com.apollographql.apollo.api/Operation.Data> (com.apollographql.apollo.api/ApolloResponse<#A1>).<get-autoPersistedQueryInfo>(): com.apollographql.apollo/AutoPersistedQueryInfo? // com.apollographql.apollo/autoPersistedQueryInfo.<get-autoPersistedQueryInfo>|<get-autoPersistedQueryInfo>@com.apollographql.apollo.api.ApolloResponse<0:0>(){0§<com.apollographql.apollo.api.Operation.Data>}[0]

final fun (com.apollographql.apollo.network.http/HttpEngine).com.apollographql.apollo.network.http/get(kotlin/String): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/get|get@com.apollographql.apollo.network.http.HttpEngine(kotlin.String){}[0]
final fun (com.apollographql.apollo.network.http/HttpEngine).com.apollographql.apollo.network.http/post(kotlin/String): com.apollographql.apollo.network.http/HttpCall // com.apollographql.apollo.network.http/post|post@com.apollographql.apollo.network.http.HttpEngine(kotlin.String){}[0]
final fun (com.apollographql.apollo.network/NetworkTransport).com.apollographql.apollo.network.ws/closeConnection(kotlin/Throwable) // com.apollographql.apollo.network.ws/closeConnection|closeConnection@com.apollographql.apollo.network.NetworkTransport(kotlin.Throwable){}[0]
final fun com.apollographql.apollo.network.http/DefaultHttpEngine(kotlin/Long = ...): com.apollographql.apollo.network.http/HttpEngine // com.apollographql.apollo.network.http/DefaultHttpEngine|DefaultHttpEngine(kotlin.Long){}[0]
final fun com.apollographql.apollo.network.websocket/WebSocketEngine(): com.apollographql.apollo.network.websocket/WebSocketEngine // com.apollographql.apollo.network.websocket/WebSocketEngine|WebSocketEngine(){}[0]

// Targets: [apple]
abstract interface com.apollographql.apollo.network.ws/WebSocketConnectionListener { // com.apollographql.apollo.network.ws/WebSocketConnectionListener|null[0]
    abstract fun onError(platform.Foundation/NSError?) // com.apollographql.apollo.network.ws/WebSocketConnectionListener.onError|onError(platform.Foundation.NSError?){}[0]
    abstract fun onOpen(platform.Foundation/NSURLSessionWebSocketTask) // com.apollographql.apollo.network.ws/WebSocketConnectionListener.onOpen|onOpen(platform.Foundation.NSURLSessionWebSocketTask){}[0]

    // Targets: [ios, macos, tvos, watchosSimulatorArm64]
    abstract fun onClose(platform.Foundation/NSURLSessionWebSocketTask, kotlin/Long) // com.apollographql.apollo.network.ws/WebSocketConnectionListener.onClose|onClose(platform.Foundation.NSURLSessionWebSocketTask;kotlin.Long){}[0]

    // Targets: [watchosArm32, watchosArm64]
    abstract fun onClose(platform.Foundation/NSURLSessionWebSocketTask, kotlin/Int) // com.apollographql.apollo.network.ws/WebSocketConnectionListener.onClose|onClose(platform.Foundation.NSURLSessionWebSocketTask;kotlin.Int){}[0]
}

// Targets: [apple]
final fun (kotlin/ByteArray).com.apollographql.apollo.network/toNSData(): platform.Foundation/NSData // com.apollographql.apollo.network/toNSData|toNSData@kotlin.ByteArray(){}[0]

// Targets: [apple]
final fun com.apollographql.apollo.network.http/DefaultHttpEngine(kotlin/Long = ..., platform.Foundation/NSURLSessionConfiguration): com.apollographql.apollo.network.http/HttpEngine // com.apollographql.apollo.network.http/DefaultHttpEngine|DefaultHttpEngine(kotlin.Long;platform.Foundation.NSURLSessionConfiguration){}[0]

// Targets: [js]
final fun com.apollographql.apollo.network.http/DefaultHttpEngine(kotlin/Long, kotlin/Long): com.apollographql.apollo.network.http/HttpEngine // com.apollographql.apollo.network.http/DefaultHttpEngine|DefaultHttpEngine(kotlin.Long;kotlin.Long){}[0]

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/ArrayLike : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ArrayLike|null[0]
    abstract var length // com.apollographql.apollo.network.http/ArrayLike.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // com.apollographql.apollo.network.http/ArrayLike.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Int) // com.apollographql.apollo.network.http/ArrayLike.length.<set-length>|<set-length>(kotlin.Int){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/ReadableStream : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ReadableStream|null[0]
    abstract var locked // com.apollographql.apollo.network.http/ReadableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // com.apollographql.apollo.network.http/ReadableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // com.apollographql.apollo.network.http/ReadableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStream.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun getReader(): com.apollographql.apollo.network.http/ReadableStreamDefaultReader<#A> // com.apollographql.apollo.network.http/ReadableStream.getReader|getReader(){}[0]
    abstract fun getReader(kotlin.js/JsAny?): com.apollographql.apollo.network.http/ReadableStreamBYOBReader // com.apollographql.apollo.network.http/ReadableStream.getReader|getReader(kotlin.js.JsAny?){}[0]
    abstract fun pipeTo(com.apollographql.apollo.network.http/WritableStream<#A>, com.apollographql.apollo.network.http/PipeOptions? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStream.pipeTo|pipeTo(com.apollographql.apollo.network.http.WritableStream<1:0>;com.apollographql.apollo.network.http.PipeOptions?){}[0]
    abstract fun tee(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/ReadableStream.tee|tee(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/ReadableStreamDefaultReader : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ReadableStreamDefaultReader|null[0]
    abstract var closed // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]

    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun read(): kotlin.js/Promise<com.apollographql.apollo.network.http/ReadableStreamReadResult<#A>> // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.read|read(){}[0]
    abstract fun releaseLock() // com.apollographql.apollo.network.http/ReadableStreamDefaultReader.releaseLock|releaseLock(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/ReadableStreamReadResult : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ReadableStreamReadResult|null[0]
    abstract var done // com.apollographql.apollo.network.http/ReadableStreamReadResult.done|{}done[0]
        abstract fun <get-done>(): kotlin/Boolean // com.apollographql.apollo.network.http/ReadableStreamReadResult.done.<get-done>|<get-done>(){}[0]
        abstract fun <set-done>(kotlin/Boolean) // com.apollographql.apollo.network.http/ReadableStreamReadResult.done.<set-done>|<set-done>(kotlin.Boolean){}[0]
    abstract var value // com.apollographql.apollo.network.http/ReadableStreamReadResult.value|{}value[0]
        abstract fun <get-value>(): #A // com.apollographql.apollo.network.http/ReadableStreamReadResult.value.<get-value>|<get-value>(){}[0]
        abstract fun <set-value>(#A) // com.apollographql.apollo.network.http/ReadableStreamReadResult.value.<set-value>|<set-value>(1:0){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/WritableStream : kotlin.js/JsAny { // com.apollographql.apollo.network.http/WritableStream|null[0]
    abstract var locked // com.apollographql.apollo.network.http/WritableStream.locked|{}locked[0]
        abstract fun <get-locked>(): kotlin/Boolean // com.apollographql.apollo.network.http/WritableStream.locked.<get-locked>|<get-locked>(){}[0]
        abstract fun <set-locked>(kotlin/Boolean) // com.apollographql.apollo.network.http/WritableStream.locked.<set-locked>|<set-locked>(kotlin.Boolean){}[0]

    abstract fun abort(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStream.abort|abort(kotlin.js.JsAny?){}[0]
    abstract fun getWriter(): com.apollographql.apollo.network.http/WritableStreamDefaultWriter<#A> // com.apollographql.apollo.network.http/WritableStream.getWriter|getWriter(){}[0]
}

// Targets: [wasmJs]
abstract interface <#A: kotlin.js/JsAny?> com.apollographql.apollo.network.http/WritableStreamDefaultWriter : kotlin.js/JsAny { // com.apollographql.apollo.network.http/WritableStreamDefaultWriter|null[0]
    abstract var closed // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]
    abstract var ready // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.ready|{}ready[0]
        abstract fun <get-ready>(): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.ready.<get-ready>|<get-ready>(){}[0]
        abstract fun <set-ready>(kotlin.js/Promise<kotlin.js/JsAny?>) // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.ready.<set-ready>|<set-ready>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]
    open var desiredSize // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.desiredSize|{}desiredSize[0]
        open fun <get-desiredSize>(): kotlin/Int? // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.desiredSize.<get-desiredSize>|<get-desiredSize>(){}[0]
        open fun <set-desiredSize>(kotlin/Int?) // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.desiredSize.<set-desiredSize>|<set-desiredSize>(kotlin.Int?){}[0]

    abstract fun abort(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.abort|abort(kotlin.js.JsAny?){}[0]
    abstract fun close(): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.close|close(){}[0]
    abstract fun releaseLock() // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.releaseLock|releaseLock(){}[0]
    abstract fun write(#A): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/WritableStreamDefaultWriter.write|write(1:0){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/AbortController : kotlin.js/JsAny { // com.apollographql.apollo.network.http/AbortController|null[0]
    abstract var signal // com.apollographql.apollo.network.http/AbortController.signal|{}signal[0]
        abstract fun <get-signal>(): com.apollographql.apollo.network.http/AbortSignal // com.apollographql.apollo.network.http/AbortController.signal.<get-signal>|<get-signal>(){}[0]
        abstract fun <set-signal>(com.apollographql.apollo.network.http/AbortSignal) // com.apollographql.apollo.network.http/AbortController.signal.<set-signal>|<set-signal>(com.apollographql.apollo.network.http.AbortSignal){}[0]

    abstract fun abort() // com.apollographql.apollo.network.http/AbortController.abort|abort(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/AbortSignal : com.apollographql.apollo.network.http/EventTarget { // com.apollographql.apollo.network.http/AbortSignal|null[0]
    abstract var aborted // com.apollographql.apollo.network.http/AbortSignal.aborted|{}aborted[0]
        abstract fun <get-aborted>(): kotlin/Boolean // com.apollographql.apollo.network.http/AbortSignal.aborted.<get-aborted>|<get-aborted>(){}[0]
        abstract fun <set-aborted>(kotlin/Boolean) // com.apollographql.apollo.network.http/AbortSignal.aborted.<set-aborted>|<set-aborted>(kotlin.Boolean){}[0]
    open var onabort // com.apollographql.apollo.network.http/AbortSignal.onabort|{}onabort[0]
        open fun <get-onabort>(): kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, com.apollographql.apollo.network.http/Event, kotlin.js/JsAny>? // com.apollographql.apollo.network.http/AbortSignal.onabort.<get-onabort>|<get-onabort>(){}[0]
        open fun <set-onabort>(kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, com.apollographql.apollo.network.http/Event, kotlin.js/JsAny>?) // com.apollographql.apollo.network.http/AbortSignal.onabort.<set-onabort>|<set-onabort>(kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,com.apollographql.apollo.network.http.Event,kotlin.js.JsAny>?){}[0]

    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, com.apollographql.apollo.network.http/AddEventListenerOptions? = ...) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;com.apollographql.apollo.network.http.AddEventListenerOptions?){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> addEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;kotlin.Boolean?){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, com.apollographql.apollo.network.http/EventListenerOptions? = ...) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;com.apollographql.apollo.network.http.EventListenerOptions?){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> removeEventListener(#A1, kotlin/Function2<com.apollographql.apollo.network.http/AbortSignal, kotlin.js/JsAny, kotlin.js/JsAny>, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(0:0;kotlin.Function2<com.apollographql.apollo.network.http.AbortSignal,kotlin.js.JsAny,kotlin.js.JsAny>;kotlin.Boolean?){0§<kotlin.js.JsAny>}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, com.apollographql.apollo.network.http/AddEventListenerOptions?) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;com.apollographql.apollo.network.http.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, kotlin/Boolean?) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;kotlin.Boolean?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, com.apollographql.apollo.network.http/AddEventListenerOptions?) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;com.apollographql.apollo.network.http.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, kotlin/Boolean?) // com.apollographql.apollo.network.http/AbortSignal.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, com.apollographql.apollo.network.http/EventListenerOptions?) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;com.apollographql.apollo.network.http.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, kotlin/Boolean?) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, com.apollographql.apollo.network.http/EventListenerOptions?) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;com.apollographql.apollo.network.http.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, kotlin/Boolean?) // com.apollographql.apollo.network.http/AbortSignal.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/AddEventListenerOptions : com.apollographql.apollo.network.http/EventListenerOptions { // com.apollographql.apollo.network.http/AddEventListenerOptions|null[0]
    open var once // com.apollographql.apollo.network.http/AddEventListenerOptions.once|{}once[0]
        open fun <get-once>(): kotlin/Boolean? // com.apollographql.apollo.network.http/AddEventListenerOptions.once.<get-once>|<get-once>(){}[0]
        open fun <set-once>(kotlin/Boolean?) // com.apollographql.apollo.network.http/AddEventListenerOptions.once.<set-once>|<set-once>(kotlin.Boolean?){}[0]
    open var passive // com.apollographql.apollo.network.http/AddEventListenerOptions.passive|{}passive[0]
        open fun <get-passive>(): kotlin/Boolean? // com.apollographql.apollo.network.http/AddEventListenerOptions.passive.<get-passive>|<get-passive>(){}[0]
        open fun <set-passive>(kotlin/Boolean?) // com.apollographql.apollo.network.http/AddEventListenerOptions.passive.<set-passive>|<set-passive>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/ArrayBuffer : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ArrayBuffer|null[0]
    abstract var byteLength // com.apollographql.apollo.network.http/ArrayBuffer.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // com.apollographql.apollo.network.http/ArrayBuffer.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // com.apollographql.apollo.network.http/ArrayBuffer.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]

    abstract fun slice(kotlin/Int, kotlin/Int? = ...): com.apollographql.apollo.network.http/ArrayBuffer // com.apollographql.apollo.network.http/ArrayBuffer.slice|slice(kotlin.Int;kotlin.Int?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/ArrayBufferConstructor : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ArrayBufferConstructor|null[0]
    abstract var prototype // com.apollographql.apollo.network.http/ArrayBufferConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): com.apollographql.apollo.network.http/ArrayBuffer // com.apollographql.apollo.network.http/ArrayBufferConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(com.apollographql.apollo.network.http/ArrayBuffer) // com.apollographql.apollo.network.http/ArrayBufferConstructor.prototype.<set-prototype>|<set-prototype>(com.apollographql.apollo.network.http.ArrayBuffer){}[0]

    abstract fun isView(kotlin.js/JsAny): kotlin/Boolean // com.apollographql.apollo.network.http/ArrayBufferConstructor.isView|isView(kotlin.js.JsAny){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/ArrayBufferView : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ArrayBufferView|null[0]
    abstract var buffer // com.apollographql.apollo.network.http/ArrayBufferView.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin.js/JsAny // com.apollographql.apollo.network.http/ArrayBufferView.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin.js/JsAny) // com.apollographql.apollo.network.http/ArrayBufferView.buffer.<set-buffer>|<set-buffer>(kotlin.js.JsAny){}[0]
    abstract var byteLength // com.apollographql.apollo.network.http/ArrayBufferView.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // com.apollographql.apollo.network.http/ArrayBufferView.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // com.apollographql.apollo.network.http/ArrayBufferView.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]
    abstract var byteOffset // com.apollographql.apollo.network.http/ArrayBufferView.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Int // com.apollographql.apollo.network.http/ArrayBufferView.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Int) // com.apollographql.apollo.network.http/ArrayBufferView.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Int){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Blob : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Blob|null[0]
    abstract var size // com.apollographql.apollo.network.http/Blob.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // com.apollographql.apollo.network.http/Blob.size.<get-size>|<get-size>(){}[0]
        abstract fun <set-size>(kotlin/Int) // com.apollographql.apollo.network.http/Blob.size.<set-size>|<set-size>(kotlin.Int){}[0]
    abstract var type // com.apollographql.apollo.network.http/Blob.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // com.apollographql.apollo.network.http/Blob.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // com.apollographql.apollo.network.http/Blob.type.<set-type>|<set-type>(kotlin.String){}[0]

    abstract fun slice(kotlin/Int? = ..., kotlin/Int? = ..., kotlin/String? = ...): com.apollographql.apollo.network.http/Blob // com.apollographql.apollo.network.http/Blob.slice|slice(kotlin.Int?;kotlin.Int?;kotlin.String?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Body : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Body|null[0]
    abstract var bodyUsed // com.apollographql.apollo.network.http/Body.bodyUsed|{}bodyUsed[0]
        abstract fun <get-bodyUsed>(): kotlin/Boolean // com.apollographql.apollo.network.http/Body.bodyUsed.<get-bodyUsed>|<get-bodyUsed>(){}[0]
        abstract fun <set-bodyUsed>(kotlin/Boolean) // com.apollographql.apollo.network.http/Body.bodyUsed.<set-bodyUsed>|<set-bodyUsed>(kotlin.Boolean){}[0]
    open var body // com.apollographql.apollo.network.http/Body.body|{}body[0]
        open fun <get-body>(): com.apollographql.apollo.network.http/ReadableStream<com.apollographql.apollo.network.http/Uint8Array>? // com.apollographql.apollo.network.http/Body.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(com.apollographql.apollo.network.http/ReadableStream<com.apollographql.apollo.network.http/Uint8Array>?) // com.apollographql.apollo.network.http/Body.body.<set-body>|<set-body>(com.apollographql.apollo.network.http.ReadableStream<com.apollographql.apollo.network.http.Uint8Array>?){}[0]

    abstract fun arrayBuffer(): kotlin.js/Promise<com.apollographql.apollo.network.http/ArrayBuffer> // com.apollographql.apollo.network.http/Body.arrayBuffer|arrayBuffer(){}[0]
    abstract fun blob(): kotlin.js/Promise<com.apollographql.apollo.network.http/Blob> // com.apollographql.apollo.network.http/Body.blob|blob(){}[0]
    abstract fun formData(): kotlin.js/Promise<com.apollographql.apollo.network.http/FormData> // com.apollographql.apollo.network.http/Body.formData|formData(){}[0]
    abstract fun json(): kotlin.js/Promise<kotlin.js/JsAny> // com.apollographql.apollo.network.http/Body.json|json(){}[0]
    abstract fun text(): kotlin.js/Promise<kotlin.js/JsString> // com.apollographql.apollo.network.http/Body.text|text(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Event : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Event|null[0]
    abstract var AT_TARGET // com.apollographql.apollo.network.http/Event.AT_TARGET|{}AT_TARGET[0]
        abstract fun <get-AT_TARGET>(): kotlin/Int // com.apollographql.apollo.network.http/Event.AT_TARGET.<get-AT_TARGET>|<get-AT_TARGET>(){}[0]
        abstract fun <set-AT_TARGET>(kotlin/Int) // com.apollographql.apollo.network.http/Event.AT_TARGET.<set-AT_TARGET>|<set-AT_TARGET>(kotlin.Int){}[0]
    abstract var BUBBLING_PHASE // com.apollographql.apollo.network.http/Event.BUBBLING_PHASE|{}BUBBLING_PHASE[0]
        abstract fun <get-BUBBLING_PHASE>(): kotlin/Int // com.apollographql.apollo.network.http/Event.BUBBLING_PHASE.<get-BUBBLING_PHASE>|<get-BUBBLING_PHASE>(){}[0]
        abstract fun <set-BUBBLING_PHASE>(kotlin/Int) // com.apollographql.apollo.network.http/Event.BUBBLING_PHASE.<set-BUBBLING_PHASE>|<set-BUBBLING_PHASE>(kotlin.Int){}[0]
    abstract var CAPTURING_PHASE // com.apollographql.apollo.network.http/Event.CAPTURING_PHASE|{}CAPTURING_PHASE[0]
        abstract fun <get-CAPTURING_PHASE>(): kotlin/Int // com.apollographql.apollo.network.http/Event.CAPTURING_PHASE.<get-CAPTURING_PHASE>|<get-CAPTURING_PHASE>(){}[0]
        abstract fun <set-CAPTURING_PHASE>(kotlin/Int) // com.apollographql.apollo.network.http/Event.CAPTURING_PHASE.<set-CAPTURING_PHASE>|<set-CAPTURING_PHASE>(kotlin.Int){}[0]
    abstract var NONE // com.apollographql.apollo.network.http/Event.NONE|{}NONE[0]
        abstract fun <get-NONE>(): kotlin/Int // com.apollographql.apollo.network.http/Event.NONE.<get-NONE>|<get-NONE>(){}[0]
        abstract fun <set-NONE>(kotlin/Int) // com.apollographql.apollo.network.http/Event.NONE.<set-NONE>|<set-NONE>(kotlin.Int){}[0]
    abstract var bubbles // com.apollographql.apollo.network.http/Event.bubbles|{}bubbles[0]
        abstract fun <get-bubbles>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.bubbles.<get-bubbles>|<get-bubbles>(){}[0]
        abstract fun <set-bubbles>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.bubbles.<set-bubbles>|<set-bubbles>(kotlin.Boolean){}[0]
    abstract var cancelBubble // com.apollographql.apollo.network.http/Event.cancelBubble|{}cancelBubble[0]
        abstract fun <get-cancelBubble>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.cancelBubble.<get-cancelBubble>|<get-cancelBubble>(){}[0]
        abstract fun <set-cancelBubble>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.cancelBubble.<set-cancelBubble>|<set-cancelBubble>(kotlin.Boolean){}[0]
    abstract var cancelable // com.apollographql.apollo.network.http/Event.cancelable|{}cancelable[0]
        abstract fun <get-cancelable>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.cancelable.<get-cancelable>|<get-cancelable>(){}[0]
        abstract fun <set-cancelable>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.cancelable.<set-cancelable>|<set-cancelable>(kotlin.Boolean){}[0]
    abstract var composed // com.apollographql.apollo.network.http/Event.composed|{}composed[0]
        abstract fun <get-composed>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.composed.<get-composed>|<get-composed>(){}[0]
        abstract fun <set-composed>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.composed.<set-composed>|<set-composed>(kotlin.Boolean){}[0]
    abstract var defaultPrevented // com.apollographql.apollo.network.http/Event.defaultPrevented|{}defaultPrevented[0]
        abstract fun <get-defaultPrevented>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.defaultPrevented.<get-defaultPrevented>|<get-defaultPrevented>(){}[0]
        abstract fun <set-defaultPrevented>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.defaultPrevented.<set-defaultPrevented>|<set-defaultPrevented>(kotlin.Boolean){}[0]
    abstract var eventPhase // com.apollographql.apollo.network.http/Event.eventPhase|{}eventPhase[0]
        abstract fun <get-eventPhase>(): kotlin/Int // com.apollographql.apollo.network.http/Event.eventPhase.<get-eventPhase>|<get-eventPhase>(){}[0]
        abstract fun <set-eventPhase>(kotlin/Int) // com.apollographql.apollo.network.http/Event.eventPhase.<set-eventPhase>|<set-eventPhase>(kotlin.Int){}[0]
    abstract var isTrusted // com.apollographql.apollo.network.http/Event.isTrusted|{}isTrusted[0]
        abstract fun <get-isTrusted>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.isTrusted.<get-isTrusted>|<get-isTrusted>(){}[0]
        abstract fun <set-isTrusted>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.isTrusted.<set-isTrusted>|<set-isTrusted>(kotlin.Boolean){}[0]
    abstract var returnValue // com.apollographql.apollo.network.http/Event.returnValue|{}returnValue[0]
        abstract fun <get-returnValue>(): kotlin/Boolean // com.apollographql.apollo.network.http/Event.returnValue.<get-returnValue>|<get-returnValue>(){}[0]
        abstract fun <set-returnValue>(kotlin/Boolean) // com.apollographql.apollo.network.http/Event.returnValue.<set-returnValue>|<set-returnValue>(kotlin.Boolean){}[0]
    abstract var timeStamp // com.apollographql.apollo.network.http/Event.timeStamp|{}timeStamp[0]
        abstract fun <get-timeStamp>(): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Event.timeStamp.<get-timeStamp>|<get-timeStamp>(){}[0]
        abstract fun <set-timeStamp>(kotlin.js/JsNumber) // com.apollographql.apollo.network.http/Event.timeStamp.<set-timeStamp>|<set-timeStamp>(kotlin.js.JsNumber){}[0]
    abstract var type // com.apollographql.apollo.network.http/Event.type|{}type[0]
        abstract fun <get-type>(): kotlin/String // com.apollographql.apollo.network.http/Event.type.<get-type>|<get-type>(){}[0]
        abstract fun <set-type>(kotlin/String) // com.apollographql.apollo.network.http/Event.type.<set-type>|<set-type>(kotlin.String){}[0]
    open var currentTarget // com.apollographql.apollo.network.http/Event.currentTarget|{}currentTarget[0]
        open fun <get-currentTarget>(): com.apollographql.apollo.network.http/EventTarget? // com.apollographql.apollo.network.http/Event.currentTarget.<get-currentTarget>|<get-currentTarget>(){}[0]
        open fun <set-currentTarget>(com.apollographql.apollo.network.http/EventTarget?) // com.apollographql.apollo.network.http/Event.currentTarget.<set-currentTarget>|<set-currentTarget>(com.apollographql.apollo.network.http.EventTarget?){}[0]
    open var srcElement // com.apollographql.apollo.network.http/Event.srcElement|{}srcElement[0]
        open fun <get-srcElement>(): com.apollographql.apollo.network.http/EventTarget? // com.apollographql.apollo.network.http/Event.srcElement.<get-srcElement>|<get-srcElement>(){}[0]
        open fun <set-srcElement>(com.apollographql.apollo.network.http/EventTarget?) // com.apollographql.apollo.network.http/Event.srcElement.<set-srcElement>|<set-srcElement>(com.apollographql.apollo.network.http.EventTarget?){}[0]
    open var target // com.apollographql.apollo.network.http/Event.target|{}target[0]
        open fun <get-target>(): com.apollographql.apollo.network.http/EventTarget? // com.apollographql.apollo.network.http/Event.target.<get-target>|<get-target>(){}[0]
        open fun <set-target>(com.apollographql.apollo.network.http/EventTarget?) // com.apollographql.apollo.network.http/Event.target.<set-target>|<set-target>(com.apollographql.apollo.network.http.EventTarget?){}[0]

    abstract fun composedPath(): com.apollographql.apollo.network.http/ArrayLike<com.apollographql.apollo.network.http/EventTarget> // com.apollographql.apollo.network.http/Event.composedPath|composedPath(){}[0]
    abstract fun initEvent(kotlin/String, kotlin/Boolean? = ..., kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/Event.initEvent|initEvent(kotlin.String;kotlin.Boolean?;kotlin.Boolean?){}[0]
    abstract fun preventDefault() // com.apollographql.apollo.network.http/Event.preventDefault|preventDefault(){}[0]
    abstract fun stopImmediatePropagation() // com.apollographql.apollo.network.http/Event.stopImmediatePropagation|stopImmediatePropagation(){}[0]
    abstract fun stopPropagation() // com.apollographql.apollo.network.http/Event.stopPropagation|stopPropagation(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/EventListener : kotlin.js/JsAny // com.apollographql.apollo.network.http/EventListener|null[0]

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/EventListenerObject : kotlin.js/JsAny { // com.apollographql.apollo.network.http/EventListenerObject|null[0]
    abstract fun handleEvent(com.apollographql.apollo.network.http/Event) // com.apollographql.apollo.network.http/EventListenerObject.handleEvent|handleEvent(com.apollographql.apollo.network.http.Event){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/EventListenerOptions : kotlin.js/JsAny { // com.apollographql.apollo.network.http/EventListenerOptions|null[0]
    open var capture // com.apollographql.apollo.network.http/EventListenerOptions.capture|{}capture[0]
        open fun <get-capture>(): kotlin/Boolean? // com.apollographql.apollo.network.http/EventListenerOptions.capture.<get-capture>|<get-capture>(){}[0]
        open fun <set-capture>(kotlin/Boolean?) // com.apollographql.apollo.network.http/EventListenerOptions.capture.<set-capture>|<set-capture>(kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/EventTarget : kotlin.js/JsAny { // com.apollographql.apollo.network.http/EventTarget|null[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, com.apollographql.apollo.network.http/AddEventListenerOptions? = ...) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;com.apollographql.apollo.network.http.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;kotlin.Boolean?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, com.apollographql.apollo.network.http/AddEventListenerOptions? = ...) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;com.apollographql.apollo.network.http.AddEventListenerOptions?){}[0]
    abstract fun addEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/EventTarget.addEventListener|addEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;kotlin.Boolean?){}[0]
    abstract fun dispatchEvent(com.apollographql.apollo.network.http/Event): kotlin/Boolean // com.apollographql.apollo.network.http/EventTarget.dispatchEvent|dispatchEvent(com.apollographql.apollo.network.http.Event){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, com.apollographql.apollo.network.http/EventListenerOptions? = ...) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;com.apollographql.apollo.network.http.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListener, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListener;kotlin.Boolean?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, com.apollographql.apollo.network.http/EventListenerOptions? = ...) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;com.apollographql.apollo.network.http.EventListenerOptions?){}[0]
    abstract fun removeEventListener(kotlin/String, com.apollographql.apollo.network.http/EventListenerObject, kotlin/Boolean? = ...) // com.apollographql.apollo.network.http/EventTarget.removeEventListener|removeEventListener(kotlin.String;com.apollographql.apollo.network.http.EventListenerObject;kotlin.Boolean?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/FormData : kotlin.js/JsAny { // com.apollographql.apollo.network.http/FormData|null[0]
    abstract fun append(kotlin/String, com.apollographql.apollo.network.http/Blob, kotlin/String? = ...) // com.apollographql.apollo.network.http/FormData.append|append(kotlin.String;com.apollographql.apollo.network.http.Blob;kotlin.String?){}[0]
    abstract fun append(kotlin/String, kotlin/String, kotlin/String? = ...) // com.apollographql.apollo.network.http/FormData.append|append(kotlin.String;kotlin.String;kotlin.String?){}[0]
    abstract fun delete(kotlin/String) // com.apollographql.apollo.network.http/FormData.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsAny?, kotlin/String, com.apollographql.apollo.network.http/FormData, kotlin/Unit>, kotlin.js/JsAny? = ...) // com.apollographql.apollo.network.http/FormData.forEach|forEach(kotlin.Function3<kotlin.js.JsAny?,kotlin.String,com.apollographql.apollo.network.http.FormData,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun get(kotlin/String): kotlin.js/JsAny? // com.apollographql.apollo.network.http/FormData.get|get(kotlin.String){}[0]
    abstract fun getAll(kotlin/String): com.apollographql.apollo.network.http/ArrayLike<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/FormData.getAll|getAll(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // com.apollographql.apollo.network.http/FormData.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, com.apollographql.apollo.network.http/Blob, kotlin/String? = ...) // com.apollographql.apollo.network.http/FormData.set|set(kotlin.String;com.apollographql.apollo.network.http.Blob;kotlin.String?){}[0]
    abstract fun set(kotlin/String, kotlin/String, kotlin/String? = ...) // com.apollographql.apollo.network.http/FormData.set|set(kotlin.String;kotlin.String;kotlin.String?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Headers : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Headers|null[0]
    abstract fun append(kotlin/String, kotlin/String) // com.apollographql.apollo.network.http/Headers.append|append(kotlin.String;kotlin.String){}[0]
    abstract fun delete(kotlin/String) // com.apollographql.apollo.network.http/Headers.delete|delete(kotlin.String){}[0]
    abstract fun forEach(kotlin/Function3<kotlin/String, kotlin/String, com.apollographql.apollo.network.http/Headers, kotlin/Unit>, kotlin.js/JsAny? = ...) // com.apollographql.apollo.network.http/Headers.forEach|forEach(kotlin.Function3<kotlin.String,kotlin.String,com.apollographql.apollo.network.http.Headers,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun get(kotlin/String): kotlin/String? // com.apollographql.apollo.network.http/Headers.get|get(kotlin.String){}[0]
    abstract fun has(kotlin/String): kotlin/Boolean // com.apollographql.apollo.network.http/Headers.has|has(kotlin.String){}[0]
    abstract fun set(kotlin/String, kotlin/String) // com.apollographql.apollo.network.http/Headers.set|set(kotlin.String;kotlin.String){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/PipeOptions : kotlin.js/JsAny { // com.apollographql.apollo.network.http/PipeOptions|null[0]
    open var preventAbort // com.apollographql.apollo.network.http/PipeOptions.preventAbort|{}preventAbort[0]
        open fun <get-preventAbort>(): kotlin/Boolean? // com.apollographql.apollo.network.http/PipeOptions.preventAbort.<get-preventAbort>|<get-preventAbort>(){}[0]
        open fun <set-preventAbort>(kotlin/Boolean?) // com.apollographql.apollo.network.http/PipeOptions.preventAbort.<set-preventAbort>|<set-preventAbort>(kotlin.Boolean?){}[0]
    open var preventCancel // com.apollographql.apollo.network.http/PipeOptions.preventCancel|{}preventCancel[0]
        open fun <get-preventCancel>(): kotlin/Boolean? // com.apollographql.apollo.network.http/PipeOptions.preventCancel.<get-preventCancel>|<get-preventCancel>(){}[0]
        open fun <set-preventCancel>(kotlin/Boolean?) // com.apollographql.apollo.network.http/PipeOptions.preventCancel.<set-preventCancel>|<set-preventCancel>(kotlin.Boolean?){}[0]
    open var preventClose // com.apollographql.apollo.network.http/PipeOptions.preventClose|{}preventClose[0]
        open fun <get-preventClose>(): kotlin/Boolean? // com.apollographql.apollo.network.http/PipeOptions.preventClose.<get-preventClose>|<get-preventClose>(){}[0]
        open fun <set-preventClose>(kotlin/Boolean?) // com.apollographql.apollo.network.http/PipeOptions.preventClose.<set-preventClose>|<set-preventClose>(kotlin.Boolean?){}[0]
    open var signal // com.apollographql.apollo.network.http/PipeOptions.signal|{}signal[0]
        open fun <get-signal>(): com.apollographql.apollo.network.http/AbortSignal? // com.apollographql.apollo.network.http/PipeOptions.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(com.apollographql.apollo.network.http/AbortSignal?) // com.apollographql.apollo.network.http/PipeOptions.signal.<set-signal>|<set-signal>(com.apollographql.apollo.network.http.AbortSignal?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/ReadableStreamBYOBReader : kotlin.js/JsAny { // com.apollographql.apollo.network.http/ReadableStreamBYOBReader|null[0]
    abstract var closed // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.closed|{}closed[0]
        abstract fun <get-closed>(): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.closed.<get-closed>|<get-closed>(){}[0]
        abstract fun <set-closed>(kotlin.js/Promise<kotlin.js/JsAny?>) // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.closed.<set-closed>|<set-closed>(kotlin.js.Promise<kotlin.js.JsAny?>){}[0]

    abstract fun <#A1: com.apollographql.apollo.network.http/ArrayBufferView> read(#A1): kotlin.js/Promise<com.apollographql.apollo.network.http/ReadableStreamReadResult<#A1>> // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.read|read(0:0){0§<com.apollographql.apollo.network.http.ArrayBufferView>}[0]
    abstract fun cancel(kotlin.js/JsAny? = ...): kotlin.js/Promise<kotlin.js/JsAny?> // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.cancel|cancel(kotlin.js.JsAny?){}[0]
    abstract fun releaseLock() // com.apollographql.apollo.network.http/ReadableStreamBYOBReader.releaseLock|releaseLock(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Request : com.apollographql.apollo.network.http/Body { // com.apollographql.apollo.network.http/Request|null[0]
    abstract var headers // com.apollographql.apollo.network.http/Request.headers|{}headers[0]
        abstract fun <get-headers>(): com.apollographql.apollo.network.http/Headers // com.apollographql.apollo.network.http/Request.headers.<get-headers>|<get-headers>(){}[0]
        abstract fun <set-headers>(com.apollographql.apollo.network.http/Headers) // com.apollographql.apollo.network.http/Request.headers.<set-headers>|<set-headers>(com.apollographql.apollo.network.http.Headers){}[0]
    abstract var integrity // com.apollographql.apollo.network.http/Request.integrity|{}integrity[0]
        abstract fun <get-integrity>(): kotlin/String // com.apollographql.apollo.network.http/Request.integrity.<get-integrity>|<get-integrity>(){}[0]
        abstract fun <set-integrity>(kotlin/String) // com.apollographql.apollo.network.http/Request.integrity.<set-integrity>|<set-integrity>(kotlin.String){}[0]
    abstract var isHistoryNavigation // com.apollographql.apollo.network.http/Request.isHistoryNavigation|{}isHistoryNavigation[0]
        abstract fun <get-isHistoryNavigation>(): kotlin/Boolean // com.apollographql.apollo.network.http/Request.isHistoryNavigation.<get-isHistoryNavigation>|<get-isHistoryNavigation>(){}[0]
        abstract fun <set-isHistoryNavigation>(kotlin/Boolean) // com.apollographql.apollo.network.http/Request.isHistoryNavigation.<set-isHistoryNavigation>|<set-isHistoryNavigation>(kotlin.Boolean){}[0]
    abstract var isReloadNavigation // com.apollographql.apollo.network.http/Request.isReloadNavigation|{}isReloadNavigation[0]
        abstract fun <get-isReloadNavigation>(): kotlin/Boolean // com.apollographql.apollo.network.http/Request.isReloadNavigation.<get-isReloadNavigation>|<get-isReloadNavigation>(){}[0]
        abstract fun <set-isReloadNavigation>(kotlin/Boolean) // com.apollographql.apollo.network.http/Request.isReloadNavigation.<set-isReloadNavigation>|<set-isReloadNavigation>(kotlin.Boolean){}[0]
    abstract var keepalive // com.apollographql.apollo.network.http/Request.keepalive|{}keepalive[0]
        abstract fun <get-keepalive>(): kotlin/Boolean // com.apollographql.apollo.network.http/Request.keepalive.<get-keepalive>|<get-keepalive>(){}[0]
        abstract fun <set-keepalive>(kotlin/Boolean) // com.apollographql.apollo.network.http/Request.keepalive.<set-keepalive>|<set-keepalive>(kotlin.Boolean){}[0]
    abstract var method // com.apollographql.apollo.network.http/Request.method|{}method[0]
        abstract fun <get-method>(): kotlin/String // com.apollographql.apollo.network.http/Request.method.<get-method>|<get-method>(){}[0]
        abstract fun <set-method>(kotlin/String) // com.apollographql.apollo.network.http/Request.method.<set-method>|<set-method>(kotlin.String){}[0]
    abstract var referrer // com.apollographql.apollo.network.http/Request.referrer|{}referrer[0]
        abstract fun <get-referrer>(): kotlin/String // com.apollographql.apollo.network.http/Request.referrer.<get-referrer>|<get-referrer>(){}[0]
        abstract fun <set-referrer>(kotlin/String) // com.apollographql.apollo.network.http/Request.referrer.<set-referrer>|<set-referrer>(kotlin.String){}[0]
    abstract var signal // com.apollographql.apollo.network.http/Request.signal|{}signal[0]
        abstract fun <get-signal>(): com.apollographql.apollo.network.http/AbortSignal // com.apollographql.apollo.network.http/Request.signal.<get-signal>|<get-signal>(){}[0]
        abstract fun <set-signal>(com.apollographql.apollo.network.http/AbortSignal) // com.apollographql.apollo.network.http/Request.signal.<set-signal>|<set-signal>(com.apollographql.apollo.network.http.AbortSignal){}[0]
    abstract var url // com.apollographql.apollo.network.http/Request.url|{}url[0]
        abstract fun <get-url>(): kotlin/String // com.apollographql.apollo.network.http/Request.url.<get-url>|<get-url>(){}[0]
        abstract fun <set-url>(kotlin/String) // com.apollographql.apollo.network.http/Request.url.<set-url>|<set-url>(kotlin.String){}[0]
    open var cache // com.apollographql.apollo.network.http/Request.cache|{}cache[0]
        open fun <get-cache>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.cache.<get-cache>|<get-cache>(){}[0]
        open fun <set-cache>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.cache.<set-cache>|<set-cache>(kotlin.js.JsAny?){}[0]
    open var credentials // com.apollographql.apollo.network.http/Request.credentials|{}credentials[0]
        open fun <get-credentials>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.credentials.<get-credentials>|<get-credentials>(){}[0]
        open fun <set-credentials>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.credentials.<set-credentials>|<set-credentials>(kotlin.js.JsAny?){}[0]
    open var destination // com.apollographql.apollo.network.http/Request.destination|{}destination[0]
        open fun <get-destination>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.destination.<get-destination>|<get-destination>(){}[0]
        open fun <set-destination>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.destination.<set-destination>|<set-destination>(kotlin.js.JsAny?){}[0]
    open var mode // com.apollographql.apollo.network.http/Request.mode|{}mode[0]
        open fun <get-mode>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.mode.<get-mode>|<get-mode>(){}[0]
        open fun <set-mode>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.mode.<set-mode>|<set-mode>(kotlin.js.JsAny?){}[0]
    open var redirect // com.apollographql.apollo.network.http/Request.redirect|{}redirect[0]
        open fun <get-redirect>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.redirect.<get-redirect>|<get-redirect>(){}[0]
        open fun <set-redirect>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.redirect.<set-redirect>|<set-redirect>(kotlin.js.JsAny?){}[0]
    open var referrerPolicy // com.apollographql.apollo.network.http/Request.referrerPolicy|{}referrerPolicy[0]
        open fun <get-referrerPolicy>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Request.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]
        open fun <set-referrerPolicy>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Request.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(kotlin.js.JsAny?){}[0]

    abstract fun clone(): com.apollographql.apollo.network.http/Request // com.apollographql.apollo.network.http/Request.clone|clone(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/RequestInit : kotlin.js/JsAny { // com.apollographql.apollo.network.http/RequestInit|null[0]
    open var body // com.apollographql.apollo.network.http/RequestInit.body|{}body[0]
        open fun <get-body>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.body.<get-body>|<get-body>(){}[0]
        open fun <set-body>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.body.<set-body>|<set-body>(kotlin.js.JsAny?){}[0]
    open var cache // com.apollographql.apollo.network.http/RequestInit.cache|{}cache[0]
        open fun <get-cache>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.cache.<get-cache>|<get-cache>(){}[0]
        open fun <set-cache>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.cache.<set-cache>|<set-cache>(kotlin.js.JsAny?){}[0]
    open var credentials // com.apollographql.apollo.network.http/RequestInit.credentials|{}credentials[0]
        open fun <get-credentials>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.credentials.<get-credentials>|<get-credentials>(){}[0]
        open fun <set-credentials>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.credentials.<set-credentials>|<set-credentials>(kotlin.js.JsAny?){}[0]
    open var headers // com.apollographql.apollo.network.http/RequestInit.headers|{}headers[0]
        open fun <get-headers>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.headers.<get-headers>|<get-headers>(){}[0]
        open fun <set-headers>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.headers.<set-headers>|<set-headers>(kotlin.js.JsAny?){}[0]
    open var integrity // com.apollographql.apollo.network.http/RequestInit.integrity|{}integrity[0]
        open fun <get-integrity>(): kotlin/String? // com.apollographql.apollo.network.http/RequestInit.integrity.<get-integrity>|<get-integrity>(){}[0]
        open fun <set-integrity>(kotlin/String?) // com.apollographql.apollo.network.http/RequestInit.integrity.<set-integrity>|<set-integrity>(kotlin.String?){}[0]
    open var keepalive // com.apollographql.apollo.network.http/RequestInit.keepalive|{}keepalive[0]
        open fun <get-keepalive>(): kotlin/Boolean? // com.apollographql.apollo.network.http/RequestInit.keepalive.<get-keepalive>|<get-keepalive>(){}[0]
        open fun <set-keepalive>(kotlin/Boolean?) // com.apollographql.apollo.network.http/RequestInit.keepalive.<set-keepalive>|<set-keepalive>(kotlin.Boolean?){}[0]
    open var method // com.apollographql.apollo.network.http/RequestInit.method|{}method[0]
        open fun <get-method>(): kotlin/String? // com.apollographql.apollo.network.http/RequestInit.method.<get-method>|<get-method>(){}[0]
        open fun <set-method>(kotlin/String?) // com.apollographql.apollo.network.http/RequestInit.method.<set-method>|<set-method>(kotlin.String?){}[0]
    open var mode // com.apollographql.apollo.network.http/RequestInit.mode|{}mode[0]
        open fun <get-mode>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.mode.<get-mode>|<get-mode>(){}[0]
        open fun <set-mode>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.mode.<set-mode>|<set-mode>(kotlin.js.JsAny?){}[0]
    open var redirect // com.apollographql.apollo.network.http/RequestInit.redirect|{}redirect[0]
        open fun <get-redirect>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.redirect.<get-redirect>|<get-redirect>(){}[0]
        open fun <set-redirect>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.redirect.<set-redirect>|<set-redirect>(kotlin.js.JsAny?){}[0]
    open var referrer // com.apollographql.apollo.network.http/RequestInit.referrer|{}referrer[0]
        open fun <get-referrer>(): kotlin/String? // com.apollographql.apollo.network.http/RequestInit.referrer.<get-referrer>|<get-referrer>(){}[0]
        open fun <set-referrer>(kotlin/String?) // com.apollographql.apollo.network.http/RequestInit.referrer.<set-referrer>|<set-referrer>(kotlin.String?){}[0]
    open var referrerPolicy // com.apollographql.apollo.network.http/RequestInit.referrerPolicy|{}referrerPolicy[0]
        open fun <get-referrerPolicy>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.referrerPolicy.<get-referrerPolicy>|<get-referrerPolicy>(){}[0]
        open fun <set-referrerPolicy>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.referrerPolicy.<set-referrerPolicy>|<set-referrerPolicy>(kotlin.js.JsAny?){}[0]
    open var signal // com.apollographql.apollo.network.http/RequestInit.signal|{}signal[0]
        open fun <get-signal>(): com.apollographql.apollo.network.http/AbortSignal? // com.apollographql.apollo.network.http/RequestInit.signal.<get-signal>|<get-signal>(){}[0]
        open fun <set-signal>(com.apollographql.apollo.network.http/AbortSignal?) // com.apollographql.apollo.network.http/RequestInit.signal.<set-signal>|<set-signal>(com.apollographql.apollo.network.http.AbortSignal?){}[0]
    open var window // com.apollographql.apollo.network.http/RequestInit.window|{}window[0]
        open fun <get-window>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/RequestInit.window.<get-window>|<get-window>(){}[0]
        open fun <set-window>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/RequestInit.window.<set-window>|<set-window>(kotlin.js.JsAny?){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Response : com.apollographql.apollo.network.http/Body { // com.apollographql.apollo.network.http/Response|null[0]
    abstract var headers // com.apollographql.apollo.network.http/Response.headers|{}headers[0]
        abstract fun <get-headers>(): com.apollographql.apollo.network.http/Headers // com.apollographql.apollo.network.http/Response.headers.<get-headers>|<get-headers>(){}[0]
        abstract fun <set-headers>(com.apollographql.apollo.network.http/Headers) // com.apollographql.apollo.network.http/Response.headers.<set-headers>|<set-headers>(com.apollographql.apollo.network.http.Headers){}[0]
    abstract var ok // com.apollographql.apollo.network.http/Response.ok|{}ok[0]
        abstract fun <get-ok>(): kotlin/Boolean // com.apollographql.apollo.network.http/Response.ok.<get-ok>|<get-ok>(){}[0]
        abstract fun <set-ok>(kotlin/Boolean) // com.apollographql.apollo.network.http/Response.ok.<set-ok>|<set-ok>(kotlin.Boolean){}[0]
    abstract var redirected // com.apollographql.apollo.network.http/Response.redirected|{}redirected[0]
        abstract fun <get-redirected>(): kotlin/Boolean // com.apollographql.apollo.network.http/Response.redirected.<get-redirected>|<get-redirected>(){}[0]
        abstract fun <set-redirected>(kotlin/Boolean) // com.apollographql.apollo.network.http/Response.redirected.<set-redirected>|<set-redirected>(kotlin.Boolean){}[0]
    abstract var status // com.apollographql.apollo.network.http/Response.status|{}status[0]
        abstract fun <get-status>(): kotlin/Int // com.apollographql.apollo.network.http/Response.status.<get-status>|<get-status>(){}[0]
        abstract fun <set-status>(kotlin/Int) // com.apollographql.apollo.network.http/Response.status.<set-status>|<set-status>(kotlin.Int){}[0]
    abstract var statusText // com.apollographql.apollo.network.http/Response.statusText|{}statusText[0]
        abstract fun <get-statusText>(): kotlin/String // com.apollographql.apollo.network.http/Response.statusText.<get-statusText>|<get-statusText>(){}[0]
        abstract fun <set-statusText>(kotlin/String) // com.apollographql.apollo.network.http/Response.statusText.<set-statusText>|<set-statusText>(kotlin.String){}[0]
    abstract var trailer // com.apollographql.apollo.network.http/Response.trailer|{}trailer[0]
        abstract fun <get-trailer>(): kotlin.js/Promise<com.apollographql.apollo.network.http/Headers> // com.apollographql.apollo.network.http/Response.trailer.<get-trailer>|<get-trailer>(){}[0]
        abstract fun <set-trailer>(kotlin.js/Promise<com.apollographql.apollo.network.http/Headers>) // com.apollographql.apollo.network.http/Response.trailer.<set-trailer>|<set-trailer>(kotlin.js.Promise<com.apollographql.apollo.network.http.Headers>){}[0]
    abstract var url // com.apollographql.apollo.network.http/Response.url|{}url[0]
        abstract fun <get-url>(): kotlin/String // com.apollographql.apollo.network.http/Response.url.<get-url>|<get-url>(){}[0]
        abstract fun <set-url>(kotlin/String) // com.apollographql.apollo.network.http/Response.url.<set-url>|<set-url>(kotlin.String){}[0]
    open var type // com.apollographql.apollo.network.http/Response.type|{}type[0]
        open fun <get-type>(): kotlin.js/JsAny? // com.apollographql.apollo.network.http/Response.type.<get-type>|<get-type>(){}[0]
        open fun <set-type>(kotlin.js/JsAny?) // com.apollographql.apollo.network.http/Response.type.<set-type>|<set-type>(kotlin.js.JsAny?){}[0]

    abstract fun clone(): com.apollographql.apollo.network.http/Response // com.apollographql.apollo.network.http/Response.clone|clone(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Uint8Array : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Uint8Array|null[0]
    abstract var BYTES_PER_ELEMENT // com.apollographql.apollo.network.http/Uint8Array.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin.js/JsNumber) // com.apollographql.apollo.network.http/Uint8Array.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.js.JsNumber){}[0]
    abstract var buffer // com.apollographql.apollo.network.http/Uint8Array.buffer|{}buffer[0]
        abstract fun <get-buffer>(): kotlin.js/JsAny // com.apollographql.apollo.network.http/Uint8Array.buffer.<get-buffer>|<get-buffer>(){}[0]
        abstract fun <set-buffer>(kotlin.js/JsAny) // com.apollographql.apollo.network.http/Uint8Array.buffer.<set-buffer>|<set-buffer>(kotlin.js.JsAny){}[0]
    abstract var byteLength // com.apollographql.apollo.network.http/Uint8Array.byteLength|{}byteLength[0]
        abstract fun <get-byteLength>(): kotlin/Int // com.apollographql.apollo.network.http/Uint8Array.byteLength.<get-byteLength>|<get-byteLength>(){}[0]
        abstract fun <set-byteLength>(kotlin/Int) // com.apollographql.apollo.network.http/Uint8Array.byteLength.<set-byteLength>|<set-byteLength>(kotlin.Int){}[0]
    abstract var byteOffset // com.apollographql.apollo.network.http/Uint8Array.byteOffset|{}byteOffset[0]
        abstract fun <get-byteOffset>(): kotlin/Int // com.apollographql.apollo.network.http/Uint8Array.byteOffset.<get-byteOffset>|<get-byteOffset>(){}[0]
        abstract fun <set-byteOffset>(kotlin/Int) // com.apollographql.apollo.network.http/Uint8Array.byteOffset.<set-byteOffset>|<set-byteOffset>(kotlin.Int){}[0]
    abstract var length // com.apollographql.apollo.network.http/Uint8Array.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // com.apollographql.apollo.network.http/Uint8Array.length.<get-length>|<get-length>(){}[0]
        abstract fun <set-length>(kotlin/Int) // com.apollographql.apollo.network.http/Uint8Array.length.<set-length>|<set-length>(kotlin.Int){}[0]

    abstract fun <#A1: kotlin.js/JsAny> reduce(kotlin/Function4<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, #A1>, #A1): #A1 // com.apollographql.apollo.network.http/Uint8Array.reduce|reduce(kotlin.Function4<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,0:0>;0:0){0§<kotlin.js.JsAny>}[0]
    abstract fun <#A1: kotlin.js/JsAny> reduceRight(kotlin/Function4<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, #A1>, #A1): #A1 // com.apollographql.apollo.network.http/Uint8Array.reduceRight|reduceRight(kotlin.Function4<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,0:0>;0:0){0§<kotlin.js.JsAny>}[0]
    abstract fun copyWithin(kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.copyWithin|copyWithin(kotlin.js.JsNumber;kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun every(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): kotlin/Boolean // com.apollographql.apollo.network.http/Uint8Array.every|every(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun fill(kotlin.js/JsNumber, kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.fill|fill(kotlin.js.JsNumber;kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun filter(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.filter|filter(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun find(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin/Boolean>, kotlin.js/JsAny? = ...): kotlin.js/JsNumber? // com.apollographql.apollo.network.http/Uint8Array.find|find(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.Boolean>;kotlin.js.JsAny?){}[0]
    abstract fun findIndex(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin/Boolean>, kotlin.js/JsAny? = ...): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.findIndex|findIndex(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.Boolean>;kotlin.js.JsAny?){}[0]
    abstract fun forEach(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin/Unit>, kotlin.js/JsAny? = ...) // com.apollographql.apollo.network.http/Uint8Array.forEach|forEach(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.Unit>;kotlin.js.JsAny?){}[0]
    abstract fun indexOf(kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.indexOf|indexOf(kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun join(kotlin/String? = ...): kotlin/String // com.apollographql.apollo.network.http/Uint8Array.join|join(kotlin.String?){}[0]
    abstract fun lastIndexOf(kotlin.js/JsNumber, kotlin.js/JsNumber? = ...): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.lastIndexOf|lastIndexOf(kotlin.js.JsNumber;kotlin.js.JsNumber?){}[0]
    abstract fun map(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsAny? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.map|map(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsAny?){}[0]
    abstract fun reduce(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsNumber>): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsNumber>){}[0]
    abstract fun reduce(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsNumber): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.reduce|reduce(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsNumber){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsNumber>): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsNumber>){}[0]
    abstract fun reduceRight(kotlin/Function4<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsNumber>, kotlin.js/JsNumber): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8Array.reduceRight|reduceRight(kotlin.Function4<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsNumber>;kotlin.js.JsNumber){}[0]
    abstract fun reverse(): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.reverse|reverse(){}[0]
    abstract fun set(com.apollographql.apollo.network.http/ArrayLike<kotlin.js/JsNumber>, kotlin.js/JsNumber? = ...) // com.apollographql.apollo.network.http/Uint8Array.set|set(com.apollographql.apollo.network.http.ArrayLike<kotlin.js.JsNumber>;kotlin.js.JsNumber?){}[0]
    abstract fun slice(kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.slice|slice(kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun some(kotlin/Function3<kotlin.js/JsNumber, kotlin.js/JsNumber, com.apollographql.apollo.network.http/Uint8Array, kotlin.js/JsAny>, kotlin.js/JsAny? = ...): kotlin/Boolean // com.apollographql.apollo.network.http/Uint8Array.some|some(kotlin.Function3<kotlin.js.JsNumber,kotlin.js.JsNumber,com.apollographql.apollo.network.http.Uint8Array,kotlin.js.JsAny>;kotlin.js.JsAny?){}[0]
    abstract fun sort(kotlin/Function2<kotlin.js/JsNumber, kotlin.js/JsNumber, kotlin.js/JsNumber>? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.sort|sort(kotlin.Function2<kotlin.js.JsNumber,kotlin.js.JsNumber,kotlin.js.JsNumber>?){}[0]
    abstract fun subarray(kotlin.js/JsNumber? = ..., kotlin.js/JsNumber? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8Array.subarray|subarray(kotlin.js.JsNumber?;kotlin.js.JsNumber?){}[0]
    abstract fun toLocaleString(): kotlin/String // com.apollographql.apollo.network.http/Uint8Array.toLocaleString|toLocaleString(){}[0]
    abstract fun toString(): kotlin/String // com.apollographql.apollo.network.http/Uint8Array.toString|toString(){}[0]
}

// Targets: [wasmJs]
abstract interface com.apollographql.apollo.network.http/Uint8ArrayConstructor : kotlin.js/JsAny { // com.apollographql.apollo.network.http/Uint8ArrayConstructor|null[0]
    abstract var BYTES_PER_ELEMENT // com.apollographql.apollo.network.http/Uint8ArrayConstructor.BYTES_PER_ELEMENT|{}BYTES_PER_ELEMENT[0]
        abstract fun <get-BYTES_PER_ELEMENT>(): kotlin.js/JsNumber // com.apollographql.apollo.network.http/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<get-BYTES_PER_ELEMENT>|<get-BYTES_PER_ELEMENT>(){}[0]
        abstract fun <set-BYTES_PER_ELEMENT>(kotlin.js/JsNumber) // com.apollographql.apollo.network.http/Uint8ArrayConstructor.BYTES_PER_ELEMENT.<set-BYTES_PER_ELEMENT>|<set-BYTES_PER_ELEMENT>(kotlin.js.JsNumber){}[0]
    abstract var prototype // com.apollographql.apollo.network.http/Uint8ArrayConstructor.prototype|{}prototype[0]
        abstract fun <get-prototype>(): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8ArrayConstructor.prototype.<get-prototype>|<get-prototype>(){}[0]
        abstract fun <set-prototype>(com.apollographql.apollo.network.http/Uint8Array) // com.apollographql.apollo.network.http/Uint8ArrayConstructor.prototype.<set-prototype>|<set-prototype>(com.apollographql.apollo.network.http.Uint8Array){}[0]

    abstract fun <#A1: kotlin.js/JsAny> from(com.apollographql.apollo.network.http/ArrayLike<#A1>, kotlin/Function2<#A1, kotlin.js/JsNumber, kotlin.js/JsNumber>, kotlin.js/JsAny? = ...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8ArrayConstructor.from|from(com.apollographql.apollo.network.http.ArrayLike<0:0>;kotlin.Function2<0:0,kotlin.js.JsNumber,kotlin.js.JsNumber>;kotlin.js.JsAny?){0§<kotlin.js.JsAny>}[0]
    abstract fun from(com.apollographql.apollo.network.http/ArrayLike<kotlin.js/JsNumber>): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8ArrayConstructor.from|from(com.apollographql.apollo.network.http.ArrayLike<kotlin.js.JsNumber>){}[0]
    abstract fun of(kotlin/Array<out kotlin.js/JsNumber>...): com.apollographql.apollo.network.http/Uint8Array // com.apollographql.apollo.network.http/Uint8ArrayConstructor.of|of(kotlin.Array<out|kotlin.js.JsNumber>...){}[0]
}

// Targets: [wasmJs]
final fun (com.apollographql.apollo.network.http/Uint8Array).com.apollographql.apollo.network.http/get(kotlin/Int): kotlin/Byte // com.apollographql.apollo.network.http/get|get@com.apollographql.apollo.network.http.Uint8Array(kotlin.Int){}[0]

// Targets: [wasmJs]
final fun (com.apollographql.apollo.network.http/Uint8Array).com.apollographql.apollo.network.http/set(kotlin/Int, kotlin/Byte) // com.apollographql.apollo.network.http/set|set@com.apollographql.apollo.network.http.Uint8Array(kotlin.Int;kotlin.Byte){}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny> com.apollographql.apollo.network.http/makeJsCall(kotlin.js/JsAny, kotlin/Array<out kotlin.js/JsAny>...): #A // com.apollographql.apollo.network.http/makeJsCall|makeJsCall(kotlin.js.JsAny;kotlin.Array<out|kotlin.js.JsAny>...){0§<kotlin.js.JsAny>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (com.apollographql.apollo.network.http/ArrayLike<#A>).com.apollographql.apollo.network.http/get(kotlin/Int): #A // com.apollographql.apollo.network.http/get|get@com.apollographql.apollo.network.http.ArrayLike<0:0>(kotlin.Int){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun <#A: kotlin.js/JsAny?> (com.apollographql.apollo.network.http/ArrayLike<#A>).com.apollographql.apollo.network.http/set(kotlin/Int, #A) // com.apollographql.apollo.network.http/set|set@com.apollographql.apollo.network.http.ArrayLike<0:0>(kotlin.Int;0:0){0§<kotlin.js.JsAny?>}[0]

// Targets: [wasmJs]
final fun com.apollographql.apollo.network.http/fetch(kotlin/String, com.apollographql.apollo.network.http/RequestInit? = ...): kotlin.js/Promise<org.w3c.fetch/Response> // com.apollographql.apollo.network.http/fetch|fetch(kotlin.String;com.apollographql.apollo.network.http.RequestInit?){}[0]

// Targets: [wasmJs]
final fun com.apollographql.apollo.network.http/makeJsCall(kotlin.js/JsAny, kotlin/Array<out kotlin.js/JsAny>...) // com.apollographql.apollo.network.http/makeJsCall|makeJsCall(kotlin.js.JsAny;kotlin.Array<out|kotlin.js.JsAny>...){}[0]

// Targets: [wasmJs]
final inline fun (com.apollographql.apollo.network.http/EventListener).com.apollographql.apollo.network.http/invoke(com.apollographql.apollo.network.http/Event) // com.apollographql.apollo.network.http/invoke|invoke@com.apollographql.apollo.network.http.EventListener(com.apollographql.apollo.network.http.Event){}[0]
