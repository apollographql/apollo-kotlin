//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.root_query_inline_fragment.type.Character
import com.example.root_query_inline_fragment.type.Droid
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.GraphQLFloat
import com.example.root_query_inline_fragment.type.GraphQLString
import kotlin.collections.List

public object TestQuerySelections {
  private val _onHuman: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "height",
          type = GraphQLFloat.type
        ).build()
      )

  private val _hero: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "appearsIn",
          type = Episode.type.list().notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = listOf("Human")
        ).selections(_onHuman)
        .build()
      )

  private val _onDroid: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "primaryFunction",
          type = GraphQLString.type
        ).build()
      )

  private val _droid: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Droid",
          possibleTypes = listOf("Droid")
        ).selections(_onDroid)
        .build()
      )

  private val _onQuery: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "hero",
          type = Character.type
        ).selections(_hero)
        .build(),
        CompiledField.Builder(
          name = "droid",
          type = Droid.type
        ).arguments(listOf(
          CompiledArgument("id", 1)
        ))
        .selections(_droid)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Query",
          possibleTypes = listOf("Query")
        ).selections(_onQuery)
        .build()
      )
}
