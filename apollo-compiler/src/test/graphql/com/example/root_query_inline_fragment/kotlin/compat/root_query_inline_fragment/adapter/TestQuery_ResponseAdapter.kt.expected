//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_inline_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.root_query_inline_fragment.TestQuery
import com.example.root_query_inline_fragment.type.Episode
import com.example.root_query_inline_fragment.type.adapter.Episode_ResponseAdapter
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "hero", "droid")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var __typename: String? = null
      var _hero: TestQuery.Hero? = null
      var _droid: TestQuery.Droid? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          2 -> _droid = Droid.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        __typename = __typename!!,
        hero = _hero,
        droid = _droid
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)

      writer.name("droid")
      Droid.obj().nullable().toJson(writer, customScalarAdapters, value.droid)
    }
  }

  public object Hero : Adapter<TestQuery.Hero> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Hero {
      var __typename: String? = null
      var _name: String? = null
      var _appearsIn: List<Episode?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asHuman: TestQuery.AsHuman? = null
      if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asHuman = com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Hero(
        __typename = __typename,
        name = _name!!,
        appearsIn = _appearsIn!!,
        asHuman = _asHuman
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Hero,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("appearsIn")
      Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
          value.appearsIn)

      if (value.asHuman != null) {
        com.example.root_query_inline_fragment.adapter.TestQuery_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }
    }
  }

  public object AsHuman : Adapter<TestQuery.AsHuman> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "appearsIn", "height")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsHuman {
      var __typename: String? = null
      var _name: String? = null
      var _appearsIn: List<Episode?>? = null
      var _height: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _appearsIn = Episode_ResponseAdapter.nullable().list().fromJson(reader,
              customScalarAdapters)
          3 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsHuman(
        __typename = __typename!!,
        name = _name!!,
        appearsIn = _appearsIn!!,
        height = _height
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsHuman,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("appearsIn")
      Episode_ResponseAdapter.nullable().list().toJson(writer, customScalarAdapters,
          value.appearsIn)

      writer.name("height")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
    }
  }

  public object Droid : Adapter<TestQuery.Droid> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "primaryFunction")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Droid {
      var __typename: String? = null
      var _name: String? = null
      var _primaryFunction: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Droid(
        __typename = __typename!!,
        name = _name!!,
        primaryFunction = _primaryFunction
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Droid,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("primaryFunction")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
    }
  }
}
