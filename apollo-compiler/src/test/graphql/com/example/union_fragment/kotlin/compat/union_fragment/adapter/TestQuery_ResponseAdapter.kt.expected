//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.union_fragment.TestQuery
import com.example.union_fragment.fragment.Starship
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _search: List<TestQuery.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = _search
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.search)
    }
  }

  public object Search : Adapter<TestQuery.Search> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Search {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asStarship: TestQuery.AsStarship? = null
      if (possibleTypes("Starship").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asStarship = com.example.union_fragment.adapter.TestQuery_ResponseAdapter.AsStarship.fromJson(reader,
            customScalarAdapters)
      }

      reader.rewind()
      val _fragments = com.example.union_fragment.adapter.TestQuery_ResponseAdapter.Search.Fragments.fromJson(reader,
          customScalarAdapters)

      return TestQuery.Search(
        __typename = __typename,
        asStarship = _asStarship,
        fragments = _fragments
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Search,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asStarship != null) {
        com.example.union_fragment.adapter.TestQuery_ResponseAdapter.AsStarship.toJson(writer,
            customScalarAdapters, value.asStarship)
      }

      com.example.union_fragment.adapter.TestQuery_ResponseAdapter.Search.Fragments.toJson(writer,
          customScalarAdapters, value.fragments)
    }

    private object Fragments : Adapter<TestQuery.Search.Fragments> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Search.Fragments {


        reader.rewind()
        val __typename = reader.readTypename()

        var _starship: Starship? = null
        if (possibleTypes("Starship").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _starship = com.example.union_fragment.fragment.StarshipImpl_ResponseAdapter.Starship.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Search.Fragments(
          starship = _starship
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Search.Fragments,
      ): Unit {
        if (value.starship != null) {
          com.example.union_fragment.fragment.StarshipImpl_ResponseAdapter.Starship.toJson(writer,
              customScalarAdapters, value.starship)
        }
      }
    }
  }

  public object AsStarship : Adapter<TestQuery.AsStarship> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsStarship {
      var __typename: String? = null
      var _id: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsStarship(
        __typename = __typename!!,
        id = _id!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsStarship,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)
    }
  }
}
