//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_merge_fields.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.AnyAdapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.inline_fragment_merge_fields.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Data.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }

    private object Hero : Adapter<TestQuery.Data.Hero> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "friendsConnection")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Hero {
        var __typename: String? = null
        var name: String? = null
        var friendsConnection: TestQuery.Data.Hero.FriendsConnection? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> friendsConnection = FriendsConnection.obj().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val onCharacter = com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.fromJson(reader,
            customScalarAdapters)

        return TestQuery.Data.Hero(
          __typename = __typename!!,
          name = name!!,
          friendsConnection = friendsConnection!!,
          onCharacter = onCharacter
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Hero
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)

        writer.name("friendsConnection")
        FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)

        com.example.inline_fragment_merge_fields.adapter.TestQuery_ResponseAdapter.Data.Hero.OnCharacter.toJson(writer,
            customScalarAdapters, value.onCharacter)
      }

      private object FriendsConnection : Adapter<TestQuery.Data.Hero.FriendsConnection> {
        public val RESPONSE_NAMES: List<String> = listOf("edges")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Hero.FriendsConnection {
          var edges: List<TestQuery.Data.Hero.FriendsConnection.Edge?>? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> edges = Edge.obj().nullable().list().nullable().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.FriendsConnection(
            edges = edges
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.FriendsConnection
        ): Unit {
          writer.name("edges")
          Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.edges)
        }

        private object Edge : Adapter<TestQuery.Data.Hero.FriendsConnection.Edge> {
          public val RESPONSE_NAMES: List<String> = listOf("node")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Hero.FriendsConnection.Edge {
            var node: TestQuery.Data.Hero.FriendsConnection.Edge.Node? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Hero.FriendsConnection.Edge(
              node = node
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Hero.FriendsConnection.Edge
          ): Unit {
            writer.name("node")
            Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
          }

          private object Node : Adapter<TestQuery.Data.Hero.FriendsConnection.Edge.Node> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Hero.FriendsConnection.Edge.Node {
              var name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.FriendsConnection.Edge.Node(
                name = name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Hero.FriendsConnection.Edge.Node
            ): Unit {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }

      private object OnCharacter : Adapter<TestQuery.Data.Hero.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "profileLink", "friendsConnection")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Hero.OnCharacter {
          var name: String? = null
          var profileLink: Any? = null
          var friendsConnection: TestQuery.Data.Hero.OnCharacter.FriendsConnection? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> profileLink = AnyAdapter.fromJson(reader, customScalarAdapters)
              2 -> friendsConnection = FriendsConnection.obj().fromJson(reader,
                  customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Hero.OnCharacter(
            name = name!!,
            profileLink = profileLink!!,
            friendsConnection = friendsConnection!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Hero.OnCharacter
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("profileLink")
          AnyAdapter.toJson(writer, customScalarAdapters, value.profileLink)

          writer.name("friendsConnection")
          FriendsConnection.obj().toJson(writer, customScalarAdapters, value.friendsConnection)
        }

        private object FriendsConnection :
            Adapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection> {
          public val RESPONSE_NAMES: List<String> = listOf("edges")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Hero.OnCharacter.FriendsConnection {
            var edges: List<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge?>? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> edges = Edge.obj().nullable().list().nullable().fromJson(reader,
                    customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Hero.OnCharacter.FriendsConnection(
              edges = edges
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection
          ): Unit {
            writer.name("edges")
            Edge.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
                value.edges)
          }

          private object Edge : Adapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge> {
            public val RESPONSE_NAMES: List<String> = listOf("node")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge {
              var node: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> node = Node.obj().nullable().fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge(
                node = node
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge
            ): Unit {
              writer.name("node")
              Node.obj().nullable().toJson(writer, customScalarAdapters, value.node)
            }

            private object Node :
                Adapter<TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node> {
              public val RESPONSE_NAMES: List<String> = listOf("name")

              public override fun fromJson(reader: JsonReader,
                  customScalarAdapters: CustomScalarAdapters):
                  TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node {
                var name: String? = null

                while(true) {
                  when (reader.selectName(RESPONSE_NAMES)) {
                    0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
                    else -> break
                  }
                }

                return TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node(
                  name = name!!
                )
              }

              public override fun toJson(
                writer: JsonWriter,
                customScalarAdapters: CustomScalarAdapters,
                `value`: TestQuery.Data.Hero.OnCharacter.FriendsConnection.Edge.Node
              ): Unit {
                writer.name("name")
                StringAdapter.toJson(writer, customScalarAdapters, value.name)
              }
            }
          }
        }
      }
    }
  }
}
