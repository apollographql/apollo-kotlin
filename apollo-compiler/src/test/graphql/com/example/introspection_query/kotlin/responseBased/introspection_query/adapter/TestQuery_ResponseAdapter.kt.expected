//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.example.introspection_query.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("__schema", "__type")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var __schema: TestQuery.Data.__Schema? = null
      var __type: TestQuery.Data.__Type? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __schema = __Schema.obj().fromJson(reader, customScalarAdapters)
          1 -> __type = __Type.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        __schema = __schema!!,
        __type = __type!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("__schema")
      __Schema.obj().toJson(writer, customScalarAdapters, value.__schema)

      writer.name("__type")
      __Type.obj().toJson(writer, customScalarAdapters, value.__type)
    }

    private object __Schema : Adapter<TestQuery.Data.__Schema> {
      public val RESPONSE_NAMES: List<String> = listOf("queryType", "types")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.__Schema {
        var queryType: TestQuery.Data.__Schema.QueryType? = null
        var types: List<TestQuery.Data.__Schema.Type>? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> queryType = QueryType.obj().fromJson(reader, customScalarAdapters)
            1 -> types = Type.obj().list().fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.__Schema(
          queryType = queryType!!,
          types = types!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.__Schema
      ): Unit {
        writer.name("queryType")
        QueryType.obj().toJson(writer, customScalarAdapters, value.queryType)

        writer.name("types")
        Type.obj().list().toJson(writer, customScalarAdapters, value.types)
      }

      private object QueryType : Adapter<TestQuery.Data.__Schema.QueryType> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Schema.QueryType {
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.__Schema.QueryType(
            name = name
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.__Schema.QueryType
        ): Unit {
          writer.name("name")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }

      private object Type : Adapter<TestQuery.Data.__Schema.Type> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.__Schema.Type {
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.__Schema.Type(
            name = name
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.__Schema.Type
        ): Unit {
          writer.name("name")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }

    private object __Type : Adapter<TestQuery.Data.__Type> {
      public val RESPONSE_NAMES: List<String> = listOf("name")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.__Type {
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.__Type(
          name = name
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.__Type
      ): Unit {
        writer.name("name")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }
  }
}
