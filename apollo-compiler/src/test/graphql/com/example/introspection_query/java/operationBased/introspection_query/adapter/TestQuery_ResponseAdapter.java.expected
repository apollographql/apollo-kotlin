//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.introspection_query.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.introspection_query.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__schema", "__type");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.__Schema __schema = null;
      TestQuery.__Type __type = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __schema = new ObjectAdapter<TestQuery.__Schema>(__Schema.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: __type = new ObjectAdapter<TestQuery.__Type>(__Type.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__schema, "__schema");
      Assertions.checkFieldNotMissing(__type, "__type");

      return new TestQuery.Data(
        __schema,
        __type
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("__schema");
      new ObjectAdapter<TestQuery.__Schema>(__Schema.INSTANCE, false).toJson(writer, customScalarAdapters, value.__schema);

      writer.name("__type");
      new ObjectAdapter<TestQuery.__Type>(__Type.INSTANCE, false).toJson(writer, customScalarAdapters, value.__type);
    }
  }

  public enum __Schema implements Adapter<TestQuery.__Schema> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("queryType", "types");

    @Override
    public TestQuery.__Schema fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.QueryType queryType = null;
      List<TestQuery.Type> types = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: queryType = new ObjectAdapter<TestQuery.QueryType>(QueryType.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          case 1: types = new ListAdapter<>(new ObjectAdapter<TestQuery.Type>(Type.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(queryType, "queryType");
      Assertions.checkFieldNotMissing(types, "types");

      return new TestQuery.__Schema(
        queryType,
        types
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.__Schema value) throws IOException {
      writer.name("queryType");
      new ObjectAdapter<TestQuery.QueryType>(QueryType.INSTANCE, false).toJson(writer, customScalarAdapters, value.queryType);

      writer.name("types");
      new ListAdapter<>(new ObjectAdapter<TestQuery.Type>(Type.INSTANCE, false)).toJson(writer, customScalarAdapters, value.types);
    }
  }

  public enum QueryType implements Adapter<TestQuery.QueryType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.QueryType fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.QueryType(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.QueryType value) throws IOException {
      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum Type implements Adapter<TestQuery.Type> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.Type fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Type(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Type value) throws IOException {
      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum __Type implements Adapter<TestQuery.__Type> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.__Type fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.__Type(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.__Type value) throws IOException {
      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
