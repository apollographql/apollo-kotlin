//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecation.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.deprecation.TestQuery;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.Hero hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: hero = new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Hero>(Hero.INSTANCE, false)).toJson(writer, customScalarAdapters, value.hero);
    }
  }

  public enum Hero implements Adapter<TestQuery.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "deprecated", "deprecatedBool");

    @Override
    public TestQuery.Hero fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String name = null;
      String deprecated = null;
      Boolean deprecatedBool = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: deprecated = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: deprecatedBool = Adapters.BooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");
      Assertions.checkFieldNotMissing(deprecated, "deprecated");
      Assertions.checkFieldNotMissing(deprecatedBool, "deprecatedBool");

      return new TestQuery.Hero(
        name,
        deprecated,
        deprecatedBool
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Hero value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("deprecated");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.deprecated);

      writer.name("deprecatedBool");
      Adapters.BooleanAdapter.toJson(writer, customScalarAdapters, value.deprecatedBool);
    }
  }
}
