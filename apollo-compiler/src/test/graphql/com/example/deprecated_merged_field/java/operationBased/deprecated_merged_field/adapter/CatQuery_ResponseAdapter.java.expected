//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.deprecated_merged_field.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.StringAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.deprecated_merged_field.CatQuery;
import com.example.deprecated_merged_field.fragment.AnimalFragment;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class CatQuery_ResponseAdapter {
  public enum Data implements Adapter<CatQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("cat");

    @Override
    public CatQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      CatQuery.Cat cat = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: cat = Adapters.nullable(new ObjectAdapter<CatQuery.Cat>(Cat.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new CatQuery.Data(
        cat
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CatQuery.Data value) {
      writer.name("cat");
      Adapters.nullable(new ObjectAdapter<CatQuery.Cat>(Cat.INSTANCE, true)).toJson(writer, customScalarAdapters, value.cat);
    }
  }

  public enum Cat implements Adapter<CatQuery.Cat> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public CatQuery.Cat fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      AnimalFragment animalFragment = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Cat","Dog")), Collections.emptySet(), __typename)) {
        animalFragment = com.example.deprecated_merged_field.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new CatQuery.Cat(
        __typename,
        animalFragment
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        CatQuery.Cat value) {
      writer.name("__typename");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.__typename);

      if (value.animalFragment != null) {
        com.example.deprecated_merged_field.fragment.AnimalFragmentImpl_ResponseAdapter.AnimalFragment.INSTANCE.toJson(writer, customScalarAdapters, value.animalFragment);
      }
    }
  }
}
