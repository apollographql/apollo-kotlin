//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.recursive_selection.type

import com.apollographql.apollo3.api.CompiledNamedType
import com.apollographql.apollo3.api.CompiledType
import com.apollographql.apollo3.api.CustomScalarType
import com.apollographql.apollo3.api.EnumType
import com.apollographql.apollo3.api.InterfaceType
import com.apollographql.apollo3.api.ObjectType
import com.apollographql.apollo3.api.UnionType
import kotlin.collections.List

/**
 * Auto generated constants representing the custom scalars, objects, interfaces and unions in the
 * schema. Input objects are left out because they are generated separately
 */
public object Types {
  /**
   * The `Date` scalar type represents date format.
   */
  public val Date: CustomScalarType = CustomScalarType("Date", "kotlin.Any")

  /**
   * UnsupportedType for testing
   */
  public val UnsupportedType: CustomScalarType = CustomScalarType("UnsupportedType", "kotlin.Any")

  /**
   * URL for testing
   */
  public val URL: CustomScalarType = CustomScalarType("URL", "kotlin.Any")

  /**
   * The episodes in the Star Wars trilogy
   */
  public val Episode: EnumType = EnumType("Episode")

  /**
   * Lower case enum type name
   */
  public val Hero_type: EnumType = EnumType("hero_type")

  /**
   * Units of height
   */
  public val LengthUnit: EnumType = EnumType("LengthUnit")

  /**
   * For testing fragment type coercion
   */
  public val Bar: InterfaceType = InterfaceType(name = "Bar")

  /**
   * A character from the Star Wars universe
   */
  public val Character: InterfaceType = InterfaceType(name = "Character")

  /**
   * For testing fragment type coercion
   */
  public val Foo: InterfaceType = InterfaceType(name = "Foo")

  public val BarObject: ObjectType = ObjectType(name = "BarObject", implements = listOf(Bar))

  /**
   * An autonomous mechanical character in the Star Wars universe
   */
  public val Droid: ObjectType = ObjectType(name = "Droid", implements = listOf(Character))

  /**
   * For testing fragment type coercion
   */
  public val FooBar: ObjectType = ObjectType(name = "FooBar", implements = listOf(Bar, Foo))

  /**
   * For testing fragment type coercion
   */
  public val FooObject: ObjectType = ObjectType(name = "FooObject", implements = listOf(Foo))

  /**
   * A connection object for a character's friends
   */
  public val FriendsConnection: ObjectType = ObjectType(name = "FriendsConnection")

  /**
   * An edge object for a character's friends
   */
  public val FriendsEdge: ObjectType = ObjectType(name = "FriendsEdge")

  /**
   * A humanoid creature from the Star Wars universe
   */
  public val Human: ObjectType = ObjectType(name = "Human", implements = listOf(Character))

  /**
   * The mutation type, represents all updates we can make to our data
   */
  public val Mutation: ObjectType = ObjectType(name = "Mutation")

  /**
   * Information for paginating this connection
   */
  public val PageInfo: ObjectType = ObjectType(name = "PageInfo")

  /**
   * The query type, represents all of the entry points into our object graph
   */
  public val Query: ObjectType = ObjectType(name = "Query")

  /**
   * Represents a review for a movie
   */
  public val Review: ObjectType = ObjectType(name = "Review")

  public val Starship: ObjectType = ObjectType(name = "Starship")

  /**
   * To test recursive structures
   */
  public val Tree: ObjectType = ObjectType(name = "Tree")

  public val TypeWithGraphQLKeywords: ObjectType = ObjectType(name = "TypeWithGraphQLKeywords")

  public val SearchResult: UnionType = UnionType("SearchResult", Human, Droid, Starship)

  public val all: List<CompiledType> = listOf(
        Date, UnsupportedType, URL, Episode, Hero_type, LengthUnit, Bar, Character, Foo, BarObject,
            Droid, FooBar, FooObject, FriendsConnection, FriendsEdge, Human, Mutation, PageInfo,
            Query, Review, Starship, Tree, TypeWithGraphQLKeywords, SearchResult)


  public fun possibleTypes(type: CompiledNamedType): List<ObjectType> =
      com.apollographql.apollo3.api.possibleTypes(all, type)
}
