//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex8.fragment

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object AnimalFragmentImpl_ResponseAdapter {
  public object Data : Adapter<AnimalFragmentImpl.Data> {
    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        AnimalFragmentImpl.Data {
      val __typename = reader.readTypename()
      return when(__typename) {
        "Cat",
        -> PetWarmBloodedData.fromJson(reader, customScalarAdapters, __typename)
        "Lion",
        "Panther",
        -> OtherWarmBloodedData.fromJson(reader, customScalarAdapters, __typename)
        "Turtle",
        -> OtherPetData.fromJson(reader, customScalarAdapters, __typename)
        else
        -> OtherData.fromJson(reader, customScalarAdapters, __typename)
      }
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: AnimalFragmentImpl.Data,
    ): Unit {
      when(value) {
        is AnimalFragmentImpl.PetWarmBloodedData -> PetWarmBloodedData.toJson(writer,
            customScalarAdapters, value)
        is AnimalFragmentImpl.OtherWarmBloodedData -> OtherWarmBloodedData.toJson(writer,
            customScalarAdapters, value)
        is AnimalFragmentImpl.OtherPetData -> OtherPetData.toJson(writer, customScalarAdapters,
            value)
        is AnimalFragmentImpl.OtherData -> OtherData.toJson(writer, customScalarAdapters, value)
      }
    }
  }

  public object PetWarmBloodedData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature", "name")

    public fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String,
    ): AnimalFragmentImpl.PetWarmBloodedData {
      var __typename: String? = typename
      var _species: String? = null
      var _temperature: Int? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.PetWarmBloodedData(
        __typename = __typename!!,
        species = _species!!,
        temperature = _temperature!!,
        name = _name!!
      )
    }

    public fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: AnimalFragmentImpl.PetWarmBloodedData,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      writer.name("temperature")
      IntAdapter.toJson(writer, customScalarAdapters, value.temperature)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }

  public object OtherData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

    public fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String,
    ): AnimalFragmentImpl.OtherData {
      var __typename: String? = typename
      var _species: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.OtherData(
        __typename = __typename!!,
        species = _species!!
      )
    }

    public fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: AnimalFragmentImpl.OtherData,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)
    }
  }

  public object OtherWarmBloodedData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

    public fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String,
    ): AnimalFragmentImpl.OtherWarmBloodedData {
      var __typename: String? = typename
      var _species: String? = null
      var _temperature: Int? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.OtherWarmBloodedData(
        __typename = __typename!!,
        species = _species!!,
        temperature = _temperature!!
      )
    }

    public fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: AnimalFragmentImpl.OtherWarmBloodedData,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      writer.name("temperature")
      IntAdapter.toJson(writer, customScalarAdapters, value.temperature)
    }
  }

  public object OtherPetData {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

    public fun fromJson(
      reader: JsonReader,
      customScalarAdapters: CustomScalarAdapters,
      typename: String,
    ): AnimalFragmentImpl.OtherPetData {
      var __typename: String? = typename
      var _species: String? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return AnimalFragmentImpl.OtherPetData(
        __typename = __typename!!,
        species = _species!!,
        name = _name!!
      )
    }

    public fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: AnimalFragmentImpl.OtherPetData,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }
}
