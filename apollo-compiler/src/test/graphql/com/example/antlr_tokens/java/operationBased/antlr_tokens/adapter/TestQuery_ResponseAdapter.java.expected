//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.antlr_tokens.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.antlr_tokens.TestQuery;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("typeWithGraphQLKeywords");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      TestQuery.TypeWithGraphQLKeywords typeWithGraphQLKeywords = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: typeWithGraphQLKeywords = Adapters.nullable(new ObjectAdapter<TestQuery.TypeWithGraphQLKeywords>(TypeWithGraphQLKeywords.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        typeWithGraphQLKeywords
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) {
      writer.name("typeWithGraphQLKeywords");
      Adapters.nullable(new ObjectAdapter<TestQuery.TypeWithGraphQLKeywords>(TypeWithGraphQLKeywords.INSTANCE, false)).toJson(writer, customScalarAdapters, value.typeWithGraphQLKeywords);
    }
  }

  public enum TypeWithGraphQLKeywords implements Adapter<TestQuery.TypeWithGraphQLKeywords> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("on", "null", "alias");

    @Override
    public TestQuery.TypeWithGraphQLKeywords fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) {
      String on = null;
      String null_ = null;
      String alias = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: on = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: null_ = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: alias = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.TypeWithGraphQLKeywords(
        on,
        null_,
        alias
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.TypeWithGraphQLKeywords value) {
      writer.name("on");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.on);

      writer.name("null");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.null_);

      writer.name("alias");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.alias);
    }
  }
}
