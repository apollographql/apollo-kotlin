//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.antlr_tokens

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.antlr_tokens.adapter.TestQuery_ResponseAdapter
import com.example.antlr_tokens.adapter.TestQuery_VariablesAdapter
import com.example.antlr_tokens.selections.TestQuerySelections
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public data class TestQuery(
  public val operation: String?
) : Query<TestQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    TestQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  public override fun selections(): List<CompiledSelection> = TestQuerySelections.root

  public data class Data(
    public val typeWithGraphQLKeywords: TypeWithGraphQLKeywords?
  ) : Query.Data {
    public data class TypeWithGraphQLKeywords(
      public val on: String?,
      public val null_: String?,
      public val alias: String?
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "197e186cfb461d1c38c0be4da7b182eff42e304043973b994c8c2de3535daea6"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery($operation: String) {
     *   typeWithGraphQLKeywords {
     *     on
     *     null(fragment: $operation)
     *     alias: null(fragment: "A string\nwith a new line")
     *   }
     * }
     */
    public const val OPERATION_DOCUMENT: String =
        "query TestQuery(${'$'}operation: String) { typeWithGraphQLKeywords { on null(fragment: ${'$'}operation) alias: null(fragment: \"A string\\nwith a new line\") } }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
