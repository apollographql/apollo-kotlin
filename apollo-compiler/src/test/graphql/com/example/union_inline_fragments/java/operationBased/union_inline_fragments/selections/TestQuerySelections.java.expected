//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.union_inline_fragments.selections;

import com.apollographql.apollo3.api.CompiledArgument;
import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompiledFragment;
import com.apollographql.apollo3.api.CompiledListType;
import com.apollographql.apollo3.api.CompiledNotNullType;
import com.apollographql.apollo3.api.CompiledSelection;
import com.example.union_inline_fragments.type.Character;
import com.example.union_inline_fragments.type.Episode;
import com.example.union_inline_fragments.type.GraphQLID;
import com.example.union_inline_fragments.type.GraphQLString;
import com.example.union_inline_fragments.type.SearchResult;
import java.util.Arrays;
import java.util.List;

public class TestQuerySelections {
  private static List<CompiledSelection> onCharacter1 = Arrays.asList(
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> onCharacter2 = Arrays.asList(
    new CompiledField.Builder("firstAppearsIn", new CompiledNotNullType(Episode.type)).build()
  );

  private static List<CompiledSelection> friends1 = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Character", Arrays.asList("Droid", "Human")).selections(onCharacter2).build()
  );

  private static List<CompiledSelection> onHuman = Arrays.asList(
    new CompiledField.Builder("homePlanet", GraphQLString.type).build(),
    new CompiledField.Builder("friends", new CompiledListType(Character.type)).selections(friends1).build()
  );

  private static List<CompiledSelection> friends2 = Arrays.asList(
    new CompiledField.Builder("id", new CompiledNotNullType(GraphQLID.type)).build()
  );

  private static List<CompiledSelection> onDroid = Arrays.asList(
    new CompiledField.Builder("primaryFunction", GraphQLString.type).build(),
    new CompiledField.Builder("friends", new CompiledListType(Character.type)).selections(friends2).build()
  );

  private static List<CompiledSelection> friends = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Character", Arrays.asList("Droid", "Human")).selections(onCharacter1).build(),
    new CompiledFragment.Builder("Human", Arrays.asList("Human")).selections(onHuman).build(),
    new CompiledFragment.Builder("Droid", Arrays.asList("Droid")).selections(onDroid).build()
  );

  private static List<CompiledSelection> onCharacter = Arrays.asList(
    new CompiledField.Builder("id", new CompiledNotNullType(GraphQLID.type)).build(),
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("friends", new CompiledListType(Character.type)).selections(friends).build()
  );

  private static List<CompiledSelection> onStarship = Arrays.asList(
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build()
  );

  private static List<CompiledSelection> search = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Character", Arrays.asList("Droid", "Human")).selections(onCharacter).build(),
    new CompiledFragment.Builder("Starship", Arrays.asList("Starship")).selections(onStarship).build()
  );

  public static List<CompiledSelection> root = Arrays.asList(
    new CompiledField.Builder("search", new CompiledListType(SearchResult.type)).arguments(Arrays.asList(new CompiledArgument("text", "test", false))).selections(search).build()
  );
}
