//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.inline_fragment_intersection.TestOperation;
import com.example.inline_fragment_intersection.type.Race;
import com.example.inline_fragment_intersection.type.adapter.Race_ResponseAdapter;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestOperation_ResponseAdapter {
  public enum Data implements Adapter<TestOperation.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("random");

    @Override
    public TestOperation.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestOperation.Random random = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: random = new ObjectAdapter<TestOperation.Random>(Random.INSTANCE, true).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(random, "random");

      return new TestOperation.Data(
        random
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.Data value) throws IOException {
      writer.name("random");
      new ObjectAdapter<TestOperation.Random>(Random.INSTANCE, true).toJson(writer, customScalarAdapters, value.random);
    }
  }

  public enum Random implements Adapter<TestOperation.Random> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestOperation.Random fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestOperation.OnBeing onBeing = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human","Wookie")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), null)) {
        reader.rewind();
        onBeing = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnBeing.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      TestOperation.OnWookie2 onWookie = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Wookie")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), null)) {
        reader.rewind();
        onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie2.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestOperation.Random(
        __typename,
        onBeing,
        onWookie
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.Random value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onBeing != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnBeing.INSTANCE.toJson(writer, customScalarAdapters, value.onBeing);
      }

      if (value.onWookie != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie2.INSTANCE.toJson(writer, customScalarAdapters, value.onWookie);
      }
    }
  }

  public enum OnBeing implements Adapter<TestOperation.OnBeing> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name", "friends");

    @Override
    public TestOperation.OnBeing fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;
      String name = null;
      List<TestOperation.Friend> friends = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: friends = new ListAdapter<>(new ObjectAdapter<TestOperation.Friend>(Friend.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestOperation.OnHuman onHuman = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Human")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), null)) {
        reader.rewind();
        onHuman = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnHuman.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(name, "name");
      Assertions.checkFieldNotMissing(friends, "friends");

      return new TestOperation.OnBeing(
        __typename,
        name,
        friends,
        onHuman
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.OnBeing value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("friends");
      new ListAdapter<>(new ObjectAdapter<TestOperation.Friend>(Friend.INSTANCE, true)).toJson(writer, customScalarAdapters, value.friends);

      if (value.onHuman != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnHuman.INSTANCE.toJson(writer, customScalarAdapters, value.onHuman);
      }
    }
  }

  public enum Friend implements Adapter<TestOperation.Friend> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "name");

    @Override
    public TestOperation.Friend fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestOperation.OnWookie onWookie = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Wookie")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), null)) {
        reader.rewind();
        onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new TestOperation.Friend(
        __typename,
        name,
        onWookie
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.Friend value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);

      if (value.onWookie != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie.INSTANCE.toJson(writer, customScalarAdapters, value.onWookie);
      }
    }
  }

  public enum OnWookie implements Adapter<TestOperation.OnWookie> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("lifeExpectancy");

    @Override
    public TestOperation.OnWookie fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Double lifeExpectancy = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: lifeExpectancy = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestOperation.OnWookie(
        lifeExpectancy
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.OnWookie value) throws IOException {
      writer.name("lifeExpectancy");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy);
    }
  }

  public enum OnHuman implements Adapter<TestOperation.OnHuman> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("profilePictureUrl", "friends");

    @Override
    public TestOperation.OnHuman fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String profilePictureUrl = null;
      List<TestOperation.Friend1> friends = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: profilePictureUrl = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: friends = new ListAdapter<>(new ObjectAdapter<TestOperation.Friend1>(Friend1.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(friends, "friends");

      return new TestOperation.OnHuman(
        profilePictureUrl,
        friends
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.OnHuman value) throws IOException {
      writer.name("profilePictureUrl");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.profilePictureUrl);

      writer.name("friends");
      new ListAdapter<>(new ObjectAdapter<TestOperation.Friend1>(Friend1.INSTANCE, true)).toJson(writer, customScalarAdapters, value.friends);
    }
  }

  public enum Friend1 implements Adapter<TestOperation.Friend1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "isFamous");

    @Override
    public TestOperation.Friend1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;
      Boolean isFamous = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: isFamous = Adapters.NullableBooleanAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      TestOperation.OnWookie1 onWookie = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Wookie")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), null)) {
        reader.rewind();
        onWookie = com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestOperation.Friend1(
        __typename,
        isFamous,
        onWookie
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.Friend1 value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("isFamous");
      Adapters.NullableBooleanAdapter.toJson(writer, customScalarAdapters, value.isFamous);

      if (value.onWookie != null) {
        com.example.inline_fragment_intersection.adapter.TestOperation_ResponseAdapter.OnWookie1.INSTANCE.toJson(writer, customScalarAdapters, value.onWookie);
      }
    }
  }

  public enum OnWookie1 implements Adapter<TestOperation.OnWookie1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("race");

    @Override
    public TestOperation.OnWookie1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Race race = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: race = Race_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(race, "race");

      return new TestOperation.OnWookie1(
        race
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.OnWookie1 value) throws IOException {
      writer.name("race");
      Race_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.race);
    }
  }

  public enum OnWookie2 implements Adapter<TestOperation.OnWookie2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("race", "friends");

    @Override
    public TestOperation.OnWookie2 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Race race = null;
      List<TestOperation.Friend2> friends = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: race = Race_ResponseAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: friends = new ListAdapter<>(new ObjectAdapter<TestOperation.Friend2>(Friend2.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(race, "race");
      Assertions.checkFieldNotMissing(friends, "friends");

      return new TestOperation.OnWookie2(
        race,
        friends
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.OnWookie2 value) throws IOException {
      writer.name("race");
      Race_ResponseAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.race);

      writer.name("friends");
      new ListAdapter<>(new ObjectAdapter<TestOperation.Friend2>(Friend2.INSTANCE, false)).toJson(writer, customScalarAdapters, value.friends);
    }
  }

  public enum Friend2 implements Adapter<TestOperation.Friend2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("lifeExpectancy");

    @Override
    public TestOperation.Friend2 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Double lifeExpectancy = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: lifeExpectancy = Adapters.NullableDoubleAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestOperation.Friend2(
        lifeExpectancy
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestOperation.Friend2 value) throws IOException {
      writer.name("lifeExpectancy");
      Adapters.NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.lifeExpectancy);
    }
  }
}
