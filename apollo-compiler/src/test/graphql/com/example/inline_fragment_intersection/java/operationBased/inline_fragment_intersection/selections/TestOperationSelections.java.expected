//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.selections;

import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompiledFragment;
import com.apollographql.apollo3.api.CompiledGraphQL;
import com.apollographql.apollo3.api.CompiledListType;
import com.apollographql.apollo3.api.CompiledNotNullType;
import com.apollographql.apollo3.api.CompiledSelection;
import com.example.inline_fragment_intersection.type.Anything;
import com.example.inline_fragment_intersection.type.Being;
import com.example.inline_fragment_intersection.type.Race;
import java.util.Arrays;
import java.util.List;

public class TestOperationSelections {
  private static List<CompiledSelection> onWookie = Arrays.asList(
    CompiledField.builder("lifeExpectancy", CompiledGraphQL.CompiledFloatType).build()
  );

  private static List<CompiledSelection> friends = Arrays.asList(
    CompiledField.builder("__typename", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledField.builder("name", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledFragment.builder(Arrays.asList("Wookie")).selections(onWookie).build()
  );

  private static List<CompiledSelection> onWookie1 = Arrays.asList(
    CompiledField.builder("race", new CompiledNotNullType(Race.type)).build()
  );

  private static List<CompiledSelection> friends1 = Arrays.asList(
    CompiledField.builder("__typename", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledField.builder("isFamous", CompiledGraphQL.CompiledBooleanType).build(),
    CompiledFragment.builder(Arrays.asList("Wookie")).selections(onWookie1).build()
  );

  private static List<CompiledSelection> onHuman = Arrays.asList(
    CompiledField.builder("profilePictureUrl", CompiledGraphQL.CompiledStringType).build(),
    CompiledField.builder("friends", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(Being.type)))).selections(friends1).build()
  );

  private static List<CompiledSelection> onBeing = Arrays.asList(
    CompiledField.builder("__typename", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledField.builder("name", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledField.builder("friends", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(Being.type)))).selections(friends).build(),
    CompiledFragment.builder(Arrays.asList("Human")).selections(onHuman).build()
  );

  private static List<CompiledSelection> friends2 = Arrays.asList(
    CompiledField.builder("lifeExpectancy", CompiledGraphQL.CompiledFloatType).build()
  );

  private static List<CompiledSelection> onWookie2 = Arrays.asList(
    CompiledField.builder("race", new CompiledNotNullType(Race.type)).build(),
    CompiledField.builder("friends", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(Being.type)))).selections(friends2).build()
  );

  private static List<CompiledSelection> onWookie3 = Arrays.asList(
    CompiledField.builder("lifeExpectancy", CompiledGraphQL.CompiledFloatType).build()
  );

  private static List<CompiledSelection> friends3 = Arrays.asList(
    CompiledField.builder("__typename", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledFragment.builder(Arrays.asList("Wookie")).selections(onWookie3).build()
  );

  private static List<CompiledSelection> onBeing1 = Arrays.asList(
    CompiledField.builder("friends", new CompiledNotNullType(new CompiledListType(new CompiledNotNullType(Being.type)))).selections(friends3).build()
  );

  private static List<CompiledSelection> random = Arrays.asList(
    CompiledField.builder("__typename", new CompiledNotNullType(CompiledGraphQL.CompiledStringType)).build(),
    CompiledFragment.builder(Arrays.asList("Human", "Wookie")).selections(onBeing).build(),
    CompiledFragment.builder(Arrays.asList("Wookie")).selections(onWookie2).build(),
    CompiledFragment.builder(Arrays.asList("Human", "Wookie")).selections(onBeing1).build()
  );

  public static List<CompiledSelection> root = Arrays.asList(
    CompiledField.builder("random", new CompiledNotNullType(Anything.type)).selections(random).build()
  );
}
