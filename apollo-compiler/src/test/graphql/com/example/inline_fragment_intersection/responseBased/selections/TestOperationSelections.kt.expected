//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_intersection.selections

import com.apollographql.apollo3.api.CompiledBooleanType
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFloatType
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.inline_fragment_intersection.type.Types
import com.example.inline_fragment_intersection.type.Types.Anything
import com.example.inline_fragment_intersection.type.Types.Being
import com.example.inline_fragment_intersection.type.Types.Race
import kotlin.collections.List

public object TestOperationSelections {
  private val onWookie: List<CompiledSelection> = listOf(
        CompiledField(
          name = "lifeExpectancy",
          type = CompiledFloatType
        )
      )

  private val friends: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Wookie"),
          selections = onWookie
        )
      )

  private val onWookie1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "race",
          type = Race.notNull()
        )
      )

  private val friends1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "isFamous",
          type = CompiledBooleanType
        ),
        CompiledFragment(
          possibleTypes = listOf("Wookie"),
          selections = onWookie1
        )
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField(
          name = "profilePictureUrl",
          type = CompiledStringType
        ),
        CompiledField(
          name = "friends",
          type = Being.notNull().list().notNull(),
          selections = friends1
        )
      )

  private val onBeing: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "friends",
          type = Being.notNull().list().notNull(),
          selections = friends
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          selections = onHuman
        )
      )

  private val friends2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "lifeExpectancy",
          type = CompiledFloatType
        )
      )

  private val onWookie2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "race",
          type = Race.notNull()
        ),
        CompiledField(
          name = "friends",
          type = Being.notNull().list().notNull(),
          selections = friends2
        )
      )

  private val onWookie3: List<CompiledSelection> = listOf(
        CompiledField(
          name = "lifeExpectancy",
          type = CompiledFloatType
        )
      )

  private val friends3: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Wookie"),
          selections = onWookie3
        )
      )

  private val onBeing1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "friends",
          type = Being.notNull().list().notNull(),
          selections = friends3
        )
      )

  private val random: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Human", "Wookie"),
          selections = onBeing
        ),
        CompiledFragment(
          possibleTypes = listOf("Wookie"),
          selections = onWookie2
        ),
        CompiledFragment(
          possibleTypes = listOf("Human", "Wookie"),
          selections = onBeing1
        )
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "random",
          type = Anything.notNull(),
          selections = random
        )
      )
}
