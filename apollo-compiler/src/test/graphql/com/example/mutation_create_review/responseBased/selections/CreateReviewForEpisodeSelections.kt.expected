//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.mutation_create_review.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledIntType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.mutation_create_review.type.Types.Character
import com.example.mutation_create_review.type.Types.Date
import com.example.mutation_create_review.type.Types.Episode
import com.example.mutation_create_review.type.Types.Review
import kotlin.collections.List

internal object CreateReviewForEpisodeSelections {
  private val listOfListOfObject: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        )
      )

  private val createReview: List<CompiledSelection> = listOf(
        CompiledField(
          name = "stars",
          type = CompiledIntType.notNull()
        ),
        CompiledField(
          name = "commentary",
          type = CompiledStringType
        ),
        CompiledField(
          name = "listOfListOfString",
          type = CompiledStringType.notNull().list().notNull().list()
        ),
        CompiledField(
          name = "listOfListOfEnum",
          type = Episode.notNull().list().notNull().list()
        ),
        CompiledField(
          name = "listOfListOfCustom",
          type = Date.notNull().list().notNull().list()
        ),
        CompiledField(
          name = "listOfListOfObject",
          type = Character.notNull().list().notNull().list(),
          selections = listOfListOfObject
        )
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "createReview",
          type = Review,
          arguments = listOf(
            CompiledArgument("episode", CompiledVariable("ep")),
            CompiledArgument("review", CompiledVariable("review"))
          ),
          selections = createReview
        )
      )
}
