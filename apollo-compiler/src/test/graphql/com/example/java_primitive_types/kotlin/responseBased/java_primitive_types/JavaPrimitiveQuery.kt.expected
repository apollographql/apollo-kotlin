//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types

import com.apollographql.apollo3.annotations.ApolloAdaptableWith
import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Optional
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_ResponseAdapter
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_VariablesAdapter
import com.example.java_primitive_types.selections.JavaPrimitiveQuerySelections
import com.example.java_primitive_types.type.MyInput
import kotlin.Int
import kotlin.String
import kotlin.Unit

public data class JavaPrimitiveQuery(
  public val input: Optional<MyInput?> = Optional.Absent,
  public val nullableInt: Optional<Int?> = Optional.Absent,
  public val nonNullableInt: Int,
  public val nonNullableIntWithDefault: Optional<Int> = Optional.Absent,
) : Query<JavaPrimitiveQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    JavaPrimitiveQuery_VariablesAdapter.toJson(writer, customScalarAdapters, this)
  }

  public override fun adapter(): Adapter<Data> = JavaPrimitiveQuery_ResponseAdapter.Data.obj()

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.java_primitive_types.type.Query.type
  )
  .selections(selections = JavaPrimitiveQuerySelections.__root)
  .build()

  @ApolloAdaptableWith(JavaPrimitiveQuery_ResponseAdapter.Data::class)
  public data class Data(
    public val nullableInt: Int?,
    public val nonNullableInt: Int,
    public val myType: MyType,
  ) : Query.Data {
    public data class MyType(
      public val nullableInt: Int?,
      public val nonNullableInt: Int,
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "ce4569f64d1c79cce8520336c6d0bc9a0b1019fcc526b3d22e95b0e8aeba77d4"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query JavaPrimitiveQuery($input: MyInput, $nullableInt: Int, $nonNullableInt: Int!,
     * $nonNullableIntWithDefault: Int! = 4 ) {
     *   nullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt)
     *   nonNullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt)
     *   myType {
     *     nullableInt
     *     nonNullableInt
     *   }
     * }
     */
    public val OPERATION_DOCUMENT: String
      get() =
          "query JavaPrimitiveQuery(${'$'}input: MyInput, ${'$'}nullableInt: Int, ${'$'}nonNullableInt: Int!, ${'$'}nonNullableIntWithDefault: Int! = 4 ) { nullableInt(input: ${'$'}input, nullableInt: ${'$'}nullableInt, nonNullableInt: ${'$'}nonNullableInt) nonNullableInt(input: ${'$'}input, nullableInt: ${'$'}nullableInt, nonNullableInt: ${'$'}nonNullableInt) myType { nullableInt nonNullableInt } }"

    public const val OPERATION_NAME: String = "JavaPrimitiveQuery"
  }
}
