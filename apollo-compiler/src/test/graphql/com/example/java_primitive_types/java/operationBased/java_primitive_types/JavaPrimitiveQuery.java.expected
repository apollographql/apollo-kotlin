//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_ResponseAdapter;
import com.example.java_primitive_types.adapter.JavaPrimitiveQuery_VariablesAdapter;
import com.example.java_primitive_types.selections.JavaPrimitiveQuerySelections;
import com.example.java_primitive_types.type.MyInput;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import org.jetbrains.annotations.Nullable;

public class JavaPrimitiveQuery implements Query<JavaPrimitiveQuery.Data> {
  public static final String OPERATION_ID = "ce4569f64d1c79cce8520336c6d0bc9a0b1019fcc526b3d22e95b0e8aeba77d4";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query JavaPrimitiveQuery($input: MyInput, $nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 ) {
   *   nullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt)
   *   nonNullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt)
   *   myType {
   *     nullableInt
   *     nonNullableInt
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query JavaPrimitiveQuery($input: MyInput, $nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 ) { nullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt) nonNullableInt(input: $input, nullableInt: $nullableInt, nonNullableInt: $nonNullableInt) myType { nullableInt nonNullableInt } }";

  public static final String OPERATION_NAME = "JavaPrimitiveQuery";

  public final Optional<MyInput> input;

  public final Optional<Integer> nullableInt;

  public final int nonNullableInt;

  public final Optional<Integer> nonNullableIntWithDefault;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public JavaPrimitiveQuery(Optional<MyInput> input, Optional<Integer> nullableInt,
      int nonNullableInt, Optional<Integer> nonNullableIntWithDefault) {
    this.input = input;
    this.nullableInt = nullableInt;
    this.nonNullableInt = nonNullableInt;
    this.nonNullableIntWithDefault = nonNullableIntWithDefault;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof JavaPrimitiveQuery) {
      JavaPrimitiveQuery that = (JavaPrimitiveQuery) o;
      return ((this.input == null) ? (that.input == null) : this.input.equals(that.input))
       &&((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
       &&this.nonNullableInt == that.nonNullableInt
       &&((this.nonNullableIntWithDefault == null) ? (that.nonNullableIntWithDefault == null) : this.nonNullableIntWithDefault.equals(that.nonNullableIntWithDefault));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= (input == null) ? 0 : input.hashCode();
      h *= 1000003;
      h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
      h *= 1000003;
      h ^= nonNullableInt;
      h *= 1000003;
      h ^= (nonNullableIntWithDefault == null) ? 0 : nonNullableIntWithDefault.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "JavaPrimitiveQuery{"
        + "input=" + input + ", "
        + "nullableInt=" + nullableInt + ", "
        + "nonNullableInt=" + nonNullableInt + ", "
        + "nonNullableIntWithDefault=" + nonNullableIntWithDefault
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters)
      throws IOException {
    JavaPrimitiveQuery_VariablesAdapter.INSTANCE.toJson(writer, customScalarAdapters, this);
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(JavaPrimitiveQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.java_primitive_types.type.Query.type
    )
    .selections(JavaPrimitiveQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Optional<MyInput> input;

    private Optional<Integer> nullableInt;

    private int nonNullableInt;

    private Optional<Integer> nonNullableIntWithDefault;

    Builder() {
    }

    public Builder input(@Nullable MyInput input) {
      this.input = Optional.presentIfNotNull(input);
      return this;
    }

    public Builder nullableInt(@Nullable Integer nullableInt) {
      this.nullableInt = Optional.presentIfNotNull(nullableInt);
      return this;
    }

    public Builder nonNullableInt(int nonNullableInt) {
      this.nonNullableInt = nonNullableInt;
      return this;
    }

    public Builder nonNullableIntWithDefault(@Nullable Integer nonNullableIntWithDefault) {
      this.nonNullableIntWithDefault = Optional.presentIfNotNull(nonNullableIntWithDefault);
      return this;
    }

    public JavaPrimitiveQuery build() {
      return new JavaPrimitiveQuery(input, nullableInt, nonNullableInt, nonNullableIntWithDefault);
    }
  }

  public static class Data implements Query.Data {
    public Integer nullableInt;

    public int nonNullableInt;

    public MyType myType;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(Integer nullableInt, int nonNullableInt, MyType myType) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
      this.myType = myType;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt
         &&((this.myType == null) ? (that.myType == null) : this.myType.equals(that.myType));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        h *= 1000003;
        h ^= nonNullableInt;
        h *= 1000003;
        h ^= (myType == null) ? 0 : myType.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt + ", "
          + "myType=" + myType
          + "}";
      }
      return $toString;
    }
  }

  public static class MyType {
    public Integer nullableInt;

    public int nonNullableInt;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public MyType(Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof MyType) {
        MyType that = (MyType) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt;
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        h *= 1000003;
        h ^= nonNullableInt;
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "MyType{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt
          + "}";
      }
      return $toString;
    }
  }
}
