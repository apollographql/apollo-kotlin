//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_primitive_types.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_primitive_types.JavaPrimitiveQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class JavaPrimitiveQuery_ResponseAdapter {
  public enum Data implements Adapter<JavaPrimitiveQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt", "myType");

    @Override
    public JavaPrimitiveQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;
      JavaPrimitiveQuery.MyType _myType = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: _myType = new ObjectAdapter<JavaPrimitiveQuery.MyType>(MyType.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");
      Assertions.checkFieldNotMissing(_myType, "myType");

      return new JavaPrimitiveQuery.Data(
        _nullableInt,
        _nonNullableInt,
        _myType
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        JavaPrimitiveQuery.Data value) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.nonNullableInt);

      writer.name("myType");
      new ObjectAdapter<JavaPrimitiveQuery.MyType>(MyType.INSTANCE, false).toJson(writer, customScalarAdapters, value.myType);
    }
  }

  public enum MyType implements Adapter<JavaPrimitiveQuery.MyType> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nullableInt", "nonNullableInt");

    @Override
    public JavaPrimitiveQuery.MyType fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer _nullableInt = null;
      int _nonNullableInt = 0;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _nullableInt = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _nonNullableInt = Adapters.IntAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_nonNullableInt, "nonNullableInt");

      return new JavaPrimitiveQuery.MyType(
        _nullableInt,
        _nonNullableInt
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        JavaPrimitiveQuery.MyType value) throws IOException {
      writer.name("nullableInt");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.nullableInt);

      writer.name("nonNullableInt");
      Adapters.IntAdapter.toJson(writer, customScalarAdapters, value.nonNullableInt);
    }
  }
}
