//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.operationbased2_ex7.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.json.readTypename
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.operationbased2_ex7.TestOperation
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("animal")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _animal: TestOperation.Data.Animal? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _animal = Animal.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        animal = _animal
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("animal")
      Animal.obj().nullable().toJson(writer, customScalarAdapters, value.animal)
    }

    private object Animal : Adapter<TestOperation.Data.Animal> {
      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.Animal {
        val __typename = reader.readTypename()
        return when(__typename) {
          "Cat",
          -> PetWarmBloodedAnimal.fromJson(reader, customScalarAdapters, __typename)
          "Lion",
          "Panther",
          -> OtherWarmBloodedAnimal.fromJson(reader, customScalarAdapters, __typename)
          "Turtle",
          -> OtherPetAnimal.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherAnimal.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Animal,
      ): Unit {
        when(value) {
          is TestOperation.Data.PetWarmBloodedAnimal -> PetWarmBloodedAnimal.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.OtherWarmBloodedAnimal -> OtherWarmBloodedAnimal.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.OtherPetAnimal -> OtherPetAnimal.toJson(writer,
              customScalarAdapters, value)
          is TestOperation.Data.OtherAnimal -> OtherAnimal.toJson(writer, customScalarAdapters,
              value)
        }
      }
    }

    public object PetWarmBloodedAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature",
          "name")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.PetWarmBloodedAnimal {
        var __typename: String? = typename
        var _species: String? = null
        var _temperature: Int? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
            3 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.PetWarmBloodedAnimal(
          __typename = __typename!!,
          species = _species!!,
          temperature = _temperature!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.PetWarmBloodedAnimal,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)

        writer.name("temperature")
        IntAdapter.toJson(writer, customScalarAdapters, value.temperature)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }

    public object OtherAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.OtherAnimal {
        var __typename: String? = typename
        var _species: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.OtherAnimal(
          __typename = __typename!!,
          species = _species!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.OtherAnimal,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)
      }
    }

    public object OtherWarmBloodedAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "temperature")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.OtherWarmBloodedAnimal {
        var __typename: String? = typename
        var _species: String? = null
        var _temperature: Int? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _temperature = IntAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.OtherWarmBloodedAnimal(
          __typename = __typename!!,
          species = _species!!,
          temperature = _temperature!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.OtherWarmBloodedAnimal,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)

        writer.name("temperature")
        IntAdapter.toJson(writer, customScalarAdapters, value.temperature)
      }
    }

    public object OtherPetAnimal {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "species", "name")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String,
      ): TestOperation.Data.OtherPetAnimal {
        var __typename: String? = typename
        var _species: String? = null
        var _name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _species = StringAdapter.fromJson(reader, customScalarAdapters)
            2 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestOperation.Data.OtherPetAnimal(
          __typename = __typename!!,
          species = _species!!,
          name = _name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.OtherPetAnimal,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("species")
        StringAdapter.toJson(writer, customScalarAdapters, value.species)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }
  }
}
