//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.test_inline.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.test_inline.type.Collection
import com.example.test_inline.type.Item
import kotlin.collections.List

public object GetPageSelections {
  private val items: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "title",
          type = CompiledStringType.notNull()
        ).build()
      )

  private val onParticularItem: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "image",
          type = CompiledStringType.notNull()
        ).build()
      )

  private val items1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "ParticularItem",
          possibleTypes = listOf("ParticularItem")
        ).selections(onParticularItem)
        .build()
      )

  private val onParticularCollection: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "items",
          type = Item.type.notNull().list().notNull()
        ).selections(items1)
        .build()
      )

  private val collection: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.Builder(
          name = "items",
          type = Item.type.notNull().list().notNull()
        ).selections(items)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "ParticularCollection",
          possibleTypes = listOf("ParticularCollection")
        ).selections(onParticularCollection)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "collection",
          type = Collection.type.notNull()
        ).selections(collection)
        .build()
      )
}
