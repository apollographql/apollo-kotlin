//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFloatType
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.nested_conditional_inline.type.Types
import com.example.nested_conditional_inline.type.Types.Character
import kotlin.collections.List

public object TestQuerySelections {
  private val onHuman1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "height",
          type = CompiledFloatType,
          arguments = listOf(
            CompiledArgument("unit", "FOOT")
          )
        )
      )

  private val friends: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          selections = onHuman1
        )
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField(
          name = "friends",
          type = Character.list(),
          selections = friends
        )
      )

  private val onHuman2: List<CompiledSelection> = listOf(
        CompiledField(
          name = "height",
          type = CompiledFloatType,
          arguments = listOf(
            CompiledArgument("unit", "METER")
          )
        )
      )

  private val friends1: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          selections = onHuman2
        )
      )

  private val onDroid: List<CompiledSelection> = listOf(
        CompiledField(
          name = "friends",
          type = Character.list(),
          selections = friends1
        )
      )

  private val hero: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          selections = onHuman
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid"),
          selections = onDroid
        )
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "hero",
          type = Character,
          arguments = listOf(
            CompiledArgument("episode", CompiledVariable("episode"))
          ),
          selections = hero
        )
      )
}
