//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFloatType
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.CompiledVariable
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.example.nested_conditional_inline.type.Character
import kotlin.collections.List

public object TestQuerySelections {
  private val onHuman1: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "height",
          type = CompiledFloatType
        ).arguments(listOf(
          CompiledArgument("unit", "FOOT")
        ))
        .build()
      )

  private val friends: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.builder(
          name = "name",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = listOf("Human")
        ).selections(onHuman1)
        .build()
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "friends",
          type = Character.type.list()
        ).selections(friends)
        .build()
      )

  private val onHuman2: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "height",
          type = CompiledFloatType
        ).arguments(listOf(
          CompiledArgument("unit", "METER")
        ))
        .build()
      )

  private val friends1: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.builder(
          name = "name",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = listOf("Human")
        ).selections(onHuman2)
        .build()
      )

  private val onDroid: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "friends",
          type = Character.type.list()
        ).selections(friends1)
        .build()
      )

  private val hero: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.builder(
          name = "name",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = listOf("Human")
        ).selections(onHuman)
        .build(),
        CompiledFragment.builder(
          possibleTypes = listOf("Droid")
        ).selections(onDroid)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "hero",
          type = Character.type
        ).arguments(listOf(
          CompiledArgument("episode", CompiledVariable("episode"))
        ))
        .selections(hero)
        .build()
      )
}
