//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.nested_conditional_inline.selections;

import com.apollographql.apollo3.api.CompiledArgument;
import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CompiledFragment;
import com.apollographql.apollo3.api.CompiledListType;
import com.apollographql.apollo3.api.CompiledNotNullType;
import com.apollographql.apollo3.api.CompiledSelection;
import com.apollographql.apollo3.api.CompiledVariable;
import com.example.nested_conditional_inline.type.Character;
import com.example.nested_conditional_inline.type.GraphQLFloat;
import com.example.nested_conditional_inline.type.GraphQLString;
import java.util.Arrays;
import java.util.List;

public class TestQuerySelections {
  private static List<CompiledSelection> onHuman1 = Arrays.asList(
    new CompiledField.Builder("height", GraphQLFloat.type).arguments(Arrays.asList(new CompiledArgument("unit", "FOOT", false))).build()
  );

  private static List<CompiledSelection> friends = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Human", Arrays.asList("Human")).selections(onHuman1).build()
  );

  private static List<CompiledSelection> onHuman = Arrays.asList(
    new CompiledField.Builder("friends", new CompiledListType(Character.type)).selections(friends).build()
  );

  private static List<CompiledSelection> onHuman2 = Arrays.asList(
    new CompiledField.Builder("height", GraphQLFloat.type).arguments(Arrays.asList(new CompiledArgument("unit", "METER", false))).build()
  );

  private static List<CompiledSelection> friends1 = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Human", Arrays.asList("Human")).selections(onHuman2).build()
  );

  private static List<CompiledSelection> onDroid = Arrays.asList(
    new CompiledField.Builder("friends", new CompiledListType(Character.type)).selections(friends1).build()
  );

  private static List<CompiledSelection> hero = Arrays.asList(
    new CompiledField.Builder("__typename", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledField.Builder("name", new CompiledNotNullType(GraphQLString.type)).build(),
    new CompiledFragment.Builder("Human", Arrays.asList("Human")).selections(onHuman).build(),
    new CompiledFragment.Builder("Droid", Arrays.asList("Droid")).selections(onDroid).build()
  );

  public static List<CompiledSelection> root = Arrays.asList(
    new CompiledField.Builder("hero", Character.type).arguments(Arrays.asList(new CompiledArgument("episode", new CompiledVariable("episode"), false))).selections(hero).build()
  );
}
