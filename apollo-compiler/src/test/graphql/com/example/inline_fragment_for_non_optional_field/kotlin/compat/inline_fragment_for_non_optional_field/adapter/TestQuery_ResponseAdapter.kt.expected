//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_for_non_optional_field.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_for_non_optional_field.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("nonOptionalHero")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _nonOptionalHero: TestQuery.NonOptionalHero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _nonOptionalHero = NonOptionalHero.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        nonOptionalHero = _nonOptionalHero!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("nonOptionalHero")
      NonOptionalHero.obj(true).toJson(writer, customScalarAdapters, value.nonOptionalHero)
    }
  }

  public object NonOptionalHero : Adapter<TestQuery.NonOptionalHero> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.NonOptionalHero {
      var __typename: String? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      var _asHuman: TestQuery.AsHuman? = null
      if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
        reader.rewind()
        _asHuman = com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.NonOptionalHero(
        __typename = __typename,
        name = _name!!,
        asHuman = _asHuman
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.NonOptionalHero,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      if (value.asHuman != null) {
        com.example.inline_fragment_for_non_optional_field.adapter.TestQuery_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }
    }
  }

  public object AsHuman : Adapter<TestQuery.AsHuman> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name", "height")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsHuman {
      var __typename: String? = null
      var _name: String? = null
      var _height: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsHuman(
        __typename = __typename!!,
        name = _name!!,
        height = _height
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsHuman,
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("height")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
    }
  }
}
