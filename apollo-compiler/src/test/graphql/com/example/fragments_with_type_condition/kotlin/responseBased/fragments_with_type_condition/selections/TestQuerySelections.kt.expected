//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_type_condition.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.notNull
import com.example.fragments_with_type_condition.fragment.selections.DroidDetailsSelections
import com.example.fragments_with_type_condition.fragment.selections.HumanDetailsSelections
import com.example.fragments_with_type_condition.type.Character
import kotlin.collections.List

public object TestQuerySelections {
  private val r2: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = (listOf("Human"))
        ).selections(HumanDetailsSelections.root)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Droid",
          possibleTypes = (listOf("Droid"))
        ).selections(DroidDetailsSelections.root)
        .build()
      )

  private val luke: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = (listOf("Human"))
        ).selections(HumanDetailsSelections.root)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Droid",
          possibleTypes = (listOf("Droid"))
        ).selections(DroidDetailsSelections.root)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "hero",
          type = Character.type
        ).alias("r2")
        .selections(r2)
        .build(),
        CompiledField.Builder(
          name = "hero",
          type = Character.type
        ).alias("luke")
        .selections(luke)
        .build()
      )
}
