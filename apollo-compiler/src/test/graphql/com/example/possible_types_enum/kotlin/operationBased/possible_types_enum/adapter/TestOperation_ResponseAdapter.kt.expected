//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.possible_types_enum.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.possible_types_enum.TestOperation
import com.example.possible_types_enum.type.LifeStatus
import com.example.possible_types_enum.type.adapter.LifeStatus_ResponseAdapter
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestOperation_ResponseAdapter {
  public object Data : Adapter<TestOperation.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("something")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestOperation.Data {
      var _something: TestOperation.Data.Something? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _something = Something.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestOperation.Data(
        something = _something
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestOperation.Data,
    ): Unit {
      writer.name("something")
      Something.obj(true).nullable().toJson(writer, customScalarAdapters, value.something)
    }

    private object Something : Adapter<TestOperation.Data.Something> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "id")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestOperation.Data.Something {
        var __typename: String? = null
        var _id: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        var _onHuman: TestOperation.Data.Something.OnHuman? = null
        if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
          reader.rewind()
          _onHuman = com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.fromJson(reader,
              customScalarAdapters)
        }

        return TestOperation.Data.Something(
          __typename = __typename,
          id = _id!!,
          onHuman = _onHuman
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestOperation.Data.Something,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("id")
        StringAdapter.toJson(writer, customScalarAdapters, value.id)

        if (value.onHuman != null) {
          com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.toJson(writer,
              customScalarAdapters, value.onHuman)
        }
      }

      private object OnHuman : Adapter<TestOperation.Data.Something.OnHuman> {
        public val RESPONSE_NAMES: List<String> = listOf("name", "life_status", "friend")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestOperation.Data.Something.OnHuman {
          var _name: String? = null
          var _life_status: LifeStatus? = null
          var _friend: TestOperation.Data.Something.OnHuman.Friend? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> _life_status = LifeStatus_ResponseAdapter.fromJson(reader, customScalarAdapters)
              2 -> _friend = Friend.obj(true).fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestOperation.Data.Something.OnHuman(
            name = _name!!,
            life_status = _life_status!!,
            friend = _friend!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestOperation.Data.Something.OnHuman,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          writer.name("life_status")
          LifeStatus_ResponseAdapter.toJson(writer, customScalarAdapters, value.life_status)

          writer.name("friend")
          Friend.obj(true).toJson(writer, customScalarAdapters, value.friend)
        }

        private object Friend : Adapter<TestOperation.Data.Something.OnHuman.Friend> {
          public val RESPONSE_NAMES: List<String> = listOf("__typename")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestOperation.Data.Something.OnHuman.Friend {
            var __typename: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            check(__typename != null) {
              "__typename was not found"
            }

            var _onHuman: TestOperation.Data.Something.OnHuman.Friend.OnHuman? = null
            if (possibleTypes("Human").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onHuman = com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.Friend.OnHuman.fromJson(reader,
                  customScalarAdapters)
            }

            var _onHuman2: TestOperation.Data.Something.OnHuman.Friend.OnHuman2? = null
            if (possibleTypes("Human2").evaluate(customScalarAdapters.adapterContext.variables(), __typename, customScalarAdapters.adapterContext, null)) {
              reader.rewind()
              _onHuman2 = com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.Friend.OnHuman2.fromJson(reader,
                  customScalarAdapters)
            }

            return TestOperation.Data.Something.OnHuman.Friend(
              __typename = __typename,
              onHuman = _onHuman,
              onHuman2 = _onHuman2
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestOperation.Data.Something.OnHuman.Friend,
          ): Unit {
            writer.name("__typename")
            StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

            if (value.onHuman != null) {
              com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.Friend.OnHuman.toJson(writer,
                  customScalarAdapters, value.onHuman)
            }

            if (value.onHuman2 != null) {
              com.example.possible_types_enum.adapter.TestOperation_ResponseAdapter.Data.Something.OnHuman.Friend.OnHuman2.toJson(writer,
                  customScalarAdapters, value.onHuman2)
            }
          }

          private object OnHuman : Adapter<TestOperation.Data.Something.OnHuman.Friend.OnHuman> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Something.OnHuman.Friend.OnHuman {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestOperation.Data.Something.OnHuman.Friend.OnHuman(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestOperation.Data.Something.OnHuman.Friend.OnHuman,
            ): Unit {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }

          private object OnHuman2 : Adapter<TestOperation.Data.Something.OnHuman.Friend.OnHuman2> {
            public val RESPONSE_NAMES: List<String> = listOf("name")

            public override fun fromJson(reader: JsonReader,
                customScalarAdapters: CustomScalarAdapters):
                TestOperation.Data.Something.OnHuman.Friend.OnHuman2 {
              var _name: String? = null

              while(true) {
                when (reader.selectName(RESPONSE_NAMES)) {
                  0 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
                  else -> break
                }
              }

              return TestOperation.Data.Something.OnHuman.Friend.OnHuman2(
                name = _name!!
              )
            }

            public override fun toJson(
              writer: JsonWriter,
              customScalarAdapters: CustomScalarAdapters,
              `value`: TestOperation.Data.Something.OnHuman.Friend.OnHuman2,
            ): Unit {
              writer.name("name")
              StringAdapter.toJson(writer, customScalarAdapters, value.name)
            }
          }
        }
      }
    }
  }
}
