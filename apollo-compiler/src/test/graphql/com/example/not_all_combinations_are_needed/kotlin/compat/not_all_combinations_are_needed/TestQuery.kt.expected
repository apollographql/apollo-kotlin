//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.not_all_combinations_are_needed

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.not_all_combinations_are_needed.adapter.TestQuery_ResponseAdapter
import com.example.not_all_combinations_are_needed.fragment.BFragment
import com.example.not_all_combinations_are_needed.selections.TestQuerySelections
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Unit

public class TestQuery() : Query<TestQuery.Data> {
  public override fun equals(other: Any?): Boolean = other != null && other::class == this::class

  public override fun hashCode(): Int = this::class.hashCode()

  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  public override fun rootField(): CompiledField = CompiledField.Builder(
    name = "data",
    type = com.example.not_all_combinations_are_needed.type.Query.type
  )
  .selections(selections = TestQuerySelections.root)
  .build()

  public data class Data(
    public val root: Root?
  ) : Query.Data

  public data class Root(
    public val __typename: String,
    /**
     * Synthetic field for inline fragment on A
     */
    public val asA: AsA?
  )

  public data class AsA(
    public val __typename: String,
    public val fieldA1: String?,
    /**
     * Synthetic field for inline fragment on B
     */
    public val asB: AsB?
  )

  public data class AsB(
    public val __typename: String,
    public val fieldA1: String?,
    /**
     * Synthetic field for grouping fragments
     */
    public val fragments: Fragments
  ) {
    public data class Fragments(
      /**
       * Synthetic field for 'bFragment'
       */
      public val bFragment: BFragment
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "efeec94b5f644270b60f0665fd2ea25275dc5559a6a8cad52670e096417a3017"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   root {
     *     __typename
     *     ... on A {
     *       fieldA1
     *       ... on B {
     *         ...bFragment
     *       }
     *     }
     *   }
     * }
     *
     * fragment bFragment on B {
     *   __typename
     *   fieldB1
     * }
     */
    public const val OPERATION_DOCUMENT: String =
        "query TestQuery { root { __typename ... on A { fieldA1 ... on B { ...bFragment } } } }  fragment bFragment on B { __typename fieldB1 }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
