//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.arguments_hardcoded

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.Query
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.arguments_hardcoded.adapter.TestQuery_ResponseAdapter
import com.example.arguments_hardcoded.selections.TestQuerySelections
import kotlin.Int
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public class TestQuery() : Query<TestQuery.Data> {
  public override fun id(): String = OPERATION_ID

  public override fun document(): String = OPERATION_DOCUMENT

  public override fun name(): String = OPERATION_NAME

  public override fun serializeVariables(writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters): Unit {
    // This operation doesn't have any variable
  }

  public override fun adapter(): Adapter<Data> {
    return TestQuery_ResponseAdapter.Data.obj()
  }

  public override fun selections(): List<CompiledSelection> = TestQuerySelections.root

  public data class Data(
    public val reviews: List<Review?>?,
    public val testNullableArguments: Int
  ) : Query.Data {
    public fun reviewsFilterNotNull(): List<Review>? = reviews?.filterNotNull()

    public data class Review(
      /**
       * The number of stars this review gave, 1-5
       */
      public val stars: Int,
      /**
       * Comment about the movie
       */
      public val commentary: String?
    )
  }

  public companion object {
    public const val OPERATION_ID: String =
        "a15321a7f7103480873db29a761ae001023b059eb7ad1af9e2816d1a2458c1b5"

    /**
     * The minimized GraphQL document being sent to the server to save a few bytes.
     * The un-minimized version is:
     *
     * query TestQuery {
     *   reviews(episode: JEDI, starsInt: 10, starsFloat: 9.9) {
     *     stars
     *     commentary
     *   }
     *   testNullableArguments(int: null, string: null, float: null, review: null, episode: null,
     * boolean: null, list: null)
     * }
     */
    public const val OPERATION_DOCUMENT: String =
        "query TestQuery { reviews(episode: JEDI, starsInt: 10, starsFloat: 9.9) { stars commentary } testNullableArguments(int: null, string: null, float: null, review: null, episode: null, boolean: null, list: null) }"

    public const val OPERATION_NAME: String = "TestQuery"
  }
}
