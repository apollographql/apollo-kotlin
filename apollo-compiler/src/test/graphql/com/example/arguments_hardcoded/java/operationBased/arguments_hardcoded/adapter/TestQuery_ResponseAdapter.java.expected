//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.arguments_hardcoded.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.IntAdapter;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.arguments_hardcoded.TestQuery;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("reviews", "testNullableArguments");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      List<TestQuery.Review> reviews = null;
      Integer testNullableArguments = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: reviews = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Review>(Review.INSTANCE, false)))).fromJson(reader, customScalarAdapters); break;
          case 1: testNullableArguments = IntAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(testNullableArguments, "testNullableArguments");

      return new TestQuery.Data(
        reviews,
        testNullableArguments
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("reviews");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Review>(Review.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.reviews);

      writer.name("testNullableArguments");
      IntAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.testNullableArguments);
    }
  }

  public enum Review implements Adapter<TestQuery.Review> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("stars", "commentary");

    @Override
    public TestQuery.Review fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      Integer stars = null;
      String commentary = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: stars = IntAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: commentary = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(stars, "stars");

      return new TestQuery.Review(
        stars,
        commentary
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Review value) throws IOException {
      writer.name("stars");
      IntAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.stars);

      writer.name("commentary");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.commentary);
    }
  }
}
