//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var `yield`: TestQuery.Data.Yield? = null
      var objects: List<TestQuery.Data.Object?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> `yield` = Yield.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> objects = Object.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        `yield` = `yield`,
        objects = objects
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("yield")
      Yield.obj().nullable().toJson(writer, customScalarAdapters, value.`yield`)

      writer.name("objects")
      Object.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.objects)
    }

    private object Yield : Adapter<TestQuery.Data.Yield> {
      public val RESPONSE_NAMES: List<String> = listOf("while", "it")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Yield {
        var `while`: String? = null
        var it: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> `while` = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> it = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          `while` = `while`!!,
          it = it!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Yield,
      ): Unit {
        writer.name("while")
        StringAdapter.toJson(writer, customScalarAdapters, value.`while`)

        writer.name("it")
        StringAdapter.toJson(writer, customScalarAdapters, value.it)
      }
    }

    private object Object : Adapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onCharacter: TestQuery.Data.Object.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(customScalarAdapters.variables(), __typename)) {
          onCharacter = com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Data.Object(
          __typename = __typename,
          onCharacter = onCharacter
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Object,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.Data.Object.OnCharacter.toJson(writer,
              customScalarAdapters, value.onCharacter)
        }
      }

      private object OnCharacter : Adapter<TestQuery.Data.Object.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Object.OnCharacter {
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          return TestQuery.Data.Object.OnCharacter(
            name = name!!
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Object.OnCharacter,
        ): Unit {
          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)
        }
      }
    }
  }
}
