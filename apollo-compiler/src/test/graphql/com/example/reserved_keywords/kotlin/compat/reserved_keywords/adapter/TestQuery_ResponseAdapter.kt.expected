//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_keywords.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.reserved_keywords.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var `yield`: TestQuery.Yield? = null
      var objects: List<TestQuery.Object?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> `yield` = Yield.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> objects = Object.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        `yield` = `yield`,
        objects = objects
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("yield")
      Yield.obj().nullable().toJson(writer, customScalarAdapters, value.`yield`)

      writer.name("objects")
      Object.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.objects)
    }
  }

  public object Yield : Adapter<TestQuery.Yield> {
    public val RESPONSE_NAMES: List<String> = listOf("while", "it")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Yield {
      var `while`: String? = null
      var it: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> `while` = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> it = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Yield(
        `while` = `while`!!,
        it = it!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Yield
    ): Unit {
      writer.name("while")
      StringAdapter.toJson(writer, customScalarAdapters, value.`while`)

      writer.name("it")
      StringAdapter.toJson(writer, customScalarAdapters, value.it)
    }
  }

  public object Object : Adapter<TestQuery.Object> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Object {
      var __typename: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asCharacter: TestQuery.AsCharacter? = null
      if (possibleTypes("Droid","Human").evaluate(emptySet(), __typename)) {
        asCharacter = com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.AsCharacter.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Object(
        __typename = __typename,
        asCharacter = asCharacter
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Object
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      if (value.asCharacter != null) {
        com.example.reserved_keywords.adapter.TestQuery_ResponseAdapter.AsCharacter.toJson(writer,
            customScalarAdapters, value.asCharacter)
      }
    }
  }

  public object AsCharacter : Adapter<TestQuery.AsCharacter> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsCharacter {
      var __typename: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsCharacter(
        __typename = __typename!!,
        name = name!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsCharacter
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }
}
