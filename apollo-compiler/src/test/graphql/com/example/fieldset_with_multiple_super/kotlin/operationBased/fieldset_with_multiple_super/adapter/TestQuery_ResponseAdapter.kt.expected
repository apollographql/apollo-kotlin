//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.fieldset_with_multiple_super.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("c")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var c: TestQuery.Data.C? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> c = C.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        c = c
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("c")
      C.obj(true).nullable().toJson(writer, customScalarAdapters, value.c)
    }

    private object C : Adapter<TestQuery.Data.C> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.C {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onA: TestQuery.Data.C.OnA? = null
        if (possibleTypes("ABC","AC").evaluate(customScalarAdapters.variables(), __typename)) {
          onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.fromJson(reader,
              customScalarAdapters)
        }

        reader.rewind()
        var onB: TestQuery.Data.C.OnB? = null
        if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.variables(), __typename)) {
          onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Data.C(
          __typename = __typename,
          onA = onA,
          onB = onB
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.C,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onA != null) {
          com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.toJson(writer,
              customScalarAdapters, value.onA)
        }

        if (value.onB != null) {
          com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.toJson(writer,
              customScalarAdapters, value.onB)
        }
      }

      private object OnA : Adapter<TestQuery.Data.C.OnA> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldA1")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.C.OnA {
          var __typename: String? = null
          var fieldA1: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> fieldA1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var onB: TestQuery.Data.C.OnA.OnB? = null
          if (possibleTypes("ABC","BC").evaluate(customScalarAdapters.variables(), __typename)) {
            onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.OnB.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.Data.C.OnA(
            __typename = __typename,
            fieldA1 = fieldA1,
            onB = onB
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.C.OnA,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("fieldA1")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1)

          if (value.onB != null) {
            com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnA.OnB.toJson(writer,
                customScalarAdapters, value.onB)
          }
        }

        private object OnB : Adapter<TestQuery.Data.C.OnA.OnB> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldB1")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters): TestQuery.Data.C.OnA.OnB {
            var fieldB1: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> fieldB1 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.C.OnA.OnB(
              fieldB1 = fieldB1
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.C.OnA.OnB,
          ): Unit {
            writer.name("fieldB1")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1)
          }
        }
      }

      private object OnB : Adapter<TestQuery.Data.C.OnB> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "fieldB2")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.C.OnB {
          var __typename: String? = null
          var fieldB2: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> fieldB2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var onA: TestQuery.Data.C.OnB.OnA? = null
          if (possibleTypes("ABC","AC").evaluate(customScalarAdapters.variables(), __typename)) {
            onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.OnA.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.Data.C.OnB(
            __typename = __typename,
            fieldB2 = fieldB2,
            onA = onA
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.C.OnB,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("fieldB2")
          NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2)

          if (value.onA != null) {
            com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.Data.C.OnB.OnA.toJson(writer,
                customScalarAdapters, value.onA)
          }
        }

        private object OnA : Adapter<TestQuery.Data.C.OnB.OnA> {
          public val RESPONSE_NAMES: List<String> = listOf("fieldA2")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters): TestQuery.Data.C.OnB.OnA {
            var fieldA2: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> fieldA2 = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.C.OnB.OnA(
              fieldA2 = fieldA2
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.C.OnB.OnA,
          ): Unit {
            writer.name("fieldA2")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA2)
          }
        }
      }
    }
  }
}
