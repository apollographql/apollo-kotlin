//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fieldset_with_multiple_super.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.StringAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fieldset_with_multiple_super.TestQuery;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("c");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      TestQuery.C c = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: c = Adapters.nullable(new ObjectAdapter<TestQuery.C>(C.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        c
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) {
      writer.name("c");
      Adapters.nullable(new ObjectAdapter<TestQuery.C>(C.INSTANCE, true)).toJson(writer, customScalarAdapters, value.c);
    }
  }

  public enum C implements Adapter<TestQuery.C> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.C fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnA onA = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","AC")), Collections.emptySet(), __typename)) {
        onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      reader.rewind();
      TestQuery.OnB1 onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), Collections.emptySet(), __typename)) {
        onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.C(
        __typename,
        onA,
        onB
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.C value) {
      writer.name("__typename");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onA != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA.INSTANCE.toJson(writer, customScalarAdapters, value.onA);
      }

      if (value.onB != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB1.INSTANCE.toJson(writer, customScalarAdapters, value.onB);
      }
    }
  }

  public enum OnA implements Adapter<TestQuery.OnA> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "fieldA1");

    @Override
    public TestQuery.OnA fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String __typename = null;
      String fieldA1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: fieldA1 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnB onB = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","BC")), Collections.emptySet(), __typename)) {
        onB = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.OnA(
        __typename,
        fieldA1,
        onB
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnA value) {
      writer.name("__typename");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("fieldA1");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA1);

      if (value.onB != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnB.INSTANCE.toJson(writer, customScalarAdapters, value.onB);
      }
    }
  }

  public enum OnB implements Adapter<TestQuery.OnB> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldB1");

    @Override
    public TestQuery.OnB fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String fieldB1 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: fieldB1 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnB(
        fieldB1
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnB value) {
      writer.name("fieldB1");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB1);
    }
  }

  public enum OnB1 implements Adapter<TestQuery.OnB1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename", "fieldB2");

    @Override
    public TestQuery.OnB1 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String __typename = null;
      String fieldB2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: fieldB2 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnA1 onA = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("ABC","AC")), Collections.emptySet(), __typename)) {
        onA = com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.OnB1(
        __typename,
        fieldB2,
        onA
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnB1 value) {
      writer.name("__typename");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.__typename);

      writer.name("fieldB2");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldB2);

      if (value.onA != null) {
        com.example.fieldset_with_multiple_super.adapter.TestQuery_ResponseAdapter.OnA1.INSTANCE.toJson(writer, customScalarAdapters, value.onA);
      }
    }
  }

  public enum OnA1 implements Adapter<TestQuery.OnA1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("fieldA2");

    @Override
    public TestQuery.OnA1 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters) {
      String fieldA2 = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: fieldA2 = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.OnA1(
        fieldA2
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnA1 value) {
      writer.name("fieldA2");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.fieldA2);
    }
  }
}
