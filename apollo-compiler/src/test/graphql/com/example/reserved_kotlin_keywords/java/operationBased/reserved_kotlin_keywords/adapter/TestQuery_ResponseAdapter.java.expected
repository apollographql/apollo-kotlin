//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_kotlin_keywords.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.StringAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.reserved_kotlin_keywords.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("yield", "objects");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      TestQuery.Yield yield_ = null;
      List<TestQuery.Object> objects = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: yield_ = new NullableAdapter<>(new ObjectAdapter<TestQuery.Yield>(Yield.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 1: objects = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Object>(Object.INSTANCE, true)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Data(
        yield_,
        objects
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("yield");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Yield>(Yield.INSTANCE, false)).toJson(writer, customScalarAdapters, value.yield_);

      writer.name("objects");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<TestQuery.Object>(Object.INSTANCE, true)))).toJson(writer, customScalarAdapters, value.objects);
    }
  }

  public enum Yield implements Adapter<TestQuery.Yield> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("it", "name");

    @Override
    public TestQuery.Yield fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String it_ = null;
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: it_ = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          case 1: name = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(it_, "it");
      Assertions.checkFieldNotMissing(name, "name");

      return new TestQuery.Yield(
        it_,
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Yield value) throws IOException {
      writer.name("it");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.it_);

      writer.name("name");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum Object implements Adapter<TestQuery.Object> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public TestQuery.Object fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String __typename = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      reader.rewind();
      TestQuery.OnCharacter onCharacter = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid","Human")), Collections.emptySet(), __typename)) {
        onCharacter = com.example.reserved_kotlin_keywords.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new TestQuery.Object(
        __typename,
        onCharacter
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Object value) throws IOException {
      writer.name("__typename");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onCharacter != null) {
        com.example.reserved_kotlin_keywords.adapter.TestQuery_ResponseAdapter.OnCharacter.INSTANCE.toJson(writer, customScalarAdapters, value.onCharacter);
      }
    }
  }

  public enum OnCharacter implements Adapter<TestQuery.OnCharacter> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public TestQuery.OnCharacter fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = StringAdapter.INSTANCE.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new TestQuery.OnCharacter(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.OnCharacter value) throws IOException {
      writer.name("name");
      StringAdapter.INSTANCE.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
