//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.reserved_kotlin_keywords.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.reserved_kotlin_keywords.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("yield", "objects")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var yield_: TestQuery.Data.Yield? = null
      var objects: List<TestQuery.Data.Object?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> yield_ = Yield.obj().nullable().fromJson(reader, customScalarAdapters)
          1 -> objects = Object.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        yield_ = yield_,
        objects = objects
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("yield")
      Yield.obj().nullable().toJson(writer, customScalarAdapters, value.yield_)

      writer.name("objects")
      Object.obj().nullable().list().nullable().toJson(writer, customScalarAdapters, value.objects)
    }

    private object Yield : Adapter<TestQuery.Data.Yield> {
      public val RESPONSE_NAMES: List<String> = listOf("it", "name")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Yield {
        var it_: String? = null
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> it_ = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Yield(
          it_ = it_!!,
          name = name!!
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Yield
      ): Unit {
        writer.name("it")
        StringAdapter.toJson(writer, customScalarAdapters, value.it_)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }

    private object Object : Adapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object {
        reader.selectName(RESPONSE_NAMES).also {
          check(it == 0) {
            "__typename not present in first position"
          }
        }
        val __typename = reader.nextString()!!
        return when(__typename) {
          "Droid",
          "Human",
          -> CharacterObject.fromJson(reader, customScalarAdapters, __typename)
          else
          -> OtherObject.fromJson(reader, customScalarAdapters, __typename)
        }
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Object
      ): Unit {
        when(value) {
          is TestQuery.Data.CharacterObject -> CharacterObject.toJson(writer, customScalarAdapters,
              value)
          is TestQuery.Data.OtherObject -> OtherObject.toJson(writer, customScalarAdapters, value)
        }
      }
    }

    public object CharacterObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.CharacterObject {
        var __typename: String? = typename
        var name: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.CharacterObject(
          __typename = __typename!!,
          name = name!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.CharacterObject
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        writer.name("name")
        StringAdapter.toJson(writer, customScalarAdapters, value.name)
      }
    }

    public object OtherObject {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public fun fromJson(
        reader: JsonReader,
        customScalarAdapters: CustomScalarAdapters,
        typename: String
      ): TestQuery.Data.OtherObject {
        var __typename: String? = typename

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.OtherObject(
          __typename = __typename!!
        )
      }

      public fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.OtherObject
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)
      }
    }
  }
}
