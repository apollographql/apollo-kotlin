//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_inline_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableDoubleAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.simple_inline_fragment.TestQuery
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("hero")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var hero: TestQuery.Hero? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> hero = Hero.obj(true).nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        hero = hero
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("hero")
      Hero.obj(true).nullable().toJson(writer, customScalarAdapters, value.hero)
    }
  }

  public object Hero : Adapter<TestQuery.Hero> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Hero {
      var __typename: String? = null
      var id: String? = null
      var name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      check(__typename != null) {
        "__typename was not found"
      }

      reader.rewind()
      var asHuman: TestQuery.AsHuman? = null
      if (possibleTypes("Human").evaluate(customScalarAdapters.variables(), __typename)) {
        asHuman = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.AsHuman.fromJson(reader,
            customScalarAdapters)
      }

      reader.rewind()
      var asDroid: TestQuery.AsDroid? = null
      if (possibleTypes("Droid").evaluate(customScalarAdapters.variables(), __typename)) {
        asDroid = com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.AsDroid.fromJson(reader,
            customScalarAdapters)
      }

      return TestQuery.Hero(
        __typename = __typename,
        id = id!!,
        name = name!!,
        asHuman = asHuman,
        asDroid = asDroid
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Hero
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      if (value.asHuman != null) {
        com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.AsHuman.toJson(writer,
            customScalarAdapters, value.asHuman)
      }

      if (value.asDroid != null) {
        com.example.simple_inline_fragment.adapter.TestQuery_ResponseAdapter.AsDroid.toJson(writer,
            customScalarAdapters, value.asDroid)
      }
    }
  }

  public object AsHuman : Adapter<TestQuery.AsHuman> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "height")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsHuman {
      var __typename: String? = null
      var id: String? = null
      var name: String? = null
      var height: Double? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> height = NullableDoubleAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsHuman(
        __typename = __typename!!,
        id = id!!,
        name = name!!,
        height = height
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsHuman
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("height")
      NullableDoubleAdapter.toJson(writer, customScalarAdapters, value.height)
    }
  }

  public object AsDroid : Adapter<TestQuery.AsDroid> {
    public val RESPONSE_NAMES: List<String> = listOf("__typename", "id", "name", "primaryFunction")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsDroid {
      var __typename: String? = null
      var id: String? = null
      var name: String? = null
      var primaryFunction: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> id = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsDroid(
        __typename = __typename!!,
        id = id!!,
        name = name!!,
        primaryFunction = primaryFunction
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsDroid
    ): Unit {
      writer.name("__typename")
      StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("primaryFunction")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
    }
  }
}
