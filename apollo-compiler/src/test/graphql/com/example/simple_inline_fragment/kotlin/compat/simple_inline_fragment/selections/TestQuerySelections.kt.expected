//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_inline_fragment.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.notNull
import com.example.simple_inline_fragment.type.Character
import com.example.simple_inline_fragment.type.Float
import com.example.simple_inline_fragment.type.ID
import com.example.simple_inline_fragment.type.String
import kotlin.collections.List

public object TestQuerySelections {
  private val onCharacter1: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "name",
          type = String.type.notNull()
        ).build()
      )

  private val onCharacter: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = String.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "id",
          type = ID.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Character",
          possibleTypes = listOf("Droid", "Human")
        ).selections(onCharacter1)
        .build()
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "height",
          type = Float.type
        ).build()
      )

  private val onDroid: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "primaryFunction",
          type = String.type
        ).build()
      )

  private val hero: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "__typename",
          type = String.type.notNull()
        ).build(),
        CompiledFragment.Builder(
          typeCondition = "Character",
          possibleTypes = listOf("Droid", "Human")
        ).selections(onCharacter)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Human",
          possibleTypes = listOf("Human")
        ).selections(onHuman)
        .build(),
        CompiledFragment.Builder(
          typeCondition = "Droid",
          possibleTypes = listOf("Droid")
        ).selections(onDroid)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "hero",
          type = Character.type
        ).selections(hero)
        .build()
      )
}
