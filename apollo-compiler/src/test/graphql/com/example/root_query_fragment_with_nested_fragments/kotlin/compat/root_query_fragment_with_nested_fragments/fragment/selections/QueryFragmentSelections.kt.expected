//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.root_query_fragment_with_nested_fragments.fragment.selections

import com.apollographql.apollo3.api.CompiledArgument
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.notNull
import com.example.root_query_fragment_with_nested_fragments.type.Character
import com.example.root_query_fragment_with_nested_fragments.type.Droid
import com.example.root_query_fragment_with_nested_fragments.type.Human
import kotlin.collections.List

public object QueryFragmentSelections {
  private val hero: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = (listOf("Droid", "Human"))
        ).selections(heroFragmentSelections.root)
        .build()
      )

  private val droid: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = (listOf("Droid"))
        ).selections(droidFragmentSelections.root)
        .build()
      )

  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "name",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.builder(
          name = "homePlanet",
          type = CompiledStringType
        ).build()
      )

  private val human: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledFragment.builder(
          possibleTypes = listOf("Human")
        ).selections(onHuman)
        .build()
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField.builder(
          name = "__typename",
          type = CompiledStringType.notNull()
        ).build(),
        CompiledField.builder(
          name = "hero",
          type = Character.type
        ).selections(hero)
        .build(),
        CompiledField.builder(
          name = "droid",
          type = Droid.type
        ).arguments(listOf(
          CompiledArgument("id", 1)
        ))
        .selections(droid)
        .build(),
        CompiledField.builder(
          name = "human",
          type = Human.type
        ).arguments(listOf(
          CompiledArgument("id", 1)
        ))
        .selections(human)
        .build()
      )
}
