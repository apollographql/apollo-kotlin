//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.monomorphic.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var cat: TestQuery.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> cat = Cat.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        cat = cat!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("cat")
      Cat.obj(true).toJson(writer, customScalarAdapters, value.cat)
    }
  }

  public object Cat : Adapter<TestQuery.Cat> {
    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Cat {


      reader.rewind()
      val asNode = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.AsNode.fromJson(reader,
          customScalarAdapters)

      return TestQuery.Cat(
        asNode = asNode
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Cat
    ): Unit {
      com.example.monomorphic.adapter.TestQuery_ResponseAdapter.AsNode.toJson(writer,
          customScalarAdapters, value.asNode)
    }
  }

  public object AsNode : Adapter<TestQuery.AsNode> {
    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsNode {


      reader.rewind()
      val asAnimal = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.AsAnimal.fromJson(reader,
          customScalarAdapters)

      return TestQuery.AsNode(
        asAnimal = asAnimal
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsNode
    ): Unit {
      com.example.monomorphic.adapter.TestQuery_ResponseAdapter.AsAnimal.toJson(writer,
          customScalarAdapters, value.asAnimal)
    }
  }

  public object AsAnimal : Adapter<TestQuery.AsAnimal> {
    public val RESPONSE_NAMES: List<String> = listOf("species")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.AsAnimal {
      var species: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> species = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.AsAnimal(
        species = species!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.AsAnimal
    ): Unit {
      writer.name("species")
      StringAdapter.toJson(writer, customScalarAdapters, value.species)
    }
  }
}
