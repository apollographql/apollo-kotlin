//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.monomorphic.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.obj
import com.example.monomorphic.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("cat")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var cat: TestQuery.Data.Cat? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> cat = Cat.obj(true).fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        cat = cat!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("cat")
      Cat.obj(true).toJson(writer, customScalarAdapters, value.cat)
    }

    private object Cat : Adapter<TestQuery.Data.Cat> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Cat {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        reader.rewind()
        val onNode = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.fromJson(reader,
            customScalarAdapters)

        return TestQuery.Data.Cat(
          __typename = __typename!!,
          onNode = onNode
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Cat,
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.toJson(writer,
            customScalarAdapters, value.onNode)
      }

      private object OnNode : Adapter<TestQuery.Data.Cat.OnNode> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat.OnNode {
          var __typename: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          reader.rewind()
          val onAnimal = com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.fromJson(reader,
              customScalarAdapters)

          return TestQuery.Data.Cat.OnNode(
            __typename = __typename!!,
            onAnimal = onAnimal
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Cat.OnNode,
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          com.example.monomorphic.adapter.TestQuery_ResponseAdapter.Data.Cat.OnNode.OnAnimal.toJson(writer,
              customScalarAdapters, value.onAnimal)
        }

        private object OnAnimal : Adapter<TestQuery.Data.Cat.OnNode.OnAnimal> {
          public val RESPONSE_NAMES: List<String> = listOf("species")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Cat.OnNode.OnAnimal {
            var species: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> species = StringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Cat.OnNode.OnAnimal(
              species = species!!
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Cat.OnNode.OnAnimal,
          ): Unit {
            writer.name("species")
            StringAdapter.toJson(writer, customScalarAdapters, value.species)
          }
        }
      }
    }
  }
}
