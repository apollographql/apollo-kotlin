//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_inside_inline_fragment.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.evaluate
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.apollographql.apollo3.api.possibleTypes
import com.example.inline_fragment_inside_inline_fragment.TestQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("search")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var search: List<TestQuery.Data.Search?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> search = Search.obj(true).nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        search = search
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data
    ): Unit {
      writer.name("search")
      Search.obj(true).nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.search)
    }

    private object Search : Adapter<TestQuery.Data.Search> {
      public val RESPONSE_NAMES: List<String> = listOf("__typename")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Search {
        var __typename: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        check(__typename != null) {
          "__typename was not found"
        }

        reader.rewind()
        var onCharacter: TestQuery.Data.Search.OnCharacter? = null
        if (possibleTypes("Droid","Human").evaluate(customScalarAdapters.variables(), __typename)) {
          onCharacter = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.fromJson(reader,
              customScalarAdapters)
        }

        return TestQuery.Data.Search(
          __typename = __typename,
          onCharacter = onCharacter
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Search
      ): Unit {
        writer.name("__typename")
        StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

        if (value.onCharacter != null) {
          com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.toJson(writer,
              customScalarAdapters, value.onCharacter)
        }
      }

      private object OnCharacter : Adapter<TestQuery.Data.Search.OnCharacter> {
        public val RESPONSE_NAMES: List<String> = listOf("__typename", "name")

        public override fun fromJson(reader: JsonReader,
            customScalarAdapters: CustomScalarAdapters): TestQuery.Data.Search.OnCharacter {
          var __typename: String? = null
          var name: String? = null

          while(true) {
            when (reader.selectName(RESPONSE_NAMES)) {
              0 -> __typename = StringAdapter.fromJson(reader, customScalarAdapters)
              1 -> name = StringAdapter.fromJson(reader, customScalarAdapters)
              else -> break
            }
          }

          check(__typename != null) {
            "__typename was not found"
          }

          reader.rewind()
          var onHuman: TestQuery.Data.Search.OnCharacter.OnHuman? = null
          if (possibleTypes("Human").evaluate(customScalarAdapters.variables(), __typename)) {
            onHuman = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnHuman.fromJson(reader,
                customScalarAdapters)
          }

          reader.rewind()
          var onDroid: TestQuery.Data.Search.OnCharacter.OnDroid? = null
          if (possibleTypes("Droid").evaluate(customScalarAdapters.variables(), __typename)) {
            onDroid = com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnDroid.fromJson(reader,
                customScalarAdapters)
          }

          return TestQuery.Data.Search.OnCharacter(
            __typename = __typename,
            name = name!!,
            onHuman = onHuman,
            onDroid = onDroid
          )
        }

        public override fun toJson(
          writer: JsonWriter,
          customScalarAdapters: CustomScalarAdapters,
          `value`: TestQuery.Data.Search.OnCharacter
        ): Unit {
          writer.name("__typename")
          StringAdapter.toJson(writer, customScalarAdapters, value.__typename)

          writer.name("name")
          StringAdapter.toJson(writer, customScalarAdapters, value.name)

          if (value.onHuman != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnHuman.toJson(writer,
                customScalarAdapters, value.onHuman)
          }

          if (value.onDroid != null) {
            com.example.inline_fragment_inside_inline_fragment.adapter.TestQuery_ResponseAdapter.Data.Search.OnCharacter.OnDroid.toJson(writer,
                customScalarAdapters, value.onDroid)
          }
        }

        private object OnHuman : Adapter<TestQuery.Data.Search.OnCharacter.OnHuman> {
          public val RESPONSE_NAMES: List<String> = listOf("homePlanet")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Search.OnCharacter.OnHuman {
            var homePlanet: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> homePlanet = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Search.OnCharacter.OnHuman(
              homePlanet = homePlanet
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Search.OnCharacter.OnHuman
          ): Unit {
            writer.name("homePlanet")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.homePlanet)
          }
        }

        private object OnDroid : Adapter<TestQuery.Data.Search.OnCharacter.OnDroid> {
          public val RESPONSE_NAMES: List<String> = listOf("primaryFunction")

          public override fun fromJson(reader: JsonReader,
              customScalarAdapters: CustomScalarAdapters):
              TestQuery.Data.Search.OnCharacter.OnDroid {
            var primaryFunction: String? = null

            while(true) {
              when (reader.selectName(RESPONSE_NAMES)) {
                0 -> primaryFunction = NullableStringAdapter.fromJson(reader, customScalarAdapters)
                else -> break
              }
            }

            return TestQuery.Data.Search.OnCharacter.OnDroid(
              primaryFunction = primaryFunction
            )
          }

          public override fun toJson(
            writer: JsonWriter,
            customScalarAdapters: CustomScalarAdapters,
            `value`: TestQuery.Data.Search.OnCharacter.OnDroid
          ): Unit {
            writer.name("primaryFunction")
            NullableStringAdapter.toJson(writer, customScalarAdapters, value.primaryFunction)
          }
        }
      }
    }
  }
}
