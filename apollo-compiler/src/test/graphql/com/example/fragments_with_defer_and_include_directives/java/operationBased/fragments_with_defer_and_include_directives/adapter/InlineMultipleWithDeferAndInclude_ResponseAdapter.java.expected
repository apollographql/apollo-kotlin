//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BLabel;
import com.apollographql.apollo3.api.BPossibleTypes;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BVariable;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fragments_with_defer_and_include_directives.InlineMultipleWithDeferAndInclude;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class InlineMultipleWithDeferAndInclude_ResponseAdapter {
  public enum Data implements Adapter<InlineMultipleWithDeferAndInclude.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public InlineMultipleWithDeferAndInclude.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      InlineMultipleWithDeferAndInclude.Hero hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: hero = new NullableAdapter<>(new ObjectAdapter<InlineMultipleWithDeferAndInclude.Hero>(Hero.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new InlineMultipleWithDeferAndInclude.Data(
        hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.Data value) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<InlineMultipleWithDeferAndInclude.Hero>(Hero.INSTANCE, true)).toJson(writer, customScalarAdapters, value.hero);
    }
  }

  public enum Hero implements Adapter<InlineMultipleWithDeferAndInclude.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public InlineMultipleWithDeferAndInclude.Hero fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;

      String __path = reader.getPath();
      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");
      InlineMultipleWithDeferAndInclude.OnDroidIfCond1 onDroidIfCond1 = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Element<BTerm>(new BVariable("cond1"))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidIfCond1 = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidIfCond1.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferAndInclude.OnDroidIfNotCond2 onDroidIfNotCond2 = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Not<BTerm>(new BooleanExpression.Element<BTerm>(new BVariable("cond2")))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidIfNotCond2 = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidIfNotCond2.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferAndInclude.OnDroidDeferFirst onDroidDeferFirst = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Element<BTerm>(new BLabel("first"))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidDeferFirst = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferFirst.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferAndInclude.OnDroidDeferSecond onDroidDeferSecond = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.Element<BTerm>(new BLabel("second"))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidDeferSecond = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferSecond.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferAndInclude.OnDroidDeferThird onDroidDeferThird = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BLabel("third")),new BooleanExpression.Element<BTerm>(new BVariable("cond3")))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidDeferThird = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferThird.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferAndInclude.OnDroidDeferFourth onDroidDeferFourth = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BPossibleTypes("Droid")),new BooleanExpression.And<BTerm>(new BooleanExpression.Element<BTerm>(new BLabel("fourth")),new BooleanExpression.Not<BTerm>(new BooleanExpression.Element<BTerm>(new BVariable("cond4"))))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onDroidDeferFourth = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferFourth.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      return new InlineMultipleWithDeferAndInclude.Hero(
        __typename,
        onDroidIfCond1,
        onDroidIfNotCond2,
        onDroidDeferFirst,
        onDroidDeferSecond,
        onDroidDeferThird,
        onDroidDeferFourth
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.Hero value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      if (value.onDroidIfCond1 != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidIfCond1.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidIfCond1);
      }

      if (value.onDroidIfNotCond2 != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidIfNotCond2.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidIfNotCond2);
      }

      if (value.onDroidDeferFirst != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferFirst.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidDeferFirst);
      }

      if (value.onDroidDeferSecond != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferSecond.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidDeferSecond);
      }

      if (value.onDroidDeferThird != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferThird.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidDeferThird);
      }

      if (value.onDroidDeferFourth != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferAndInclude_ResponseAdapter.OnDroidDeferFourth.INSTANCE.toJson(writer, customScalarAdapters, value.onDroidDeferFourth);
      }
    }
  }

  public enum OnDroidIfCond1 implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidIfCond1> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidIfCond1 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new InlineMultipleWithDeferAndInclude.OnDroidIfCond1(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidIfCond1 value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum OnDroidIfNotCond2 implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidIfNotCond2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidIfNotCond2 fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(id, "id");

      return new InlineMultipleWithDeferAndInclude.OnDroidIfNotCond2(
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidIfNotCond2 value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum OnDroidDeferFirst implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidDeferFirst> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidDeferFirst fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new InlineMultipleWithDeferAndInclude.OnDroidDeferFirst(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidDeferFirst value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum OnDroidDeferSecond implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidDeferSecond> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidDeferSecond fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(id, "id");

      return new InlineMultipleWithDeferAndInclude.OnDroidDeferSecond(
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidDeferSecond value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum OnDroidDeferThird implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidDeferThird> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidDeferThird fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new InlineMultipleWithDeferAndInclude.OnDroidDeferThird(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidDeferThird value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum OnDroidDeferFourth implements Adapter<InlineMultipleWithDeferAndInclude.OnDroidDeferFourth> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public InlineMultipleWithDeferAndInclude.OnDroidDeferFourth fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(id, "id");

      return new InlineMultipleWithDeferAndInclude.OnDroidDeferFourth(
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferAndInclude.OnDroidDeferFourth value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
