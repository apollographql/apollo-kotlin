//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.fragments_with_defer_and_include_directives.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.BLabel;
import com.apollographql.apollo3.api.BTerm;
import com.apollographql.apollo3.api.BVariable;
import com.apollographql.apollo3.api.BooleanExpression;
import com.apollographql.apollo3.api.BooleanExpressions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.fragments_with_defer_and_include_directives.InlineMultipleWithDeferWithIf;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class InlineMultipleWithDeferWithIf_ResponseAdapter {
  public enum Data implements Adapter<InlineMultipleWithDeferWithIf.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("hero");

    @Override
    public InlineMultipleWithDeferWithIf.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      InlineMultipleWithDeferWithIf.Hero hero = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: hero = new NullableAdapter<>(new ObjectAdapter<InlineMultipleWithDeferWithIf.Hero>(Hero.INSTANCE, true)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new InlineMultipleWithDeferWithIf.Data(
        hero
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferWithIf.Data value) throws IOException {
      writer.name("hero");
      new NullableAdapter<>(new ObjectAdapter<InlineMultipleWithDeferWithIf.Hero>(Hero.INSTANCE, true)).toJson(writer, customScalarAdapters, value.hero);
    }
  }

  public enum Hero implements Adapter<InlineMultipleWithDeferWithIf.Hero> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("__typename");

    @Override
    public InlineMultipleWithDeferWithIf.Hero fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String __typename = null;

      String __path = reader.getPath();
      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: __typename = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      reader.rewind();
      InlineMultipleWithDeferWithIf.OnCharacter onCharacter = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacter.INSTANCE.fromJson(reader, customScalarAdapters);

      InlineMultipleWithDeferWithIf.OnCharacterDeferSecond onCharacterDeferSecond = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Element<BTerm>(new BLabel("second")), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onCharacterDeferSecond = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacterDeferSecond.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      InlineMultipleWithDeferWithIf.OnCharacterDeferThird onCharacterDeferThird = null;
      if (BooleanExpressions.evaluate(new BooleanExpression.Or<BTerm>(new BooleanExpression.Not<BTerm>(new BooleanExpression.Element<BTerm>(new BVariable("cond"))),new BooleanExpression.Element<BTerm>(new BLabel("third"))), customScalarAdapters.getAdapterContext().variables(), __typename, customScalarAdapters.getAdapterContext(), __path)) {
        reader.rewind();
        onCharacterDeferThird = com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacterDeferThird.INSTANCE.fromJson(reader, customScalarAdapters);
      }

      Assertions.checkFieldNotMissing(__typename, "__typename");

      return new InlineMultipleWithDeferWithIf.Hero(
        __typename,
        onCharacter,
        onCharacterDeferSecond,
        onCharacterDeferThird
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferWithIf.Hero value) throws IOException {
      writer.name("__typename");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.__typename);

      com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacter.INSTANCE.toJson(writer, customScalarAdapters, value.onCharacter);

      if (value.onCharacterDeferSecond != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacterDeferSecond.INSTANCE.toJson(writer, customScalarAdapters, value.onCharacterDeferSecond);
      }

      if (value.onCharacterDeferThird != null) {
        com.example.fragments_with_defer_and_include_directives.adapter.InlineMultipleWithDeferWithIf_ResponseAdapter.OnCharacterDeferThird.INSTANCE.toJson(writer, customScalarAdapters, value.onCharacterDeferThird);
      }
    }
  }

  public enum OnCharacter implements Adapter<InlineMultipleWithDeferWithIf.OnCharacter> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public InlineMultipleWithDeferWithIf.OnCharacter fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(id, "id");

      return new InlineMultipleWithDeferWithIf.OnCharacter(
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferWithIf.OnCharacter value) throws IOException {
      writer.name("id");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum OnCharacterDeferSecond implements Adapter<InlineMultipleWithDeferWithIf.OnCharacterDeferSecond> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineMultipleWithDeferWithIf.OnCharacterDeferSecond fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new InlineMultipleWithDeferWithIf.OnCharacterDeferSecond(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferWithIf.OnCharacterDeferSecond value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }

  public enum OnCharacterDeferThird implements Adapter<InlineMultipleWithDeferWithIf.OnCharacterDeferThird> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name");

    @Override
    public InlineMultipleWithDeferWithIf.OnCharacterDeferThird fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.StringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(name, "name");

      return new InlineMultipleWithDeferWithIf.OnCharacterDeferThird(
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        InlineMultipleWithDeferWithIf.OnCharacterDeferThird value) throws IOException {
      writer.name("name");
      Adapters.StringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
