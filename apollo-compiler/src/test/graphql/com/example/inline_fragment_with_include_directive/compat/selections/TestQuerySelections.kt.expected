//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.inline_fragment_with_include_directive.selections

import com.apollographql.apollo3.api.CompiledCondition
import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledFragment
import com.apollographql.apollo3.api.CompiledIDType
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.CompiledStringType
import com.apollographql.apollo3.api.notNull
import com.example.inline_fragment_with_include_directive.type.Types.Character
import kotlin.collections.List

public object TestQuerySelections {
  private val onHuman: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "homePlanet",
          type = CompiledStringType
        )
      )

  private val onDroid: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "primaryFunction",
          type = CompiledStringType
        )
      )

  private val onCharacter: List<CompiledSelection> = listOf(
        CompiledField(
          name = "name",
          type = CompiledStringType.notNull()
        )
      )

  private val hero: List<CompiledSelection> = listOf(
        CompiledField(
          name = "__typename",
          type = CompiledStringType.notNull()
        ),
        CompiledField(
          name = "id",
          type = CompiledIDType.notNull()
        ),
        CompiledFragment(
          possibleTypes = listOf("Human"),
          condition = listOf(CompiledCondition("withDetails", false),
              CompiledCondition("skipHumanDetails", true)),
          selections = onHuman
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid"),
          condition = listOf(CompiledCondition("withDetails", false)),
          selections = onDroid
        ),
        CompiledFragment(
          possibleTypes = listOf("Droid", "Human"),
          condition = listOf(CompiledCondition("withDetails", false)),
          selections = onCharacter
        )
      )

  public val root: List<CompiledSelection> = listOf(
        CompiledField(
          name = "hero",
          type = Character,
          selections = hero
        )
      )
}
