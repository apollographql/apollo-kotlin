// Signature format: 4.0
package com.apollographql.apollo.gradle.api {

  public final class ApolloAttributes {
    method public org.gradle.api.attributes.Attribute<com.apollographql.apollo.gradle.api.ApolloAttributes.Service>! getAPOLLO_SERVICE_ATTRIBUTE();
    method public org.gradle.api.attributes.Attribute<com.apollographql.apollo.gradle.api.ApolloAttributes.Variant>! getAPOLLO_VARIANT_ATTRIBUTE();
    property public final org.gradle.api.attributes.Attribute<com.apollographql.apollo.gradle.api.ApolloAttributes.Service>! APOLLO_SERVICE_ATTRIBUTE;
    property public final org.gradle.api.attributes.Attribute<com.apollographql.apollo.gradle.api.ApolloAttributes.Variant>! APOLLO_VARIANT_ATTRIBUTE;
    field public static final com.apollographql.apollo.gradle.api.ApolloAttributes INSTANCE;
  }

  public static interface ApolloAttributes.Service extends org.gradle.api.Named {
  }

  public static interface ApolloAttributes.Variant extends org.gradle.api.Named {
  }

  public interface ApolloExtension extends com.apollographql.apollo.gradle.api.CompilerParams {
    method public void onCompilationUnit(org.gradle.api.Action<com.apollographql.apollo.gradle.api.CompilationUnit> action);
    method public void service(String name, org.gradle.api.Action<com.apollographql.apollo.gradle.internal.DefaultService> action);
  }

  public interface CompilationUnit extends com.apollographql.apollo.gradle.api.CompilerParams {
    method public Object? getAndroidVariant();
    method public String getName();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> getOperationOutputFile();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getOutputDir();
    method public String getServiceName();
    method public String getVariantName();
    property public abstract Object? androidVariant;
    property public abstract String name;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> operationOutputFile;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.Directory> outputDir;
    property public abstract String serviceName;
    property public abstract String variantName;
  }

  public interface CompilerParams {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getAlwaysGenerateTypesMatching();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getCustomTypeMapping();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getFailOnWarnings();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateApolloMetadata();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateAsInternal();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateKotlinModels();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateModelBuilder();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateOperationOutput();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getGenerateVisitorForPolymorphicDatatypes();
    method public org.gradle.api.file.SourceDirectorySet getGraphqlSourceDirectorySet();
    method public org.gradle.api.provider.Property<java.lang.String> getNullableValueType();
    method public org.gradle.api.provider.Property<error.NonExistentClass> getOperationIdGenerator();
    method public org.gradle.api.provider.Property<error.NonExistentClass> getOperationOutputGenerator();
    method public org.gradle.api.provider.Property<java.lang.String> getPackageName();
    method public org.gradle.api.provider.Property<java.lang.String> getRootPackageName();
    method public org.gradle.api.file.RegularFileProperty getSchemaFile();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getSealedClassesForEnumsMatching();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getSuppressRawTypesWarning();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getUseJavaBeansSemanticNaming();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getUseSemanticNaming();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getWarnOnDeprecatedUsages();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> alwaysGenerateTypesMatching;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> customTypeMapping;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> failOnWarnings;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateApolloMetadata;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateAsInternal;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateKotlinModels;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateModelBuilder;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateOperationOutput;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> generateVisitorForPolymorphicDatatypes;
    property public abstract org.gradle.api.file.SourceDirectorySet graphqlSourceDirectorySet;
    property public abstract org.gradle.api.provider.Property<java.lang.String> nullableValueType;
    property public abstract org.gradle.api.provider.Property<error.NonExistentClass> operationIdGenerator;
    property public abstract org.gradle.api.provider.Property<error.NonExistentClass> operationOutputGenerator;
    property public abstract org.gradle.api.provider.Property<java.lang.String> packageName;
    property public abstract org.gradle.api.provider.Property<java.lang.String> rootPackageName;
    property public abstract org.gradle.api.file.RegularFileProperty schemaFile;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> sealedClassesForEnumsMatching;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> suppressRawTypesWarning;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> useJavaBeansSemanticNaming;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> useSemanticNaming;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> warnOnDeprecatedUsages;
  }

  public interface Introspection {
    method public org.gradle.api.provider.Property<java.lang.String> getEndpointUrl();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getHeaders();
    method @Deprecated public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getQueryParameters();
    method public org.gradle.api.provider.Property<java.lang.String> getSourceSetName();
    property public abstract org.gradle.api.provider.Property<java.lang.String> endpointUrl;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> headers;
    property @Deprecated public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> queryParameters;
    property public abstract org.gradle.api.provider.Property<java.lang.String> sourceSetName;
  }

  public interface RegisterOperationsConfig {
    method public org.gradle.api.provider.Property<java.lang.String> getGraph();
    method public org.gradle.api.provider.Property<java.lang.String> getGraphVariant();
    method public org.gradle.api.provider.Property<java.lang.String> getKey();
    property public abstract org.gradle.api.provider.Property<java.lang.String> graph;
    property public abstract org.gradle.api.provider.Property<java.lang.String> graphVariant;
    property public abstract org.gradle.api.provider.Property<java.lang.String> key;
  }

  public interface Service extends com.apollographql.apollo.gradle.api.CompilerParams {
    method public org.gradle.api.provider.ListProperty<java.lang.String> getExclude();
    method public org.gradle.api.provider.Property<java.lang.String> getSchemaPath();
    method public org.gradle.api.provider.Property<java.lang.String> getSourceFolder();
    method public void introspection(org.gradle.api.Action<? super com.apollographql.apollo.gradle.api.Introspection> configure);
    method public void registerOperations(org.gradle.api.Action<? super com.apollographql.apollo.gradle.api.RegisterOperationsConfig> configure);
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> exclude;
    property public abstract org.gradle.api.provider.Property<java.lang.String> schemaPath;
    property public abstract org.gradle.api.provider.Property<java.lang.String> sourceFolder;
  }

}

