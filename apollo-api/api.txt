// Signature format: 4.0
package com.apollographql.apollo {

  public interface Logger {
    method public void log(int priority, String message, Throwable? t, java.lang.Object... args);
    field public static final com.apollographql.apollo.Logger.Companion Companion;
    field public static final int DEBUG = 3; // 0x3
    field public static final int ERROR = 6; // 0x6
    field public static final int WARN = 5; // 0x5
  }

  public static final class Logger.Companion {
    field public static final int DEBUG = 3; // 0x3
    field public static final int ERROR = 6; // 0x6
    field public static final int WARN = 5; // 0x5
  }

}

package com.apollographql.apollo.api {

  @kotlin.RequiresOptIn(level=kotlin.RequiresOptIn.Level) @kotlin.annotation.MustBeDocumented @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ApolloExperimental {
  }

  public final class BigDecimal {
    ctor public BigDecimal(String strVal);
    ctor public BigDecimal(double doubleVal);
    ctor public BigDecimal(int intVal);
    ctor public BigDecimal(long longVal);
    method public com.apollographql.apollo.api.BigDecimal add(com.apollographql.apollo.api.BigDecimal augend);
    method public com.apollographql.apollo.api.BigDecimal divide(com.apollographql.apollo.api.BigDecimal divisor);
    method public boolean equals(Object? other);
    method public int hashCode();
    method public com.apollographql.apollo.api.BigDecimal multiply(com.apollographql.apollo.api.BigDecimal multiplicand);
    method public com.apollographql.apollo.api.BigDecimal negate();
    method public int signum();
    method public com.apollographql.apollo.api.BigDecimal subtract(com.apollographql.apollo.api.BigDecimal subtrahend);
    method public byte toByte();
    method public char toChar();
    method public double toDouble();
    method public float toFloat();
    method public int toInt();
    method public long toLong();
    method public short toShort();
    method public String toString();
  }

  public final class BigDecimal {
    ctor public BigDecimal();
    ctor public BigDecimal(String strVal);
    ctor public BigDecimal(double doubleVal);
    ctor public BigDecimal(int intVal);
    ctor public BigDecimal(long longVal);
    method public com.apollographql.apollo.api.BigDecimal add(com.apollographql.apollo.api.BigDecimal augend);
    method public com.apollographql.apollo.api.BigDecimal divide(com.apollographql.apollo.api.BigDecimal divisor);
    method public boolean equals(Object? other);
    method public int hashCode();
    method public com.apollographql.apollo.api.BigDecimal multiply(com.apollographql.apollo.api.BigDecimal multiplicand);
    method public com.apollographql.apollo.api.BigDecimal negate();
    method public int signum();
    method public com.apollographql.apollo.api.BigDecimal subtract(com.apollographql.apollo.api.BigDecimal subtrahend);
    method public byte toByte();
    method public char toChar();
    method public double toDouble();
    method public float toFloat();
    method public int toInt();
    method public long toLong();
    method public short toShort();
    method public String toString();
  }

  public final class BigDecimalKt {
    method public static Number toNumber(com.apollographql.apollo.api.BigDecimal);
  }

  public final class BigDecimalKt {
    method public static Number toNumber(com.apollographql.apollo.api.BigDecimal);
  }

  public final class BigDecimalKt {
    method public static Number toNumber(com.apollographql.apollo.api.BigDecimal);
  }

  public interface CustomTypeAdapter<T> {
    method public T! decode(com.apollographql.apollo.api.CustomTypeValue<?> value);
    method public com.apollographql.apollo.api.CustomTypeValue<?> encode(T? value);
  }

  public abstract sealed class CustomTypeValue<T> {
    method public static final com.apollographql.apollo.api.CustomTypeValue<?> fromRawValue(Object value);
    field public static final com.apollographql.apollo.api.CustomTypeValue.Companion Companion;
    field public final T? value;
  }

  public static final class CustomTypeValue.Companion {
    method public com.apollographql.apollo.api.CustomTypeValue<?> fromRawValue(Object value);
  }

  public static final class CustomTypeValue.GraphQLBoolean extends com.apollographql.apollo.api.CustomTypeValue<java.lang.Boolean> {
    ctor public CustomTypeValue.GraphQLBoolean(boolean value);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public static final class CustomTypeValue.GraphQLJsonList extends com.apollographql.apollo.api.CustomTypeValue<java.util.List<?>> {
    ctor public CustomTypeValue.GraphQLJsonList(java.util.List<?> value);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public static final class CustomTypeValue.GraphQLJsonObject extends com.apollographql.apollo.api.CustomTypeValue<java.util.Map<java.lang.String,?>> {
    ctor public CustomTypeValue.GraphQLJsonObject(java.util.Map<java.lang.String,?> value);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public static final class CustomTypeValue.GraphQLNull extends com.apollographql.apollo.api.CustomTypeValue<kotlin.Unit> {
    field public static final com.apollographql.apollo.api.CustomTypeValue.GraphQLNull INSTANCE;
  }

  public static final class CustomTypeValue.GraphQLNumber extends com.apollographql.apollo.api.CustomTypeValue<java.lang.Number> {
    ctor public CustomTypeValue.GraphQLNumber(Number value);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public static final class CustomTypeValue.GraphQLString extends com.apollographql.apollo.api.CustomTypeValue<java.lang.String> {
    ctor public CustomTypeValue.GraphQLString(String value);
    method public boolean equals(Object? other);
    method public int hashCode();
  }

  public interface EnumValue {
    method public String getRawValue();
    property public abstract String rawValue;
  }

  public final class Error {
    ctor public Error(String message, java.util.List<com.apollographql.apollo.api.Error.Location> locations, java.util.Map<java.lang.String,?> customAttributes);
    method @Deprecated public java.util.Map<java.lang.String,java.lang.Object> customAttributes();
    method public boolean equals(Object? other);
    method public java.util.Map<java.lang.String,java.lang.Object> getCustomAttributes();
    method public java.util.List<com.apollographql.apollo.api.Error.Location> getLocations();
    method public String getMessage();
    method public int hashCode();
    method @Deprecated public java.util.List<com.apollographql.apollo.api.Error.Location> locations();
    method @Deprecated public String? message();
    method public String toString();
    property public final java.util.Map<java.lang.String,java.lang.Object> customAttributes;
    property public final java.util.List<com.apollographql.apollo.api.Error.Location> locations;
    property public final String message;
  }

  public static final class Error.Location {
    ctor public Error.Location(long line, long column);
    method @Deprecated public long column();
    method public boolean equals(Object? other);
    method public long getColumn();
    method public long getLine();
    method public int hashCode();
    method @Deprecated public long line();
    method public String toString();
    property public final long column;
    property public final long line;
  }

  @com.apollographql.apollo.api.ApolloExperimental public interface ExecutionContext {
    method public <R> R! fold(R? initial, kotlin.jvm.functions.Function2<? super R,? super com.apollographql.apollo.api.ExecutionContext.Element,? extends R> operation);
    method public operator <E extends com.apollographql.apollo.api.ExecutionContext.Element> E? get(com.apollographql.apollo.api.ExecutionContext.Key<E> key);
    method public com.apollographql.apollo.api.ExecutionContext minusKey(com.apollographql.apollo.api.ExecutionContext.Key<?> key);
    method public default operator com.apollographql.apollo.api.ExecutionContext plus(com.apollographql.apollo.api.ExecutionContext context);
    field public static final com.apollographql.apollo.api.ExecutionContext.Companion Companion;
    field public static final com.apollographql.apollo.api.ExecutionContext Empty;
  }

  public static final class ExecutionContext.Companion {
  }

  public static interface ExecutionContext.Element extends com.apollographql.apollo.api.ExecutionContext {
    method public default <R> R! fold(R? initial, kotlin.jvm.functions.Function2<? super R,? super com.apollographql.apollo.api.ExecutionContext.Element,? extends R> operation);
    method public default operator <E extends com.apollographql.apollo.api.ExecutionContext.Element> E? get(com.apollographql.apollo.api.ExecutionContext.Key<E> key);
    method public com.apollographql.apollo.api.ExecutionContext.Key<?> getKey();
    method public default com.apollographql.apollo.api.ExecutionContext minusKey(com.apollographql.apollo.api.ExecutionContext.Key<?> key);
    property public abstract com.apollographql.apollo.api.ExecutionContext.Key<?> key;
  }

  public static interface ExecutionContext.Key<E extends com.apollographql.apollo.api.ExecutionContext.Element> {
  }

  public class FileUpload {
    ctor public FileUpload(String mimetype, String? filePath);
    method public long contentLength();
    method public String? fileName();
    method public final String? getFilePath();
    method public final String getMimetype();
    method public void writeTo(okio.BufferedSink sink);
    property public final String? filePath;
    property public final String mimetype;
    field public static final com.apollographql.apollo.api.FileUpload.Companion Companion;
  }

  public static final class FileUpload.Companion {
  }

  public final class FileuploadKt {
    method public static com.apollographql.apollo.api.FileUpload create(com.apollographql.apollo.api.FileUpload.Companion, String mimetype, String filePath);
  }

  public interface GraphqlFragment {
    method public com.apollographql.apollo.api.internal.ResponseFieldMarshaller marshaller();
  }

  public final class Input<V> {
    method public static <V> com.apollographql.apollo.api.Input<V> absent();
    method public boolean equals(Object? other);
    method public static <V> com.apollographql.apollo.api.Input<V> fromNullable(V? value);
    method public int hashCode();
    method public static <V> com.apollographql.apollo.api.Input<V> optional(V? value);
    method public String toString();
    field public static final com.apollographql.apollo.api.Input.Companion Companion;
    field public final boolean defined;
    field public final V? value;
  }

  public static final class Input.Companion {
    method public <V> com.apollographql.apollo.api.Input<V> absent();
    method public <V> com.apollographql.apollo.api.Input<V> fromNullable(V? value);
    method public <V> com.apollographql.apollo.api.Input<V> optional(V? value);
  }

  public interface InputType {
    method public com.apollographql.apollo.api.internal.InputFieldMarshaller marshaller();
  }

  public final class KotlinExtensions {
  }

  public interface Mutation<D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> extends com.apollographql.apollo.api.Operation<D,T,V> {
  }

  public interface Operation<D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> {
    method public okio.ByteString composeRequestBody(boolean autoPersistQueries, boolean withQueryDocument, com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public okio.ByteString composeRequestBody(com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public okio.ByteString composeRequestBody();
    method public com.apollographql.apollo.api.OperationName name();
    method public String operationId();
    method public com.apollographql.apollo.api.Response<T> parse(okio.BufferedSource source, com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public com.apollographql.apollo.api.Response<T> parse(okio.ByteString byteString, com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public com.apollographql.apollo.api.Response<T> parse(okio.BufferedSource source);
    method public com.apollographql.apollo.api.Response<T> parse(okio.ByteString byteString);
    method public String queryDocument();
    method public com.apollographql.apollo.api.internal.ResponseFieldMapper<D> responseFieldMapper();
    method public V variables();
    method public T? wrapData(D? data);
    field public static final com.apollographql.apollo.api.Operation.Companion Companion;
    field public static final com.apollographql.apollo.api.Operation.Variables EMPTY_VARIABLES;
  }

  public static final class Operation.Companion {
  }

  public static interface Operation.Data {
    method public com.apollographql.apollo.api.internal.ResponseFieldMarshaller marshaller();
  }

  public static class Operation.Variables {
    ctor public Operation.Variables();
    method public final String marshal();
    method public final String marshal(com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public com.apollographql.apollo.api.internal.InputFieldMarshaller marshaller();
    method public java.util.Map<java.lang.String,java.lang.Object> valueMap();
  }

  public final class OperationDataJsonSerializer {
    method public static String serialize(com.apollographql.apollo.api.Operation.Data, optional String indent, optional com.apollographql.apollo.api.ScalarTypeAdapters scalarTypeAdapters);
    method public static String serialize(com.apollographql.apollo.api.Operation.Data, optional String indent);
    method public static String serialize(com.apollographql.apollo.api.Operation.Data);
  }

  public interface OperationName {
    method public String name();
  }

  public interface Query<D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> extends com.apollographql.apollo.api.Operation<D,T,V> {
  }

  public final class Response<T> {
    ctor public Response(com.apollographql.apollo.api.Operation<?,?,?> operation, T? data, java.util.List<com.apollographql.apollo.api.Error>? errors, java.util.Set<java.lang.String> dependentKeys, boolean isFromCache, java.util.Map<java.lang.String,?> extensions, com.apollographql.apollo.api.ExecutionContext executionContext);
    ctor public Response(com.apollographql.apollo.api.Response.Builder<T> builder);
    method public static <T> com.apollographql.apollo.api.Response.Builder<T> builder(com.apollographql.apollo.api.Operation<?,?,?> operation);
    method public com.apollographql.apollo.api.Operation<?,?,?> component1();
    method public T? component2();
    method public java.util.List<com.apollographql.apollo.api.Error>? component3();
    method public java.util.Set<java.lang.String> component4();
    method public boolean component5();
    method public java.util.Map<java.lang.String,java.lang.Object> component6();
    method public com.apollographql.apollo.api.ExecutionContext component7();
    method public com.apollographql.apollo.api.Response<T> copy(com.apollographql.apollo.api.Operation<?,?,?> operation, T? data, java.util.List<com.apollographql.apollo.api.Error>? errors, java.util.Set<java.lang.String> dependentKeys, boolean isFromCache, java.util.Map<java.lang.String,?> extensions, com.apollographql.apollo.api.ExecutionContext executionContext);
    method @Deprecated public T? data();
    method @Deprecated public java.util.Set<java.lang.String> dependentKeys();
    method public boolean equals(Object? other);
    method @Deprecated public java.util.List<com.apollographql.apollo.api.Error>? errors();
    method @Deprecated public java.util.Map<java.lang.String,java.lang.Object> extensions();
    method @Deprecated public boolean fromCache();
    method public T? getData();
    method public java.util.Set<java.lang.String> getDependentKeys();
    method public java.util.List<com.apollographql.apollo.api.Error>? getErrors();
    method public com.apollographql.apollo.api.ExecutionContext getExecutionContext();
    method public java.util.Map<java.lang.String,java.lang.Object> getExtensions();
    method @Deprecated public boolean getFromCache();
    method public com.apollographql.apollo.api.Operation<?,?,?> getOperation();
    method public boolean hasErrors();
    method public int hashCode();
    method public boolean isFromCache();
    method @Deprecated public com.apollographql.apollo.api.Operation<?,?,?> operation();
    method public com.apollographql.apollo.api.Response.Builder<T> toBuilder();
    method public String toString();
    property public final T? data;
    property public final java.util.Set<java.lang.String> dependentKeys;
    property public final java.util.List<com.apollographql.apollo.api.Error>? errors;
    property public final com.apollographql.apollo.api.ExecutionContext executionContext;
    property public final java.util.Map<java.lang.String,java.lang.Object> extensions;
    property @Deprecated public final boolean fromCache;
    property public final boolean isFromCache;
    property public final com.apollographql.apollo.api.Operation<?,?,?> operation;
    field public static final com.apollographql.apollo.api.Response.Companion Companion;
  }

  public static final class Response.Builder<T> {
    method public com.apollographql.apollo.api.Response<T> build();
    method public com.apollographql.apollo.api.Response.Builder<T> data(T? data);
    method public com.apollographql.apollo.api.Response.Builder<T> dependentKeys(java.util.Set<java.lang.String>? dependentKeys);
    method public com.apollographql.apollo.api.Response.Builder<T> errors(java.util.List<com.apollographql.apollo.api.Error>? errors);
    method public com.apollographql.apollo.api.Response.Builder<T> executionContext(com.apollographql.apollo.api.ExecutionContext executionContext);
    method public com.apollographql.apollo.api.Response.Builder<T> extensions(java.util.Map<java.lang.String,?>? extensions);
    method public com.apollographql.apollo.api.Response.Builder<T> fromCache(boolean fromCache);
  }

  public static final class Response.Companion {
    method public <T> com.apollographql.apollo.api.Response.Builder<T> builder(com.apollographql.apollo.api.Operation<?,?,?> operation);
  }

  public class ResponseField {
    method @Deprecated public final java.util.Map<java.lang.String,java.lang.Object> arguments();
    method @Deprecated public final java.util.List<com.apollographql.apollo.api.ResponseField.Condition> conditions();
    method public boolean equals(Object? other);
    method @Deprecated public final String fieldName();
    method public static final com.apollographql.apollo.api.ResponseField forBoolean(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField.CustomTypeField forCustomType(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, com.apollographql.apollo.api.ScalarType scalarType, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forDouble(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forEnum(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forFragment(String responseName, String fieldName, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forInt(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forList(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forLong(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forObject(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public static final com.apollographql.apollo.api.ResponseField forString(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public final java.util.Map<java.lang.String,java.lang.Object> getArguments();
    method public final java.util.List<com.apollographql.apollo.api.ResponseField.Condition> getConditions();
    method public final String getFieldName();
    method public final boolean getOptional();
    method public final String getResponseName();
    method public final com.apollographql.apollo.api.ResponseField.Type getType();
    method public int hashCode();
    method public static final boolean isArgumentValueVariableType(java.util.Map<java.lang.String,?> objectMap);
    method @Deprecated public final boolean optional();
    method public final Object? resolveArgument(String name, com.apollographql.apollo.api.Operation.Variables variables);
    method @Deprecated public final String responseName();
    method @Deprecated public final com.apollographql.apollo.api.ResponseField.Type type();
    property public final java.util.Map<java.lang.String,java.lang.Object> arguments;
    property public final java.util.List<com.apollographql.apollo.api.ResponseField.Condition> conditions;
    property public final String fieldName;
    property public final boolean optional;
    property public final String responseName;
    property public final com.apollographql.apollo.api.ResponseField.Type type;
    field public static final com.apollographql.apollo.api.ResponseField.Companion Companion;
    field public static final String VARIABLE_NAME_KEY = "variableName";
  }

  public static final class ResponseField.BooleanCondition extends com.apollographql.apollo.api.ResponseField.Condition {
    method public boolean equals(Object? other);
    method @Deprecated public boolean getInverted();
    method public String getVariableName();
    method public int hashCode();
    method @Deprecated public boolean inverted();
    method public boolean isInverted();
    method @Deprecated public String variableName();
    property @Deprecated public final boolean inverted;
    property public final boolean isInverted;
    property public final String variableName;
  }

  public static final class ResponseField.Companion {
    method public com.apollographql.apollo.api.ResponseField forBoolean(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField.CustomTypeField forCustomType(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, com.apollographql.apollo.api.ScalarType scalarType, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forDouble(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forEnum(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forFragment(String responseName, String fieldName, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forInt(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forList(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forLong(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forObject(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public com.apollographql.apollo.api.ResponseField forString(String responseName, String fieldName, java.util.Map<java.lang.String,?>? arguments, boolean optional, java.util.List<? extends com.apollographql.apollo.api.ResponseField.Condition>? conditions);
    method public boolean isArgumentValueVariableType(java.util.Map<java.lang.String,?> objectMap);
  }

  public static class ResponseField.Condition {
    method public static final com.apollographql.apollo.api.ResponseField.BooleanCondition booleanCondition(String variableName, boolean inverted);
    method public static final com.apollographql.apollo.api.ResponseField.TypeNameCondition typeCondition(String![] types);
    field public static final com.apollographql.apollo.api.ResponseField.Condition.Companion Companion;
  }

  public static final class ResponseField.Condition.Companion {
    method public com.apollographql.apollo.api.ResponseField.BooleanCondition booleanCondition(String variableName, boolean inverted);
    method public com.apollographql.apollo.api.ResponseField.TypeNameCondition typeCondition(String![] types);
  }

  public static final class ResponseField.CustomTypeField extends com.apollographql.apollo.api.ResponseField {
    method public com.apollographql.apollo.api.ScalarType getScalarType();
    method @Deprecated public com.apollographql.apollo.api.ScalarType scalarType();
    property public final com.apollographql.apollo.api.ScalarType scalarType;
  }

  public enum ResponseField.Type {
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type BOOLEAN;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type CUSTOM;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type DOUBLE;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type ENUM;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type FRAGMENT;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type FRAGMENTS;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type INT;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type LIST;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type LONG;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type OBJECT;
    enum_constant public static final com.apollographql.apollo.api.ResponseField.Type STRING;
  }

  public static final class ResponseField.TypeNameCondition extends com.apollographql.apollo.api.ResponseField.Condition {
    method public boolean equals(Object? other);
    method public java.util.List<java.lang.String> getTypeNames();
    method public int hashCode();
    method @Deprecated public java.util.List<java.lang.String> typeNames();
    property public final java.util.List<java.lang.String> typeNames;
  }

  public interface ScalarType {
    method public String className();
    method public String typeName();
  }

  public final class ScalarTypeAdapters {
    ctor public ScalarTypeAdapters(java.util.Map<com.apollographql.apollo.api.ScalarType,? extends com.apollographql.apollo.api.CustomTypeAdapter<?>> customAdapters);
    method public <T> com.apollographql.apollo.api.CustomTypeAdapter<T> adapterFor(com.apollographql.apollo.api.ScalarType scalarType);
    method public java.util.Map<com.apollographql.apollo.api.ScalarType,com.apollographql.apollo.api.CustomTypeAdapter<?>> getCustomAdapters();
    property public final java.util.Map<com.apollographql.apollo.api.ScalarType,com.apollographql.apollo.api.CustomTypeAdapter<?>> customAdapters;
    field public static final com.apollographql.apollo.api.ScalarTypeAdapters.Companion Companion;
    field public static final com.apollographql.apollo.api.ScalarTypeAdapters DEFAULT;
  }

  public static final class ScalarTypeAdapters.Companion {
  }

  public interface Subscription<D extends com.apollographql.apollo.api.Operation.Data, T, V extends com.apollographql.apollo.api.Operation.Variables> extends com.apollographql.apollo.api.Operation<D,T,V> {
  }

}

package com.apollographql.apollo.exception {

  public class ApolloException {
    ctor public ApolloException(String message);
    ctor public ApolloException(String message, Throwable cause);
  }

}

